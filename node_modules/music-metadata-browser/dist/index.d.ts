import * as mm from 'music-metadata/lib/core';
import * as Type from 'music-metadata/lib/type';
export declare type IAudioMetadata = Type.IAudioMetadata;
export declare type IOptions = Type.IOptions;
export declare type ITag = Type.ITag;
export declare type INativeTagDict = Type.INativeTagDict;
/**
 * Parse audio Stream
 * @param stream
 * @param {string} contentType MIME-Type
 * @param {IOptions} options Parsing options
 * @returns {Promise<IAudioMetadata>}
 */
export declare const parseNodeStream: typeof mm.parseStream;
/**
 * Parse Web API ReadableStream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream
 * @param {ReadableStream} stream ReadableStream
 * @param {string} contentType MIME-Type
 * @param {IOptions} options Parsing options
 * @returns {Promise<IAudioMetadata>}
 */
export declare function parseReadableStream(stream: ReadableStream, contentType: any, options?: IOptions): Promise<IAudioMetadata>;
/**
 * Parse audio from Node Buffer
 * @param {Stream.Readable} stream Audio input stream
 * @param {string} mimeType <string> Content specification MIME-type, e.g.: 'audio/mpeg'
 * @param {IOptions} options Parsing options
 * @returns {Promise<IAudioMetadata>}
 * Ref: https://github.com/Borewit/strtok3/blob/e6938c81ff685074d5eb3064a11c0b03ca934c1d/src/index.ts#L15
 */
export declare const parseBuffer: typeof mm.parseBuffer;
/**
 * Parse Web API File
 * @param {Blob} blob
 * @param {IOptions} options Parsing options
 * @returns {Promise<IAudioMetadata>}
 */
export declare function parseBlob(blob: Blob, options?: IOptions): Promise<IAudioMetadata>;
/**
 * Parse fetched file, using the Web Fetch API
 * @param {string} audioTrackUrl URL to download the audio track from
 * @param {IOptions} options Parsing options
 * @returns {Promise<IAudioMetadata>}
 */
export declare function fetchFromUrl(audioTrackUrl: string, options?: IOptions): Promise<IAudioMetadata>;
/**
 * Parse audio from ITokenizer source
 * @param {strtok3.ITokenizer} Audio source implementing the tokenizer interface
 * @param {string} mimeType <string> Content specification MIME-type, e.g.: 'audio/mpeg'
 * @param {IOptions} options Parsing options
 * @returns {Promise<IAudioMetadata>}
 */
export declare const parseFromTokenizer: typeof mm.parseFromTokenizer;
/**
 * Create a dictionary ordered by their tag id (key)
 * @param {ITag[]} nativeTags list of tags
 * @returns {INativeTagDict} Tags indexed by id
 */
export declare const orderTags: typeof mm.orderTags;
/**
 * Convert rating to 1-5 star rating
 * @param {number} rating Normalized rating [0..1] (common.rating[n].rating)
 * @returns {number} Number of stars: 1, 2, 3, 4 or 5 stars
 */
export declare const ratingToStars: typeof mm.ratingToStars;
