!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("minimal",[],n):"object"==typeof exports?exports.minimal=n():e.minimal=n()}(self,(function(){return(()=>{"use strict";var e={7083:(e,n,a)=>{a.r(n),a.d(n,{default:()=>r});var t={};t["_Aderrasi - Wanderer in Curved Space - mash0000 - faclempt kibitzing meshuggana schmaltz (Geiss color mix)"]=a(9047),t._Mig_085=a(2813),t["$$$ Royal - Mashup (197)"]=a(5005),t["$$$ Royal - Mashup (431)"]=a(9122),t["An AdamFX n Martin Infusion 2 flexi - Why The Sky Looks Diffrent Today - AdamFx n Martin Infusion - Tack Tile Disfunction B"]=a(5539),t["Flexi - alien fish pond"]=a(7554),t["flexi - bouncing balls [double mindblob neon mix]"]=a(4900),t["Flexi - mindblob [shiny mix]"]=a(3612),t["Flexi, fishbrain, Geiss + Martin - tokamak witchery"]=a(3472),t["Flexi, martin + geiss - dedicated to the sherwin maxawow"]=a(4841),t["Geiss - Cauldron - painterly 2 (saturation remix)"]=a(2956),t["Geiss - Reaction Diffusion 2"]=a(1939),t["Geiss - Thumb Drum"]=a(6848),t["Halfbreak - Funny Madness"]=a(7485),t["Martin - acid wiring"]=a(378),t["martin - chain breaker"]=a(5916),t["martin - extreme heat"]=a(1289),t["martin - mandelbox explorer - high speed demo version"]=a(5929),t["martin - reflections on black tiles"]=a(4324),t["martin - witchcraft reloaded"]=a(5595),t["martin [shadow harlequins shape code] - fata morgana"]=a(1075),t["Milk Artist At our Best - FED - SlowFast Ft AdamFX n Martin - HD CosmoFX"]=a(3815),t["MilkDrop2077.R002"]=a(5717),t["ShadowHarlequin - LovelyShinySquares [ liquid starburst rmx ] - unchained + rovaster - luckless - martin - starfield sector"]=a(984),t["shifter - liquid circuitry - conjugoth"]=a(7022),t["suksma - uninitialized variabowl (hydroponic chronic)"]=a(2897),t["Unchained - Rewop"]=a(2158),t["yin - 191 - Temporal singularities"]=a(5171),t["Zylot - Paint Spill (Music Reactive Paint Mix)"]=a(7927);const r=t},5005:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":3,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wrap":0,"darken_center":1,"solarize":1,"wave_a":0.001,"zoom":0.97,"rot":-6.27999,"warp":0.00052,"wave_r":0,"wave_g":0,"wave_b":0,"ob_r":1,"ob_g":1,"ob_b":1,"mv_r":0.8,"mv_a":0},"shapes":[{"baseVals":{"textured":1,"x":0.75,"y":0.75,"rad":0.7417,"tex_zoom":0.22746,"g":1,"b":1,"r2":1,"b2":1,"a2":0.1,"border_r":0,"border_g":0,"border_a":0,"enabled":0},"init_eqs_eel":"tex_saw = 0.4;","frame_eqs_eel":"ang = q1*0.2;\\n\\ntex_capture = above(q3,1);\\ntex_zoom = 0.6;"},{"baseVals":{"enabled":1,"textured":1,"x":0.25,"y":0.75,"rad":4.44708,"tex_zoom":0.22746,"r":0,"a":0.1,"g2":0,"a2":0.2,"border_r":0,"border_g":0,"border_a":0},"init_eqs_eel":"tex_saw = 0.4;","frame_eqs_eel":"ang = q1*0.2;\\n//x = 0.5 + 0.2*sin(q2);\\n//y = 0.5 + (0.3*sin(q2));\\n\\ntex_capture = above(q3,1);\\ntex_zoom = 0.6;"},{"baseVals":{"textured":1,"rad":6.621,"tex_zoom":0.22746,"g":1,"b":1,"a":0.2,"r2":1,"b2":1,"border_r":0,"border_g":0,"border_a":0,"enabled":0},"init_eqs_eel":"tex_saw = 0.4;","frame_eqs_eel":"ang = q1*0.2;\\n//x = 0.5 + 0.2*sin(q2);\\n//y = 0.5 + (0.3*sin(q2));\\n\\ntex_capture = above(q3,2);\\ntex_zoom = 0.6;"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"thick":1,"smoothing":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//q1 = state;\\n//q2 = basstime;\\n\\nq1 = 0;\\nspeed = bass_att*0.8;\\nv = sample*1000000 + value2*bass*0.1;\\n\\n//state 0 elipse\\nxs = xs + sin(v)*speed*atan(v*1.51);\\nys = ys + sin(v)*speed*atan((v*10));\\n\\nx = 0.5 + 0.5*sin(xs*0.1)*cos(time*0.2 + xs);\\ny = 0.5 + 0.5*sin(ys*0.12)*cos(time*0.1 + xs);\\n\\nx = x*0.8 + 0.1;\\ny = y*0.8 + 0.1;\\n\\nr = 0.5 + 0.5*sin(time*1.22) + 0.1;\\ng = 0.4 + 0.4*sin(time*1.307 + 2*y);\\nb = 0.4 + 0.4*sin(time*1.959 + x*2);\\n\\nxs = if(above(xs,1000),0 ,xs);\\nys = if(above(ys,1000),0 ,ys);"},{"baseVals":{"enabled":1,"thick":1,"smoothing":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//q1 = state;\\n//q2 = basstime;\\n\\nq1 = 0;\\nspeed = bass_att*0.8;\\nv = sample*1000000 + value2*bass*0.1;\\n\\n//state 0 elipse\\nxs = xs + sin(v)*speed*atan(v*1.51);\\nys = ys + sin(v)*speed*atan((v*10));\\n\\nx = 0.5 + 0.5*sin(xs*0.1)*cos(time*0.2 + xs);\\ny = 0.5 + 0.5*sin(ys*0.14)*cos(time*0.1 + xs);\\n\\nx = x*0.8 + 0.1;\\ny = y*0.8 + 0.1;\\nx = x*0.6 + 0.2;\\ny = y*0.6 + 0.2;\\n\\nr = 0.5 + 0.5*sin(time*1.322) + 0.1;\\ng = 0.4 + 0.4*sin(time*1.5407 + 2*y);\\nb = 0.4 + 0.4*sin(time*1.759 + x*2);\\n\\nxs = if(above(xs,1000),0 ,xs);\\nys = if(above(ys,1000),0 ,ys);"},{"baseVals":{"enabled":1,"thick":1,"smoothing":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//q1 = state;\\n//q2 = basstime;\\n\\nq1 = 0;\\nspeed = bass_att*0.8;\\nv = sample*1000000 + value2*bass*0.1;\\n\\n//state 0 elipse\\nxs = xs + sin(v)*speed*atan(v*1.51);\\nys = ys + sin(v)*speed*atan((v*10));\\n\\nx = 0.5 + 0.5*sin(xs*0.1)*cos(time*0.2 + xs);\\ny = 0.5 + 0.5*sin(ys*0.14)*cos(time*0.1 + xs);\\n\\nx = x*0.8 + 0.1;\\ny = y*0.8 + 0.1;\\nx = x*0.25 + 0.375;\\ny = y*0.25 + 0.375;\\n\\nr = 0.5 + 0.5*sin(time*1.622) + 0.1;\\ng = 0.4 + 0.4*sin(time*1.2407 + 2*y);\\nb = 0.4 + 0.4*sin(time*1.359 + x*2);\\n\\nxs = if(above(xs,1000),0 ,xs);\\nys = if(above(ys,1000),0 ,ys);"},{"baseVals":{"thick":1,"additive":1,"smoothing":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//q1 = state;\\n//q2 = basstime;\\n\\nq1 = 0;\\nspeed = bass_att*0.8;\\nv = sample*10000 + value2*bass*0.1;\\n\\n//state 0 elipse\\nxs = xs + (equal(0,q1))*sin(v*1)*speed*atan(v*1.51);\\nys = ys + (equal(0,q1))*sin(v*1)*speed;\\n\\n\\nx = 0.5 + 0.5*sin(xs*0.1)*cos(time*2 + xs);\\ny = 0.5 + 0.5*sin(ys*0.1)*cos(time*2.1 + xs);\\n\\nx = -x*0.6 + 1;\\ny = y*0.9 + 0.05 + bass*0.08;\\ny = y*0.8;\\n\\nr = 0.5 + 0.5*sin(time*1.789) + 0.1;\\ng = 0.4 + 0.4*sin(time*1.478);\\nb = 0.4 + 0.4*sin(time*1.125);\\n\\nxs = if(above(xs,1000),0 ,xs);\\nys = if(above(ys,1000),0 ,ys);"}],"init_eqs_eel":"","frame_eqs_eel":"basstime = basstime + bass*0.03;\\nq1 = basstime*4;\\n\\n//start in most active range\\nbasstime = if(below(basstime,1000),1000,basstime);\\n//basstime = if(above(basstime,495),450,basstime);\\n\\nbasstime = basstime + bass_att*0.03;\\nvol = pow(bass+mid+treb,2);\\nbasssum = vol;\\n\\nstickybit = time%2;\\n\\n//avg vol\\n//buffer 1\\nvolAvg = volAvg + vol*equal(stickybit,1);\\n//number of samples 1 or framerate\\nsample1 = sample1 + equal(stickybit,1);\\n//buffer 2\\nvolAvg2 = volAvg2 + vol*equal(stickybit,0);\\n//number of samples 2\\nsample2 = sample2 + equal(stickybit,0);\\n\\n//transision\\nedge = bnot(equal(bit2,stickybit));\\n\\nvolAvg = volAvg - volAvg*edge*stickybit;\\nvolAvg2 = volAvg2 - volAvg2*edge*equal(stickybit,0);\\n\\nsample1 = sample1  - sample1*edge*stickybit;\\nsample2 = sample2  - sample2*edge*equal(stickybit,0);\\n\\n//test vol against avg buffer lvl\\ndiff = if(equal(stickybit,1), (basssum/(volAvg2/sample2)) , 0);\\ndiff = if(equal(stickybit,0), (basssum/(volAvg/sample1)), diff);\\n\\nq3 = diff;\\n\\nbit2 = time%2;\\n\\ndifftime = difftime + diff*0.03;\\nq2 = difftime;\\n\\n//fix a strange error\\ndifftime = if(above(difftime,2000),0, difftime);\\n\\nmonitor = abs(cos(time))*3.14;\\n\\n\\nmv_a = above(diff,10);","pixel_eqs_eel":"zoom = 1 + 0.05*q3*rad;\\n\\ndecay_r = 0.2*rad*sin(q2*0.35) + 0.85 + 0.1*sin(q2);\\ndecay_g = 0.2*rad*sin(q2*0.5) + 0.85 + 0.1*sin(0.7*q2);\\ndecay_b = 0.2*rad*sin(q2*0.4) + 0.85 + 0.1*sin(0.8*q2);\\n\\nrot = 0;","warp":" shader_body { \\n  vec3 ret_1;\\n  vec2 tmpvar_2;\\n  tmpvar_2 = (vec2(1.0, 0.0) * texsize.z);\\n  vec2 tmpvar_3;\\n  tmpvar_3 = (vec2(0.0, 1.0) * texsize.z);\\n  ret_1 = (((\\n    (texture (sampler_main, (uv + tmpvar_2)).xyz + texture (sampler_main, (uv + tmpvar_2)).xyz)\\n   * 0.5) + (\\n    (texture (sampler_main, (uv + tmpvar_3)).xyz + texture (sampler_main, (uv + tmpvar_3)).xyz)\\n   * 0.5)) - texture (sampler_main, ((\\n    (uv - 0.5)\\n   * 0.9) + 0.5)).xyz);\\n  ret_1 = (ret_1 - 0.4);\\n  vec4 tmpvar_4;\\n  tmpvar_4.w = 1.0;\\n  tmpvar_4.xyz = ret_1;\\n  ret = tmpvar_4.xyz;\\n }","comp":" shader_body { \\n  vec3 ret_1;\\n  vec2 tmpvar_2;\\n  tmpvar_2 = ((0.5 - uv) + 0.5);\\n  ret_1 = (mix (texture (sampler_main, uv).xyz, texture (sampler_main, tmpvar_2).xyz, vec3(0.5, 0.5, 0.5)) * 2.0);\\n  ret_1 = (((\\n    ((texture (sampler_blur3, uv).xyz * scale3) + bias3)\\n   * 2.0) + (\\n    ((texture (sampler_blur3, tmpvar_2).xyz * scale3) + bias3)\\n   * 2.0)) + ret_1);\\n  vec4 tmpvar_3;\\n  tmpvar_3.w = 1.0;\\n  tmpvar_3.xyz = ret_1;\\n  ret = tmpvar_3.xyz;\\n }"}')},9122:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":2,"gammaadj":1,"wave_mode":7,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"wave_a":0.001,"wave_scale":0.958,"wave_smoothing":0.45,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":30.965,"warpscale":2.572,"zoom":1.00901,"warp":0.00054,"wave_r":0,"wave_g":0,"wave_b":0,"mv_x":25.6,"mv_y":9.6,"mv_l":0,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"textured":1,"x":0.09,"y":0.9,"rad":0.22437,"tex_zoom":1.76002,"r2":1,"g2":0,"a2":0.6,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"x":0.26,"y":0.2,"rad":0.39317,"tex_zoom":6.19589,"r":0,"g":0.55,"b":0.5,"g2":0.4,"b2":0.4,"a2":0.07,"border_r":0.3,"border_g":0.7,"border_b":0.8,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":44,"additive":1,"x":0.503,"rad":0.03886,"tex_zoom":0.60986,"g":0.1,"a":0.9,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"rad":0.01,"tex_zoom":0.49981,"r":0,"g2":0,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"samples":282,"sep":20,"usedots":1,"thick":1,"additive":1,"scaling":3.91581,"smoothing":0.1,"r":0.2,"g":0.3,"a":0.6,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"usedots":1,"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.2,"b":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"wave_r = 0.85 + 0.25*sin(0.437*time+1);\\nwave_g = 0.85 + 0.25*sin(0.544*time+2);\\nwave_b = 0.85 + 0.25*sin(0.751*time+3);\\nrot = rot + 0.010*( 0.60*sin(0.381*time) + 0.40*sin(0.579*time) );\\ncx = cx + 0.210*( 0.60*sin(0.374*time) + 0.40*sin(0.294*time) );\\ncy = cy + 0.210*( 0.60*sin(0.393*time) + 0.40*sin(0.223*time) );\\ndx = dx + 0.003*( 0.60*sin(0.234*time) + 0.40*sin(0.277*time) );\\ndy = dy + 0.003*( 0.60*sin(0.284*time) + 0.40*sin(0.247*time) );\\ndecay = decay - 0.01*equal(frame%6,0);\\ndx = dx + dx_residual;\\ndy = dy + dy_residual;\\nbass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.3)*0.96+1.3);\\ndx_residual = equal(bass_thresh,2.13)*0.016*sin(time*7) + (1-equal(bass_thresh,2.13))*dx_residual;\\ndy_residual = equal(bass_thresh,2.13)*0.012*sin(time*9) + (1-equal(bass_thresh,2.13))*dy_residual;\\nwave_x = wave_x - dx_residual*7;\\nwave_y = wave_y - dy_residual*7;\\nwave_mystery = time*0.03;\\n\\n//zoom = zoom + 0.005*( 0.60*sin(0.1934*time+3) + 0.40*sin(0.307*time+9) );\\n//zoom = zoom + max(0,bass_att-1.1)*0.2;\\n//warp = warp + max(0,treb_att-1.1)*1.0;\\n\\n// this is a great way to respond to beats:\\n// once you get one, let it decay at a constant rate!!\\nrg = max(rg*0.77, 0.02 + 0.5*min(2,max(0,mid_att-1)*1.3));\\nq9 = rg;\\n\\nzoom = zoom + q9*0.1;","pixel_eqs_eel":"","warp":" shader_body { \\n  vec3 ret_1;\\n  ret_1 = texture (sampler_main, uv).xyz;\\n  ret_1 = (ret_1 + ((ret_1 - \\n    ((((\\n      (texture (sampler_blur1, uv).xyz * scale1)\\n     + bias1) * 0.3) + ((\\n      (texture (sampler_blur2, uv).xyz * scale2)\\n     + bias2) * 0.4)) + (((texture (sampler_blur3, uv).xyz * scale3) + bias3) * 0.3))\\n  ) * 0.3));\\n  ret_1 = (ret_1 * 0.9);\\n  ret_1 = (ret_1 + ((\\n    ((texture (sampler_noise_lq, ((\\n      (uv_orig * texsize.xy)\\n     * \\n      (texsize_noise_lq.zw * 0.4)\\n    ) + rand_frame.xy)).xyz - 0.5) / 256.0)\\n   * 122.0) * (\\n    (clamp ((treb_att - 1.0), 0.0, 1.0) * 0.4)\\n   + 0.3)));\\n  ret_1 = mix (ret_1, vec3(dot (ret_1, vec3(0.32, 0.49, 0.29))), vec3(0.2, 0.2, 0.2));\\n  vec4 tmpvar_2;\\n  tmpvar_2.w = 1.0;\\n  tmpvar_2.xyz = ret_1;\\n  ret = tmpvar_2.xyz;\\n }","comp":"vec2 xlat_mutabledz;\\nvec3 xlat_mutableret1;\\nvec2 xlat_mutableuv3;\\n shader_body { \\n  vec2 tmpvar_1;\\n  tmpvar_1.y = 0.0;\\n  tmpvar_1.x = texsize.z;\\n  vec2 tmpvar_2;\\n  tmpvar_2.x = 0.0;\\n  tmpvar_2.y = texsize.w;\\n  vec2 uv_3;\\n  float inten_4;\\n  float dist_5;\\n  vec2 uv1_6;\\n  vec3 ret_7;\\n  vec2 tmpvar_8;\\n  tmpvar_8 = ((uv - 0.5) * aspect.xy);\\n  float tmpvar_9;\\n  tmpvar_9 = (time / 18.0);\\n  dist_5 = (1.0 - fract((0.25 + tmpvar_9)));\\n  inten_4 = ((sqrt(dist_5) * (1.0 - dist_5)) * 4.0);\\n  uv_3 = (tmpvar_8 * aspect.yx);\\n  xlat_mutableuv3 = (vec2(0.51, 0.55) + (uv_3 * dist_5));\\n  xlat_mutabledz.x = (inten_4 * ((2.0 * \\n    dot (texture (sampler_main, (xlat_mutableuv3 + tmpvar_1)).xyz, vec3(0.32, 0.49, 0.29))\\n  ) - (2.0 * \\n    dot (texture (sampler_main, (xlat_mutableuv3 - tmpvar_1)).xyz, vec3(0.32, 0.49, 0.29))\\n  )));\\n  xlat_mutabledz.y = (inten_4 * ((2.0 * \\n    dot (texture (sampler_main, (xlat_mutableuv3 + tmpvar_2)).xyz, vec3(0.32, 0.49, 0.29))\\n  ) - (2.0 * \\n    dot (texture (sampler_main, (xlat_mutableuv3 - tmpvar_2)).xyz, vec3(0.32, 0.49, 0.29))\\n  )));\\n  xlat_mutableret1 = max (vec3(0.0, 0.0, 0.0), (texture (sampler_main, xlat_mutableuv3).xyz * inten_4));\\n  dist_5 = (1.0 - fract((0.5 + tmpvar_9)));\\n  inten_4 = ((sqrt(dist_5) * (1.0 - dist_5)) * 4.0);\\n  uv_3 = (tmpvar_8 * aspect.yx);\\n  xlat_mutableuv3 = (vec2(0.49, 0.55) + (uv_3 * dist_5));\\n  xlat_mutabledz.x = (xlat_mutabledz.x + (inten_4 * (\\n    (2.0 * dot (texture (sampler_main, (xlat_mutableuv3 + tmpvar_1)).xyz, vec3(0.32, 0.49, 0.29)))\\n   - \\n    (2.0 * dot (texture (sampler_main, (xlat_mutableuv3 - tmpvar_1)).xyz, vec3(0.32, 0.49, 0.29)))\\n  )));\\n  xlat_mutabledz.y = (xlat_mutabledz.y + (inten_4 * (\\n    (2.0 * dot (texture (sampler_main, (xlat_mutableuv3 + tmpvar_2)).xyz, vec3(0.32, 0.49, 0.29)))\\n   - \\n    (2.0 * dot (texture (sampler_main, (xlat_mutableuv3 - tmpvar_2)).xyz, vec3(0.32, 0.49, 0.29)))\\n  )));\\n  xlat_mutableret1 = max (xlat_mutableret1, (texture (sampler_main, xlat_mutableuv3).xyz * inten_4));\\n  dist_5 = (1.0 - fract((0.75 + tmpvar_9)));\\n  inten_4 = ((sqrt(dist_5) * (1.0 - dist_5)) * 4.0);\\n  uv_3 = (tmpvar_8 * aspect.yx);\\n  xlat_mutableuv3 = (vec2(0.51, 0.55) + (uv_3 * dist_5));\\n  xlat_mutabledz.x = (xlat_mutabledz.x + (inten_4 * (\\n    (2.0 * dot (texture (sampler_main, (xlat_mutableuv3 + tmpvar_1)).xyz, vec3(0.32, 0.49, 0.29)))\\n   - \\n    (2.0 * dot (texture (sampler_main, (xlat_mutableuv3 - tmpvar_1)).xyz, vec3(0.32, 0.49, 0.29)))\\n  )));\\n  xlat_mutabledz.y = (xlat_mutabledz.y + (inten_4 * (\\n    (2.0 * dot (texture (sampler_main, (xlat_mutableuv3 + tmpvar_2)).xyz, vec3(0.32, 0.49, 0.29)))\\n   - \\n    (2.0 * dot (texture (sampler_main, (xlat_mutableuv3 - tmpvar_2)).xyz, vec3(0.32, 0.49, 0.29)))\\n  )));\\n  xlat_mutableret1 = max (xlat_mutableret1, (texture (sampler_main, xlat_mutableuv3).xyz * inten_4));\\n  dist_5 = (1.0 - fract((1.0 + tmpvar_9)));\\n  inten_4 = ((sqrt(dist_5) * (1.0 - dist_5)) * 4.0);\\n  uv_3 = (tmpvar_8 * aspect.yx);\\n  xlat_mutableuv3 = (vec2(0.49, 0.55) + (uv_3 * dist_5));\\n  xlat_mutabledz.x = (xlat_mutabledz.x + (inten_4 * (\\n    (2.0 * dot (texture (sampler_main, (xlat_mutableuv3 + tmpvar_1)).xyz, vec3(0.32, 0.49, 0.29)))\\n   - \\n    (2.0 * dot (texture (sampler_main, (xlat_mutableuv3 - tmpvar_1)).xyz, vec3(0.32, 0.49, 0.29)))\\n  )));\\n  xlat_mutabledz.y = (xlat_mutabledz.y + (inten_4 * (\\n    (2.0 * dot (texture (sampler_main, (xlat_mutableuv3 + tmpvar_2)).xyz, vec3(0.32, 0.49, 0.29)))\\n   - \\n    (2.0 * dot (texture (sampler_main, (xlat_mutableuv3 - tmpvar_2)).xyz, vec3(0.32, 0.49, 0.29)))\\n  )));\\n  xlat_mutableret1 = max (xlat_mutableret1, (texture (sampler_main, xlat_mutableuv3).xyz * inten_4));\\n  xlat_mutabledz = (xlat_mutabledz * (0.5 + rand_preset.z));\\n  vec2 tmpvar_10;\\n  tmpvar_10 = (2.0 * (rand_preset.xy - 0.5));\\n  uv1_6 = (4.0 * tmpvar_8);\\n  vec2 tmpvar_11;\\n  tmpvar_11 = sin(((uv1_6 + xlat_mutabledz) + tmpvar_10));\\n  vec2 tmpvar_12;\\n  tmpvar_12 = sin(((uv1_6 + \\n    (xlat_mutabledz * 1.4)\\n  ) + tmpvar_10));\\n  vec2 tmpvar_13;\\n  tmpvar_13 = sin(((uv1_6 + \\n    (xlat_mutabledz * 1.8)\\n  ) + tmpvar_10));\\n  vec3 tmpvar_14;\\n  tmpvar_14.x = inversesqrt(dot (tmpvar_11, tmpvar_11));\\n  tmpvar_14.y = inversesqrt(dot (tmpvar_12, tmpvar_12));\\n  tmpvar_14.z = inversesqrt(dot (tmpvar_13, tmpvar_13));\\n  ret_7 = (((\\n    (tmpvar_14 * ((vec3(0.01, 0.01, 0.01) * (1.0 + \\n      (rand_preset.xyz / 2.0)\\n    )) * (0.5 + rand_preset.y)))\\n   * \\n    ((((rand_preset.x - 0.5) * 4.0) * xlat_mutableret1) + (8.0 * (1.0 + rand_preset)).xyz)\\n  ) - (xlat_mutableret1.x * 0.5)) + ((xlat_mutableret1.y + xlat_mutableret1.z) / 3.0));\\n  ret_7 = (ret_7 - ((slow_roam_sin.wzy * roam_cos.zxy) * 0.4));\\n  ret_7 = (ret_7 * (1.0 + ret_7));\\n  vec4 tmpvar_15;\\n  tmpvar_15.w = 1.0;\\n  tmpvar_15.xyz = ret_7;\\n  ret = tmpvar_15.xyz;\\n }"}')},5539:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":4,"gammaadj":1,"decay":1,"echo_zoom":1,"echo_alpha":0.5,"additivewave":1,"modwavealphabyvolume":1,"wave_a":0.009,"wave_scale":2.713,"wave_smoothing":0,"modwavealphastart":1.2,"modwavealphaend":1.2,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.44,"wave_g":0.4,"ob_size":0.015,"ob_b":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":0.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":3,"additive":1,"num_inst":175,"rad":0.20065,"ang":0.75398,"tex_ang":3.14159,"tex_zoom":0.99979,"r":0,"g2":0,"border_r":0.01,"border_g":0,"border_a":1},"init_eqs_eel":"","frame_eqs_eel":"//lorenz-attractor calc\\nxx1 = if(equal(instance,0),q11,xx1);\\nyy1 = if(equal(instance,0),q12,yy1);\\nzz1 = if(equal(instance,0),q13,zz1);\\n\\ndx1 = q14*(yy1-xx1);\\ndy1 = xx1*(q15-zz1)-yy1;\\ndz1 = xx1*yy1-q16*zz1;\\ndd = sqrt(dx1*dx1+dy1*dy1+dz1*dz1);\\nxx1 = xx1 + q17*dx1/dd;\\nyy1 = yy1 + q17*dy1/dd;\\nzz1 = zz1 + q17*dz1/dd;\\n\\n\\n// 3D object model coordinates\\nmy_x = xx1*0.1;\\nmy_y = yy1*0.1;\\nmy_z = zz1*0.1 - 3;\\n\\n\\nd = 4.75; // camera distance\\nzoom = .55+0.25*sin(.5*q32);\\n\\n// solid angles\\nw1 = q3;\\nw2 = q4;\\nw3 = q5;\\n\\n// 3D rotation\\nx1 = cos(w1)*my_x + sin(w1)*my_y;\\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\\nz1 = my_z;\\n\\nx2 = cos(w2)*x1 + sin(w2)*z1;\\nz2 = -sin(w2)*x1 + cos(w2)*z1;\\ny2 = y1;\\n\\ny3 = cos(w3)*y2 + sin(w3)*z2;\\nz3 = -sin(w3)*y2 + cos(w3)*z2;\\nx3 = x2;\\n\\n// perspective calculation\\n\\nl = sqrt(x3*x3 + y3*y3);\\nw = atan2(x3,y3);\\np = tan(asin(1) + atan2(d+z3,l));\\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\\n\\nmy_x = zoom*sin(w)*p;\\nmy_y = zoom*cos(w)*p;\\n\\nx = 0.5 + my_x;\\ny = 0.5 + my_y;\\n\\nrad = rad/d;\\nang = ang-instance/num_inst*asin(1)*8;"},{"baseVals":{"sides":12,"additive":1,"num_inst":512,"y":0.55,"rad":0.0986,"tex_zoom":0.7874,"r":0.2,"g":0.03,"b":0.55,"g2":0,"border_a":0,"enabled":0},"init_eqs_eel":"started = 0;\\nt1 = 0.412; //seeds for pseudo random generator\\nt2 = 0.4563;\\nt3 = 0.6452;\\nt4 = 0.2565;","frame_eqs_eel":"rnd1 = if(equal(instance,0),t1,rnd1);\\nrnd2 = if(equal(instance,0),t2,rnd2);\\nrnd3 = if(equal(instance,0),t3,rnd3);\\nrnd4 = if(equal(instance,0),t4,rnd4);\\nrnd1 = 4*rnd1*(1-rnd1);\\nrnd2 = 4*rnd2*(1-rnd2);\\nrnd3 = 4*rnd3*(1-rnd3);\\nrnd4 = 4*rnd4*(1-rnd4);\\nt = .6;\\nt =  (rnd1+time*t) - int(rnd1+time*t);\\nt = t + rnd2*0.1;\\nwh = rnd4*asin(1)*4;\\nwv = 0.25 + rnd3*0.1;\\n\\nd = 6; // makes the perspective impact\\nzoom = 1;\\nl = 1;\\n\\n// Kardan angles\\n\\nw1 = q3; // first rotation: clockwise in the desktop pane\\nw2 = q4; // rotation around vertical axis\\nw3 = q5; // rotation around horizontal axis\\n\\n\\n// definition of the 3D shape\\n\\ni = instance;\\n\\nmy_x = t *(cos(wh)*sin(wv)*l)*2;\\nmy_z = -(-0.5 +(t-0.75)*(t-0.75))*cos(wv)*l*2;\\nmy_y = t*(sin(wh)*sin(wv)*l)*2;\\n\\n\\n\\n// 3D rotations\\n\\nx1 = cos(w1)*my_x + sin(w1)*my_y;\\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\\nz1 = my_z;\\n\\nx2 = cos(w2)*x1 + sin(w2)*z1;\\nz2 = -sin(w2)*x1 + cos(w2)*z1;\\ny2 = y1;\\n\\ny3 = cos(w3)*y2 + sin(w3)*z2;\\nz3 = -sin(w3)*y2 + cos(w3)*z2;\\nx3 = x2;\\n\\n// perspective calculation\\n\\np = tan(asin(1) + atan2(d+z3,sqrt(x3*x3 + y3*y3)));\\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\\n\\nrad = rad/d;\\nmy_x = zoom*sin(atan2(x3,y3))*p;\\nmy_y = zoom*cos(atan2(x3,y3))*p;\\n\\nx = 0.5 + my_x;\\ny = 0.5 + my_y;\\n\\nx = 0.5 + (x-0.5)/q2;\\ny = 0.5 + (y-0.5)/q1;"},{"baseVals":{"sides":12,"additive":1,"num_inst":512,"y":0.55,"rad":0.2667,"tex_zoom":0.7874,"r":0,"g":0.1,"b":0.55,"g2":0,"border_a":0,"enabled":0},"init_eqs_eel":"started = 0;\\nt1 = 0.412; //seeds for pseudo random generator\\nt2 = 0.4563;\\nt3 = 0.6452;\\nt4 = 0.2565;","frame_eqs_eel":"rnd1 = if(equal(instance,0),t1,rnd1);\\nrnd2 = if(equal(instance,0),t2,rnd2);\\nrnd3 = if(equal(instance,0),t3,rnd3);\\nrnd4 = if(equal(instance,0),t4,rnd4);\\nrnd1 = 4*rnd1*(1-rnd1);\\nrnd2 = 4*rnd2*(1-rnd2);\\nrnd3 = 4*rnd3*(1-rnd3);\\nrnd4 = 4*rnd4*(1-rnd4);\\nt = .6;\\nt =  (rnd1+time*t) - int(rnd1+time*t);\\nt = t + rnd2*0.1;\\nwh = rnd4*asin(1)*4;\\nwv = 0.25 + rnd3*0.1;\\n\\nd = 6; // makes the perspective impact\\nzoom = 1;\\nl = 1;\\n\\n// Kardan angles\\n\\nw1 = q3; // first rotation: clockwise in the desktop pane\\nw2 = q4; // rotation around vertical axis\\nw3 = q5; // rotation around horizontal axis\\n\\n\\n// definition of the 3D shape\\n\\ni = instance;\\n\\nmy_x = t *(cos(wh)*sin(wv)*l)*4;\\nmy_z = (-0.5 +(t-0.75)*(t-0.75))*cos(wv)*l*4;\\nmy_y = t*(sin(wh)*sin(wv)*l)*4;\\n\\n\\n// 3D rotations\\n\\nx1 = cos(w1)*my_x + sin(w1)*my_y;\\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\\nz1 = my_z;\\n\\nx2 = cos(w2)*x1 + sin(w2)*z1;\\nz2 = -sin(w2)*x1 + cos(w2)*z1;\\ny2 = y1;\\n\\ny3 = cos(w3)*y2 + sin(w3)*z2;\\nz3 = -sin(w3)*y2 + cos(w3)*z2;\\nx3 = x2;\\n\\n// perspective calculation\\n\\np = tan(asin(1) + atan2(d+z3,sqrt(x3*x3 + y3*y3)));\\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\\n\\nrad = rad/d;\\nmy_x = zoom*sin(atan2(x3,y3))*p;\\nmy_y = zoom*cos(atan2(x3,y3))*p;\\n\\nx = 0.5 + my_x;\\ny = 0.5 + my_y;\\n\\nx = 0.5 + (x-0.5)/q2;\\ny = 0.5 + (y-0.5)/q1;"},{"baseVals":{"sides":12,"additive":1,"num_inst":512,"y":0.55,"rad":0.05012,"tex_zoom":0.7874,"r":0,"g":0.02,"b":0.11,"g2":0,"border_a":0,"enabled":0},"init_eqs_eel":"started = 0;\\nt1 = 0.412; //seeds for pseudo random generator\\nt2 = 0.4563;\\nt3 = 0.6452;\\nt4 = 0.2565;","frame_eqs_eel":"rnd1 = if(equal(instance,0),t1,rnd1);\\nrnd2 = if(equal(instance,0),t2,rnd2);\\nrnd3 = if(equal(instance,0),t3,rnd3);\\nrnd4 = if(equal(instance,0),t4,rnd4);\\nrnd1 = 4*rnd1*(1-rnd1);\\nrnd2 = 4*rnd2*(1-rnd2);\\nrnd3 = 4*rnd3*(1-rnd3);\\nrnd4 = 4*rnd4*(1-rnd4);\\nt = .6;\\nt =  (rnd1+time*t) - int(rnd1+time*t);\\nt = t + rnd2*0.1;\\nwh = rnd4*asin(1)*4;\\nwv = 0.25 + rnd3*0.1;\\n\\nd = 1.4; // makes the perspective impact\\nzoom = 1;\\nl = 1;\\n\\n// Kardan angles\\n\\nw1 = q3; // first rotation: clockwise in the desktop pane\\nw2 = q4; // rotation around vertical axis\\nw3 = q5; // rotation around horizontal axis\\n\\n\\n// definition of the 3D shape\\n\\ni = instance;\\n\\nmy_x = t *(cos(wh)*sin(wv)*l);\\nmy_y = (-0.5 +(t-0.75)*(t-0.75))*cos(wv)*l;\\nmy_z = t*(sin(wh)*sin(wv)*l);\\n\\n\\n// 3D rotations\\n\\nx1 = cos(w1)*my_x + sin(w1)*my_y;\\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\\nz1 = my_z;\\n\\nx2 = cos(w2)*x1 + sin(w2)*z1;\\nz2 = -sin(w2)*x1 + cos(w2)*z1;\\ny2 = y1;\\n\\ny3 = cos(w3)*y2 + sin(w3)*z2;\\nz3 = -sin(w3)*y2 + cos(w3)*z2;\\nx3 = x2;\\n\\n// perspective calculation\\n\\np = tan(asin(1) + atan2(d+z3,sqrt(x3*x3 + y3*y3)));\\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\\n\\nrad = rad/d;\\nmy_x = zoom*sin(atan2(x3,y3))*p;\\nmy_y = zoom*cos(atan2(x3,y3))*p;\\n\\nx = 0.5 + my_x;\\ny = 0.5 + my_y;\\n\\nx = 0.5 + (x-0.5)/q2;\\ny = 0.5 + (y-0.5)/q1;"}],"waves":[{"baseVals":{"samples":495,"sep":4,"spectrum":1,"thick":1,"additive":1,"scaling":100,"smoothing":1,"a":0.21,"enabled":0},"init_eqs_eel":"t2 = 0;\\nt3 = 0;\\nt4 = 0;\\nab = 1;","frame_eqs_eel":"","point_eqs_eel":"// lorenz-attractor calc\\nxx1 = if(equal(sample,0),q11,xx1);\\nyy1 = if(equal(sample,0),q12,yy1);\\nzz1 = if(equal(sample,0),q13,zz1);\\ndx1 = q14*(yy1-xx1);\\ndy1 = xx1*(q15-zz1)-yy1;\\ndz1 = xx1*yy1-q16*zz1;\\nxx1 = xx1 + q17*dx1;\\nyy1 = yy1 + q17*dy1;\\nzz1 = zz1 + q17*dz1;\\n\\n// 3D model coordinates\\nmy_x = xx1*0.1;\\nmy_y = yy1*0.1;\\nmy_z = zz1*0.1 - 3;\\n\\n\\nd = 5; // distance of the camera (on the z-axis) to the origin\\nzoom = 0.4;\\n\\n// solid angles\\nw1 = q2;\\nw2 = q3;\\nw3 = q4;\\n\\n// rotations\\nx1 = cos(w1)*my_x + sin(w1)*my_y;\\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\\nz1 = my_z;\\n\\nx2 = cos(w2)*x1 + sin(w2)*z1;\\nz2 = -sin(w2)*x1 + cos(w2)*z1;\\ny2 = y1;\\n\\ny3 = cos(w3)*y2 + sin(w3)*z2;\\nz3 = -sin(w3)*y2 + cos(w3)*z2;\\nx3 = x2;\\n\\n// perspective calculation\\n\\nl = sqrt(x3*x3 + y3*y3);\\nw = atan2(x3,y3);\\np = tan(asin(1) + atan2(d+z3,l));\\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\\n\\nmy_x = zoom*sin(w)*p;\\nmy_y = zoom*cos(w)*p;\\n\\nx = 0.5 + my_x;\\ny = 0.5 + my_y;"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"xx1 = if(equal(sample,0),q11,xx1);\\nyy1 = if(equal(sample,0),q12,yy1);\\nzz1 = if(equal(sample,0),q13,zz1);\\n\\ndx1 = q14*(yy1-xx1);\\ndy1 = xx1*(q15-zz1)-yy1;\\ndz1 = xx1*yy1-q16*zz1;\\nxx1 = xx1 + q17*dx1;\\nyy1 = yy1 + q17*dy1;\\nzz1 = zz1 + q17*dz1;\\n\\nmy_x = xx1*0.02;\\nmy_y = yy1*0.02;\\nmy_z = zz1*0.02;\\n\\nx = 0.5 + my_x;\\ny = 0.5 + my_y;"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"step = 0;","frame_eqs_eel":"dec_med = pow (0.9, 30/fps);\\ndec_slow = pow (0.96, 30/fps);\\ndec_fast = pow (0.6, 30/fps);\\nbeat = max (max (bass, mid), treb); \\navg = avg*dec_slow + beat*(1-dec_slow);\\nis_beat = above(beat, 0+avg+peak) * above (time, t0+.1);\\nt0 = is_beat*time + (1-is_beat)*t0;\\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\\nindex = (index + is_beat) %16;\\nindex2 = (index2 + is_beat*bnot(index))%8;\\n\\nq20 = avg;\\nq21 = beat;\\nq22 = peak;\\nq24 = is_beat;\\nvol = bass_att + mid_att + treb_att;\\nvol_ = dec_med * vol_ + (1-dec_med)* vol;\\nvol__ = dec_med * vol__ + (1-dec_med)* vol_;\\nq27 = index + 1;\\nq28 = index2 + 1;\\nq23 = q22 -0.1/q22;\\nq23 = max(q23,1);\\n\\nk1 =  is_beat*equal(index%8,0);\\np1 =  k1*(p1+1) + (1-k1)*p1;\\np2 = dec_fast * p2+ (1-dec_fast)*p1;\\nrott = p2 * 3.1416/4;\\n\\nq1 = cos(rott);\\nq2 = sin(rott);\\nq3 = -q2;\\nq4 = q1;\\n\\ntrig = q24 * bnot(index%2);\\nvx = vx*bnot(trig) + trig* (int(rand(100))/100-.5);\\nvy = vy*bnot(trig) + trig* (int(rand(100))/100-.5);\\nq10 = 0.2+vy*vy*2;\\nq11 = sin(time/9)/2+.4;\\nmovz = movz-1/fps*(.3+vx);\\nq9 = movz;\\n\\nq12 = min(q22,6)*2;\\nq13 = min(2,1+abs(8*vy*vx));\\n//dir_ = dec_med*dir_ + (1-dec_med)*(index2%2-.5);\\ndir_ =  bass-1;\\n\\ntrig = bnot(index%4) * q24;\\ndir = bnot(trig)*dir + trig*(int(rand(10))-5);\\n\\ntrel = trel + .1/fps*dir;\\ntrel_ = dec_med*trel_ + (1-dec_med)*trel;\\n\\nq5 = cos(trel_);\\nq6 = sin(trel_+0*q27*(q28%2));\\nq7 = -q6;\\nq8 = q5;\\n\\nzoom = 1.02;\\nrot = .5*sin(bnot(q28%2)*q28) ;\\nrot = .0*sin(time/3);\\ndx = .0;\\n\\nmonitor = q11;","pixel_eqs_eel":"","warp":" shader_body { \\n  vec2 tmpvar_1;\\n  tmpvar_1 = ((uv * texsize.xy) * 0.08);\\n  vec3 tmpvar_2;\\n  tmpvar_2 = (texture (sampler_main, (uv - (\\n    ((sin(tmpvar_1) / cos(tmpvar_1)) * texsize.zw)\\n   * 3.0))).xyz + (vec3(dot (texture (sampler_noise_lq, \\n    ((((texsize.xy * texsize_noise_lq.zw).x * uv) * 0.02) + (0.1 * rand_frame).xy)\\n  ), vec4(0.32, 0.49, 0.29, 0.0))) / 30.0));\\n  vec4 tmpvar_3;\\n  tmpvar_3.w = 1.0;\\n  tmpvar_3.xyz = ((mix (tmpvar_2, \\n    (1.0 - tmpvar_2.zyx)\\n  , vec3(0.01, 0.01, 0.01)) - 0.03) - (0.2 * pow (\\n    (1.0 - rad)\\n  , 18.0)));\\n  ret = tmpvar_3.xyz;\\n }","comp":"vec3 xlat_mutableneu;\\nvec2 xlat_mutablers0;\\nvec2 xlat_mutablerss;\\nvec2 xlat_mutableuv2;\\n shader_body { \\n  vec2 uv_1;\\n  vec2 ofs_2;\\n  vec3 ret1_3;\\n  uv_1 = ((uv - 0.5) * aspect.xy);\\n  vec2 tmpvar_4;\\n  tmpvar_4.x = q5;\\n  tmpvar_4.y = q6;\\n  uv_1 = (uv_1 + (tmpvar_4 / 4.0));\\n  mat2 tmpvar_5;\\n  tmpvar_5[uint(0)] = _qb.xy;\\n  tmpvar_5[1u] = _qb.zw;\\n  uv_1 = (uv_1 * tmpvar_5);\\n  float tmpvar_6;\\n  float tmpvar_7;\\n  tmpvar_7 = (min (abs(\\n    (uv_1.y / uv_1.x)\\n  ), 1.0) / max (abs(\\n    (uv_1.y / uv_1.x)\\n  ), 1.0));\\n  float tmpvar_8;\\n  tmpvar_8 = (tmpvar_7 * tmpvar_7);\\n  tmpvar_8 = (((\\n    ((((\\n      ((((-0.01213232 * tmpvar_8) + 0.05368138) * tmpvar_8) - 0.1173503)\\n     * tmpvar_8) + 0.1938925) * tmpvar_8) - 0.3326756)\\n   * tmpvar_8) + 0.9999793) * tmpvar_7);\\n  tmpvar_8 = (tmpvar_8 + (float(\\n    (abs((uv_1.y / uv_1.x)) > 1.0)\\n  ) * (\\n    (tmpvar_8 * -2.0)\\n   + 1.570796)));\\n  tmpvar_6 = (tmpvar_8 * sign((uv_1.y / uv_1.x)));\\n  if ((abs(uv_1.x) > (1e-08 * abs(uv_1.y)))) {\\n    if ((uv_1.x < 0.0)) {\\n      if ((uv_1.y >= 0.0)) {\\n        tmpvar_6 += 3.141593;\\n      } else {\\n        tmpvar_6 = (tmpvar_6 - 3.141593);\\n      };\\n    };\\n  } else {\\n    tmpvar_6 = (sign(uv_1.y) * 1.570796);\\n  };\\n  xlat_mutablers0.x = (((tmpvar_6 / 3.1416) * 6.0) * q28);\\n  xlat_mutablers0.y = inversesqrt(dot (uv_1, uv_1));\\n  vec2 tmpvar_9;\\n  tmpvar_9.x = (xlat_mutablers0.x + (q9 * 8.0));\\n  tmpvar_9.y = (xlat_mutablers0.y + ((q9 * q28) * 4.0));\\n  xlat_mutablerss = (tmpvar_9 / 12.0);\\n  vec2 tmpvar_10;\\n  tmpvar_10.x = q5;\\n  tmpvar_10.y = q6;\\n  ofs_2 = (0.1 * tmpvar_10.yx);\\n  float tmpvar_11;\\n  float tmpvar_12;\\n  tmpvar_12 = -(q9);\\n  tmpvar_11 = fract(tmpvar_12);\\n  mat2 tmpvar_13;\\n  tmpvar_13[uint(0)].x = 1.0;\\n  tmpvar_13[uint(0)].y = -0.0;\\n  tmpvar_13[1u].x = 0.0;\\n  tmpvar_13[1u].y = 1.0;\\n  xlat_mutableuv2 = ((uv_1 * (\\n    (q13 * tmpvar_11)\\n   * tmpvar_13)) * aspect.yx);\\n  vec2 tmpvar_14;\\n  tmpvar_14 = fract(((xlat_mutableuv2 + 0.5) + ofs_2));\\n  xlat_mutableneu = (texture (sampler_main, tmpvar_14).xyz + ((texture (sampler_blur1, tmpvar_14).xyz * scale1) + bias1));\\n  ret1_3 = max (vec3(0.0, 0.0, 0.0), ((xlat_mutableneu * \\n    (1.0 - (tmpvar_11 * tmpvar_11))\\n  ) * 2.0));\\n  float tmpvar_15;\\n  tmpvar_15 = fract((tmpvar_12 + 0.3333333));\\n  mat2 tmpvar_16;\\n  tmpvar_16[uint(0)].x = -0.4990803;\\n  tmpvar_16[uint(0)].y = -0.8665558;\\n  tmpvar_16[1u].x = 0.8665558;\\n  tmpvar_16[1u].y = -0.4990803;\\n  xlat_mutableuv2 = ((uv_1 * (\\n    (q13 * tmpvar_15)\\n   * tmpvar_16)) * aspect.yx);\\n  vec2 tmpvar_17;\\n  tmpvar_17 = fract(((xlat_mutableuv2 + 0.5) + ofs_2));\\n  xlat_mutableneu = (texture (sampler_main, tmpvar_17).xyz + ((texture (sampler_blur1, tmpvar_17).xyz * scale1) + bias1));\\n  ret1_3 = max (ret1_3, ((xlat_mutableneu * \\n    (1.0 - (tmpvar_15 * tmpvar_15))\\n  ) * 2.0));\\n  float tmpvar_18;\\n  tmpvar_18 = fract((tmpvar_12 + 0.6666667));\\n  mat2 tmpvar_19;\\n  tmpvar_19[uint(0)].x = -0.5018377;\\n  tmpvar_19[uint(0)].y = 0.8649619;\\n  tmpvar_19[1u].x = -0.8649619;\\n  tmpvar_19[1u].y = -0.5018377;\\n  xlat_mutableuv2 = ((uv_1 * (\\n    (q13 * tmpvar_18)\\n   * tmpvar_19)) * aspect.yx);\\n  vec2 tmpvar_20;\\n  tmpvar_20 = fract(((xlat_mutableuv2 + 0.5) + ofs_2));\\n  xlat_mutableneu = (texture (sampler_main, tmpvar_20).xyz + ((texture (sampler_blur1, tmpvar_20).xyz * scale1) + bias1));\\n  ret1_3 = max (ret1_3, ((xlat_mutableneu * \\n    (1.0 - (tmpvar_18 * tmpvar_18))\\n  ) * 2.0));\\n  float tmpvar_21;\\n  tmpvar_21 = fract((tmpvar_12 + 1.0));\\n  mat2 tmpvar_22;\\n  tmpvar_22[uint(0)].x = 0.9999949;\\n  tmpvar_22[uint(0)].y = 0.003185092;\\n  tmpvar_22[1u].x = -0.003185092;\\n  tmpvar_22[1u].y = 0.9999949;\\n  xlat_mutableuv2 = ((uv_1 * (\\n    (q13 * tmpvar_21)\\n   * tmpvar_22)) * aspect.yx);\\n  vec2 tmpvar_23;\\n  tmpvar_23 = fract(((xlat_mutableuv2 + 0.5) + ofs_2));\\n  xlat_mutableneu = (texture (sampler_main, tmpvar_23).xyz + ((texture (sampler_blur1, tmpvar_23).xyz * scale1) + bias1));\\n  ret1_3 = max (ret1_3, ((xlat_mutableneu * \\n    (1.0 - (tmpvar_21 * tmpvar_21))\\n  ) * 2.0));\\n  vec2 tmpvar_24;\\n  tmpvar_24.x = (ret1_3.x + ret1_3.z);\\n  tmpvar_24.y = (ret1_3.x - ret1_3.y);\\n  vec4 tmpvar_25;\\n  tmpvar_25.w = 1.0;\\n  tmpvar_25.xyz = ((ret1_3 + (\\n    ((bass_att * 0.004) / sqrt(dot (uv_1, uv_1)))\\n   * roam_sin).xyz) + ((2.0 * \\n    (bass_att * ((texture (sampler_blur1, fract(\\n      (xlat_mutablerss + (tmpvar_24 / 2.0))\\n    )).xyz * scale1) + bias1).zxy)\\n  ) * clamp (\\n    (1.0 - (ret1_3 * 4.0))\\n  , 0.0, 1.0)));\\n  ret = tmpvar_25.xyz;\\n }"}')},7554:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":4,"gammaadj":1,"wave_thick":1,"wrap":0,"wave_a":0.004,"wave_scale":9.731,"wave_smoothing":0,"wave_mystery":1,"modwavealphastart":1,"modwavealphaend":1,"warpanimspeed":0.442,"warpscale":7.315,"zoomexp":1.50374,"warp":0.08563,"wave_y":0.04,"ob_size":0,"ob_g":1,"ob_a":1,"ib_size":0,"ib_r":1,"ib_g":0,"ib_b":0.75,"ib_a":1,"mv_x":64,"mv_y":48,"mv_l":0,"mv_b":0,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"sides":41,"additive":1,"num_inst":50,"rad":0.01,"ang":3.20442,"tex_zoom":6.23873,"g":1,"b":1,"a":0,"r2":1,"b2":1,"border_a":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"index = instance*q32;\\n\\nx = gmegabuf(index);\\ny = gmegabuf(index+1);\\n\\nang = gmegabuf(index+9);\\nrad = gmegabuf(index+4)*2;\\n\\nr = gmegabuf(index+5);\\ng = gmegabuf(index+6);\\nb = gmegabuf(index+7);\\n\\nr2 = r; g2 = g; b2 = b;\\n\\n\\nx = 0.5 + (x-0.5)/q2;"},{"baseVals":{"sides":23,"additive":1,"num_inst":50,"x":0.74,"y":0.27,"rad":0.01,"tex_zoom":0.81948,"g":1,"b":1,"g2":0,"border_a":0,"enabled":0},"init_eqs_eel":"vx = 0","frame_eqs_eel":"sample = instance/(num_inst-1);\\n\\nx1 = 0.5;\\ny1 = 0.5 + (q3-0.5)*0.01;\\ny2 = 0.5;\\nx = x1 + (sample-0.5)*0.2;\\ny = y2*sample + y1*(1-sample);"},{"baseVals":{"sides":100,"additive":1,"rad":0.0999,"tex_zoom":0.73458,"r":0,"g":1,"a":0,"border_a":1,"enabled":0},"init_eqs_eel":"vx = 0","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":3,"additive":1,"num_inst":400,"rad":0.16283,"tex_zoom":0.73458,"g":1,"b":1,"a":0.5,"g2":0,"border_a":0},"init_eqs_eel":"i3 = 0;\\ni4 = 0;","frame_eqs_eel":"i3 = if(equal(instance,0),0,i3);\\ni4 = if(equal(instance,0),0,i4);\\nppo = 8;\\nindex = i4*q32;\\nsample = i3 % ppo;\\n\\nsize = gmegabuf(index+4)*40;\\n\\nx = gmegabuf(index);\\ny = gmegabuf(index+1);\\n\\nang = gmegabuf(index+9);\\nrad = size*0.05;\\n\\nr = gmegabuf(index+5);\\ng = gmegabuf(index+6);\\nb = gmegabuf(index+7);\\n\\n\\nsample = sample/ppo;\\nbending = gmegabuf(index + 12)*5 + gmegabuf(index + 10)*5;\\ndir = -ang + (sample-0.4)*bending;\\n\\n ang =  asin(1)*1.5 - dir + bending*0.05;\\n\\nx = x + ((sample-0.3)*0.06*cos(dir)*size + sin(dir)*size*bending*0.01);\\ny = y + ((sample-0.3)*0.06*sin(dir)*size - cos(dir)*size*bending*0.01);\\n\\nx = 0.5 + (x-0.5)/q2;\\n\\nrad = rad*1.5 - sample*0.05*size;\\n\\ni3 = i3 + 1;\\ni4 = if( equal(i3%ppo,0), i4 +1, i4);"}],"waves":[{"baseVals":{"samples":452,"additive":1,"scaling":2.44415,"smoothing":0,"a":0.15,"enabled":0},"init_eqs_eel":"t2 = 0;\\nt3 = 0;\\nt4 = 0;\\ncl = 0;","frame_eqs_eel":"t1 = 0;\\nt2 = 0;","point_eqs_eel":"ppo = 9;\\nindex = t2*q32;\\nsample = t1 % ppo;\\n\\nnindex = gmegabuf(index + q30); // the next neighbor\'s index\\nnnindex = gmegabuf(index + q30+1); // the next neighbor\'s index\\nnnnindex = gmegabuf(index + q30+2); // the next neighbor\'s index\\n\\nx = gmegabuf(index);\\ny = gmegabuf(index+1);\\nr = 0.5 + gmegabuf(index+5)*0.5;\\ng = 0.5 + gmegabuf(index+6)*0.5;\\nb = 0.5 + gmegabuf(index+7)*0.5;\\n\\nnx = gmegabuf(nindex);\\nny = gmegabuf(nindex+1);\\nnnx = gmegabuf(nnindex);\\nnny = gmegabuf(nnindex+1);\\nnnnx = gmegabuf(nnnindex);\\nnnny = gmegabuf(nnnindex+1);\\n\\nx = 0.5 + (x-0.5)/q2;\\ny = 0.5 + (y-0.5)/q2;\\nnx = 0.5 + (nx-0.5)/q2;\\nny = 0.5 + (ny-0.5)/q2;\\nnnx = 0.5 + (nnx-0.5)/q2;\\nnny = 0.5 + (nny-0.5)/q2;\\nnnnx = 0.5 + (nnnx-0.5)/q2;\\nnnny = 0.5 + (nnny-0.5)/q2;\\n\\nx = if( equal(sample,2), nx, x);\\ny = if( equal(sample,2), ny, y);\\nx = if( equal(sample,4), nnx, x);\\ny = if( equal(sample,4), nny, y);\\nx = if( equal(sample,6), nnnx, x);\\ny = if( equal(sample,6), nnny, y);\\n\\na = above(sample,1)*below(sample,ppo-1)*a;\\n\\nt1 = t1 + 1;\\nt2 = if( equal(t1%ppo,0), t2 +1, t2);"},{"baseVals":{"enabled":1,"samples":65,"spectrum":1,"usedots":1,"thick":1,"additive":1,"scaling":0.33408,"smoothing":0,"a":0},"init_eqs_eel":"t2 = 0;\\nt3 = 0;\\nt4 = 0;\\ncl = 0;","frame_eqs_eel":"t8 = 1;\\n\\nt1 = 0.5;\\nt2 = 0.9;","point_eqs_eel":"d = 0;//d*0.85 + (value1)*1;\\n\\ny = 0.2 + value1+value2;\\nx = 0.9 - sample*0.8;\\n\\ngmegabuf((sample*64-1)*q32 + 14) = value1 + value2;"},{"baseVals":{"samples":280,"additive":1,"scaling":5.92556,"smoothing":0,"a":0.5,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"t1 = 0;\\nt2 = 0;\\n\\n","point_eqs_eel":"// q32 number of attributes\\n// q31 number of objects\\n\\nppo = 7; // number of points used for each object\\nindex = t2*q32; // object\'s index\\n\\nx = 0.5 +(gmegabuf(index)-0.5)/q2;\\ny = 0.5 + (gmegabuf(index+1)-0.5)/q2;\\n\\n// collecting pairs of index and distance to the current object in a local buffer\\ni = 0;\\nj = 0;\\nloop(q31,\\n     d = sqrt( sqr(gmegabuf(index)-gmegabuf(i)) + sqr(gmegabuf(index+1)-gmegabuf(i+1)));\\n     d = if( equal(d,0), 1, d);\\n     megabuf(j)   = i; // store index/distance pairs\\n     megabuf(j+1) = d;\\n     j = j+2;\\n     i = i+q32;\\n    );\\n\\n// sort that buffer, but only 5 cycles for the 5 nearest objects\\ni = 0;\\nloop( 5,\\n      j = i;\\n      smallestfind = 100;\\n      findindex = 0;\\n      loop( q31-j,\\n            distance =megabuf(j*2+1);\\n            smaller = above( smallestfind, distance);\\n            smallestfind = if(smaller, distance, smallestfind);\\n            findindex = if( smaller, j*2, findindex);\\n            j = j + 1;\\n          );\\n\\n      // now that the nearest object was found, swap it to the buffer\'s top\\n\\n      j = megabuf(i);\\n      d = megabuf(i+1);\\n\\n      megabuf(i)   = megabuf(findindex);\\n      megabuf(i+1) = megabuf(findindex+1);\\n      megabuf(findindex)   = j;\\n      megabuf(findindex+1) = d;\\n\\n      i = i+1;\\n    );\\n\\n\\nindex2 = (t1)%ppo;\\ni = megabuf(index2-2);\\nxx = 0.5 + (gmegabuf(i)-0.5)/q2;\\nyy = 0.5 + (gmegabuf(i+1)-0.5)/q2;\\nw = asin(1)*index2/4;\\n//xx = x + sin(w)*0.1;\\n//yy = y + cos(w)*0.1;\\nx = if( equal(index2%2,0), x, xx);\\ny = if( equal(index2%2,0), y, yy);\\n\\n\\na = below(index2,ppo-1)*above(index2,1)*a;\\nr = 0.5 + gmegabuf(index + 5)*0.5;\\ng = 0.5 + gmegabuf(index + 6)*0.5;\\nb = 0.5 + gmegabuf(index + 7)*0.5;\\n\\n\\nt2 = t2 + equal(t1%ppo,ppo-1);\\nt1 = t1 + 1;\\n\\n//a = above(t1,128);"},{"baseVals":{"samples":15,"thick":1,"additive":1,"scaling":5.92556,"smoothing":0,"a":0.4,"enabled":0},"init_eqs_eel":"t2 = 0","frame_eqs_eel":"t1 = 0;\\nt2 = 0;\\nt3 = 0;\\nt4 = 0.5;","point_eqs_eel":"ppo = 5;\\n\\nindex = t2*q32;\\nneighbor = 1;\\nneighbor = gmegabuf(index+10+neighbor);\\nx = 0.5 + (gmegabuf(index)-0.5)/q2;\\ny = 0.5 + (gmegabuf(index+1)-0.5)/q2;\\nxx = 0.5 + ( gmegabuf(neighbor) - 0.5)/q2;\\nyy = 0.5 + ( gmegabuf(neighbor+1) - 0.5)/q2;\\n\\nx = if( equal(t1 % 2, 0), x, xx);\\ny = if( equal(t1 % 2, 0), y, yx);\\n\\n\\nt2 = t2 + equal(t1,ppo);\\nt1 = if(above(t1,ppo),t1-ppo,t1) + 1;\\n"}],"init_eqs_eel":"// clear buffer\\ni = 0; loop(1024*1024, gmegabuf(i) = 0; i = i+1;);\\n\\ncount = 50;\\nattributes = 32;\\nnListStart = 24; // starting index of neighbor list\\n\\nminradius = 0.004;\\nmaxradius = 0.04;\\nv = 0.0;\\n\\n// randomize initial coordinates\\nindex = 0;\\nloop(count,\\n     gmegabuf(index*attributes) = rand(1000)/1000;\\n     gmegabuf(index*attributes+1) = rand(1000)/1000;\\n     gmegabuf(index*attributes+2) = v*(rand(1000)/1000-0.5);\\n     gmegabuf(index*attributes+3) = v*(rand(1000)/1000-0.5);\\n     gmegabuf(index*attributes+4) = minradius + (maxradius-minradius)*(index+1)/count;\\n     gmegabuf(index*attributes+5) = 0;\\n     gmegabuf(index*attributes+6) = 1;\\n     gmegabuf(index*attributes+7) = 1;\\n     gmegabuf(index*attributes+8) = pow(gmegabuf(index*attributes+4),3) ;\\n     gmegabuf(index*attributes+9) = 4*asin(1)*rand(1000)/1000;\\n     gmegabuf(index*attributes+10) = 0;\\n     gmegabuf(index*attributes+13) = index/(count-1);\\n     gmegabuf(index*attributes+14) = 0;\\n     index = index+1;\\n    );\\n\\nq30 = nListStart;\\nq31 = count;\\nq32 = attributes;\\n\\n// 0, x\\n// 1, y\\n// 2, vx\\n// 3, vy\\n// 4, radius\\n// 5, red\\n// 6, green\\n// 7, blue\\n// 8, mass\\n// 9, angle\\n// 10, rotation\\n// 11, bend force\\n// 12, bending\\n// 13, sample\\n// 14, spectrum","frame_eqs_eel":"dt = 1/fps;\\n\\nwarp = 0;\\nzoom = 1;\\nwave_a = 0;\\n\\ngravity = 0.0015*dt*0;\\ndampening = 0;\\nfriction = 2048*dt;\\nshock = 0.002;\\npi2 = asin(1);\\n\\nnn = 3; // number of nearest neighbors to search, reduce if not needed\\n        // provide enough attributes, otherwise the next object\'s coordinate will be overwritten\\n        // collision detection is based on nearest neighbors, so keep it at least at 1.\\n\\ncheck = 2; // how many neighbors will be checked for a possible collision. may not be above nn.\\n           // raise to avoid odd behavior in clusters of touching objects.\\n\\nbouncefactor = 0.1;\\nrotatefactor = 0; // relation between angular and translative momentum, when object hits a border. this is an empirical value for a convincing impression\\n\\n\\n\\nh = (aspecty-1)*0.5; w = (aspectx-1)*0.5;\\nindex = 0; index2 = 0;\\nloop(count,\\n\\n     random = rand(1000)/1000;\\n     sample = gmegabuf(index+13);\\n\\n     // bend force\\n     gmegabuf(index + 11) = gmegabuf(index + 11)*0.92 - 4*gmegabuf(index+12)*dt + 2*(random-0.5)*dt*gmegabuf(index+14);\\n\\n     // bend\\n     gmegabuf(index + 12) += 60*gmegabuf(index + 11)*dt;\\n\\n     v = sqrt( sqr( gmegabuf(index + 2) ) + sqr( gmegabuf(index + 3) ) );\\n\\n     // apply friction\\n     fric = max(0,1 - sqr(v*friction) - v*2);\\n     gmegabuf(index + 2) *= fric;\\n     gmegabuf(index + 3) *= fric;\\n\\n     // apply direction change\\n     gmegabuf(index + 10) = gmegabuf(index + 10)*fric +  v*gmegabuf(index +12)*0;\\n\\n     // apply acceleration force\\n     acceleration = random*0.000 + abs(gmegabuf(index+11))*0.003;\\n     direction = gmegabuf(index + 9) - pi2;\\n     gmegabuf(index + 2) += sin(direction)*acceleration;\\n     gmegabuf(index + 3) += cos(direction)*acceleration;\\n\\n     // adding velocity vectors\\n     gmegabuf(index) = gmegabuf(index) + gmegabuf(index+2)*60*dt;\\n     gmegabuf(index+1) = gmegabuf(index+1) + gmegabuf(index+3)*60*dt;\\n     gmegabuf(index+9) = gmegabuf(index+9) + gmegabuf(index+10)*0.5;\\n\\n     // applying gravity\\n     gmegabuf(index+3) = gmegabuf(index+3) - gravity;\\n\\n     vr = sin(gmegabuf(index+10))*gmegabuf(index+4); // rotation speed at the surface\\n\\n     // bounce off ceiling\\n     bounce = above( gmegabuf(index+1), 1 - gmegabuf(index+4) + w);\\n     gmegabuf(index+2) = if( bounce, gmegabuf(index+2) + (vr+gmegabuf(index+2))*rotatefactor, gmegabuf(index+2));\\n     gmegabuf(index+3) = if( bounce, -abs(gmegabuf(index+3))*dampening - shock, gmegabuf(index+3));\\n     vr = if( bounce, vr - (gmegabuf(index+2) + vr)*(1-rotatefactor), vr);\\n\\n     // bounce off floor\\n     bounce = below( gmegabuf(index+1), gmegabuf(index+4) - w);\\n     gmegabuf(index+2) = if( bounce, gmegabuf(index+2) + (vr-gmegabuf(index+2))*rotatefactor, gmegabuf(index+2));\\n     gmegabuf(index+3) = if( bounce, abs(gmegabuf(index+3))*dampening + shock, gmegabuf(index+3));\\n     vr = if( bounce, vr + (gmegabuf(index+2) - vr)*(1-rotatefactor), vr);\\n\\n     // bounce off right border\\n     bounce = above( gmegabuf(index), 1 - gmegabuf(index+4) + h);\\n     gmegabuf(index+2) = if( bounce, -abs(gmegabuf(index+2))*dampening - shock, gmegabuf(index+2));\\n     gmegabuf(index+3) = if( bounce, gmegabuf(index+3) + (vr-gmegabuf(index+3))*rotatefactor, gmegabuf(index+3));\\n     vr = if( bounce, vr + (gmegabuf(index+3) - vr)*(1-rotatefactor), vr);\\n\\n     // bounce off left border\\n     bounce = below( gmegabuf(index), gmegabuf(index+4) - h);\\n     gmegabuf(index+2) = if( bounce, abs(gmegabuf(index+2))*dampening + shock, gmegabuf(index+2));\\n     gmegabuf(index+3) = if( bounce, gmegabuf(index+3) - (vr+gmegabuf(index+3))*rotatefactor, gmegabuf(index+3));\\n     vr = if( bounce, vr - (gmegabuf(index+3) + vr)*(1-rotatefactor), vr);\\n\\n     gmegabuf(index+10) = asin(vr/gmegabuf(index+4));\\n\\n     i = 0; j = 0; // collecting pairs of index and distance to the current object in a local buffer\\n     loop( count,\\n           d = sqrt( sqr(gmegabuf(index)-gmegabuf(i)) + sqr(gmegabuf(index+1)-gmegabuf(i+1)));\\n           d = if( equal(d,0), 10, d); // leave out comparison with itself (where d == 0, set d to a high value)\\n           d = d - (gmegabuf(index+4)+gmegabuf(i+4))*0.5; // subtract radius (surface to surface distance)\\n           megabuf(j)   = i; // store index/distance pairs\\n           megabuf(j+1) = d;\\n           j = j+2;\\n           i = i+attributes; );\\n     i = 0; // sort that buffer, but only as many cycles as needed for the _nn_ nearest neighbors\\n     loop( nn,\\n           j = i; smallestfind = 10; findindex = -1;\\n           loop( count-j,\\n                 distance =megabuf(j*2+1);\\n                 smaller = above( smallestfind, distance);\\n                 smallestfind = if(smaller, distance, smallestfind);\\n                 findindex = if( smaller, j*2, findindex);\\n                 j = j + 1; );\\n           j = megabuf(i*2); d = megabuf(i*2+1);\\n           megabuf(i*2)   = megabuf(findindex);\\n           megabuf(i*2+1) = megabuf(findindex+1);\\n           megabuf(findindex)   = j;\\n           megabuf(findindex+1) = d;\\n           i = i+1;\\n         );\\n     i = 0; // storing the indexes of the nearest neighbors in the list\\n     loop( nn,\\n           gmegabuf(index + nListStart + i) = megabuf(i*2);\\n           i = i +1;\\n         );\\n     i = 0; // collision detection and impulse transmission below\\n     loop( check,\\n           index2 = megabuf(i);\\n           hit = below( sqrt( sqr( gmegabuf(index) - gmegabuf(index2)) +\\n                              sqr( gmegabuf(index+1) - gmegabuf(index2+1))),\\n                        gmegabuf(index + 4) + gmegabuf(index2 + 4)\\n                      )\\n                 *\\n                 above( sqrt( sqr( gmegabuf(index)   - gmegabuf(index2))+\\n                        sqr( gmegabuf(index+1) - gmegabuf(index2+1))),\\n                        sqrt( sqr( gmegabuf(index+0) - gmegabuf(index2+0)+\\n                                   gmegabuf(index+2) - gmegabuf(index2+2))+\\n                              sqr( gmegabuf(index+1) - gmegabuf(index2+1)+\\n                                   gmegabuf(index+3) - gmegabuf(index2+3)) ) );\\n           ref_ang = atan2( gmegabuf(index2)-gmegabuf(index), // calculating the angle of the common tangent\\n                            gmegabuf(index2 + 1)-gmegabuf(index + 1)) + pi2;\\n           v1 = sqrt(sqr( gmegabuf(index + 2)) + sqr( gmegabuf(index + 3))); // velocity of object1\\n           v2 = sqrt(sqr( gmegabuf(index2 + 2)) + sqr( gmegabuf(index2 + 3)));  // velocity of object2\\n           w1 = atan2( gmegabuf(index + 2), gmegabuf(index + 3));   // object1 motion angle\\n           w2 = atan2( gmegabuf(index2 + 2), gmegabuf(index2 + 3)); // object2 motion angle\\n           vr2 = sin(gmegabuf(index2 + 10))*gmegabuf(index2+4); // the other object\'s surface velocity\\n           m1 = gmegabuf(index + 8); m2 = gmegabuf(index2 + 8);\\n           vv1 = ((m1-m2)*v1 + 2*m2*v2)/(m1+m2); vv2 = ((m2-m1)*v2 + 2*m1*v1)/(m1+m2);\\n           vrr = ((m1-m2)*vr + 2*m2*vr2)/(m1+m2); vrr2 = ((m2-m1)*vr2 + 2*m1*vr)/(m1+m2);\\n\\n           gmegabuf( index + 2) = if( hit, sin(ref_ang)*v1*cos(w1-ref_ang) + ((vr-vr2)-sin(ref_ang)*v1*cos(w1-ref_ang))*0.1\\n                                         + cos(ref_ang)*vv1*sin(w2-ref_ang),\\n                                                  gmegabuf( index + 2) );\\n\\n           gmegabuf( index + 3) = if( hit, cos(ref_ang)*v1*cos(w1-ref_ang) + ((vr-vr2)-cos(ref_ang)*v1*cos(w1-ref_ang))*0.1\\n                                         - sin(ref_ang)*vv1*sin(w2-ref_ang),\\n                                                 gmegabuf( index + 3) );\\n\\n           gmegabuf( index2 + 2) = if( hit, sin(ref_ang)*v2*cos(w2-ref_ang) + ((vr2-vr)-sin(ref_ang)*v2*cos(w2-ref_ang))*0.1\\n                                          + cos(ref_ang)*vv2*sin(w1-ref_ang),\\n                                                  gmegabuf( index2 + 2) );\\n\\n           gmegabuf( index2 + 3) = if( hit, cos(ref_ang)*v2*cos(w2-ref_ang) + ((vr2-vr)-cos(ref_ang)*v2*cos(w2-ref_ang))*0.1\\n                                          - sin(ref_ang)*vv2*sin(w1-ref_ang),\\n                                                  gmegabuf( index2 + 3) );\\n\\n           vr = if( hit, vr + (cos(w1-ref_ang)*(v1-v2)-vr) , vr);\\n           gmegabuf( index + 10) = asin( vr / gmegabuf(index+4) );\\n\\n           vr2 = if( hit, vr2 + (cos(w2-ref_ang)*(v2-v1)-vr2) , vr2);\\n           gmegabuf( index2 + 10) = asin( vr2 / gmegabuf(index2+4) );\\n\\n           i=i+2;\\n         );\\n     index = index+attributes;\\n    );\\n\\n\\nq1 = aspectx;\\nq2 = aspecty;","pixel_eqs_eel":"","warp":" shader_body { \\n  vec3 ret_1;\\n  ret_1.z = (texture (sampler_main, uv).z * 0.5);\\n  vec2 tmpvar_2;\\n  tmpvar_2 = ((uv_orig * texsize.xy) * texsize_noise_lq.zw);\\n  vec2 tmpvar_3;\\n  tmpvar_3 = (texsize.zw * 4.0);\\n  vec2 tmpvar_4;\\n  tmpvar_4.x = (((2.0 * \\n    ((texture (sampler_blur1, (uv_orig + (vec2(1.0, 0.0) * tmpvar_3))).xyz * scale1) + bias1)\\n  ) - (2.0 * \\n    ((texture (sampler_blur1, (uv_orig - (vec2(1.0, 0.0) * tmpvar_3))).xyz * scale1) + bias1)\\n  )).y * 0.5);\\n  tmpvar_4.y = (((2.0 * \\n    ((texture (sampler_blur1, (uv_orig + (vec2(0.0, 1.0) * tmpvar_3))).xyz * scale1) + bias1)\\n  ) - (2.0 * \\n    ((texture (sampler_blur1, (uv_orig - (vec2(0.0, 1.0) * tmpvar_3))).xyz * scale1) + bias1)\\n  )).y * 0.5);\\n  ret_1.y = texture (sampler_fw_main, clamp ((uv_orig + (\\n    (tmpvar_4 * texsize.zw)\\n   * 4.0)), 0.0, 1.0)).y;\\n  ret_1.y = (ret_1.y + ((\\n    (ret_1 - ((texture (sampler_blur1, uv_orig).xyz * scale1) + bias1))\\n  .y * 0.025) + -0.014));\\n  ret_1.y = (ret_1.y + ((texture (sampler_noise_lq, tmpvar_2).y - 0.5) * 0.02));\\n  vec2 tmpvar_5;\\n  tmpvar_5.x = (((2.0 * \\n    ((texture (sampler_blur1, (uv_orig + (vec2(1.0, 0.0) * tmpvar_3))).xyz * scale1) + bias1)\\n  ) - (2.0 * \\n    ((texture (sampler_blur1, (uv_orig - (vec2(1.0, 0.0) * tmpvar_3))).xyz * scale1) + bias1)\\n  )).x * 0.5);\\n  tmpvar_5.y = (((2.0 * \\n    ((texture (sampler_blur1, (uv_orig + (vec2(0.0, 1.0) * tmpvar_3))).xyz * scale1) + bias1)\\n  ) - (2.0 * \\n    ((texture (sampler_blur1, (uv_orig - (vec2(0.0, 1.0) * tmpvar_3))).xyz * scale1) + bias1)\\n  )).x * 0.5);\\n  ret_1.x = ((texture (sampler_main, (uv - \\n    ((tmpvar_5 * texsize.zw) * 4.0)\\n  )).x - (ret_1.y * 0.01)) + 0.004);\\n  ret_1.x = (ret_1.x + ((\\n    (texture (sampler_noise_lq, tmpvar_2).x - 0.5)\\n   * 0.01) + (ret_1.z * 0.14)));\\n  vec4 tmpvar_6;\\n  tmpvar_6.w = 1.0;\\n  tmpvar_6.xyz = ret_1;\\n  ret = tmpvar_6.xyz;\\n }","comp":" shader_body { \\n  vec3 ret_1;\\n  vec2 tmpvar_2;\\n  tmpvar_2 = (texsize.zw * 4.0);\\n  vec2 tmpvar_3;\\n  tmpvar_3.x = (((2.0 * \\n    ((texture (sampler_blur1, (uv + (vec2(1.0, 0.0) * tmpvar_2))).xyz * scale1) + bias1)\\n  ) - (2.0 * \\n    ((texture (sampler_blur1, (uv - (vec2(1.0, 0.0) * tmpvar_2))).xyz * scale1) + bias1)\\n  )) * 0.5).y;\\n  tmpvar_3.y = (((2.0 * \\n    ((texture (sampler_blur1, (uv + (vec2(0.0, 1.0) * tmpvar_2))).xyz * scale1) + bias1)\\n  ) - (2.0 * \\n    ((texture (sampler_blur1, (uv - (vec2(0.0, 1.0) * tmpvar_2))).xyz * scale1) + bias1)\\n  )) * 0.5).y;\\n  vec2 tmpvar_4;\\n  tmpvar_4 = (uv - ((tmpvar_3 * texsize.zw) * 128.0));\\n  vec4 tmpvar_5;\\n  tmpvar_5 = texture (sampler_main, uv);\\n  ret_1 = (((\\n    ((texture (sampler_blur2, tmpvar_4).xyz * scale2) + bias2)\\n  .x * \\n    clamp ((1.0 - tmpvar_5.y), 0.0, 1.0)\\n  ) * pow (hue_shader.yxz, vec3(8.0, 8.0, 8.0))) * 3.0);\\n  ret_1 = (mix (mix (ret_1, \\n    (pow (hue_shader.yzx, vec3(8.0, 8.0, 8.0)) * 1.4)\\n  , vec3(\\n    ((texture (sampler_main, tmpvar_4).x * 0.8) + ((texture (sampler_blur1, tmpvar_4).xyz * scale1) + bias1).x)\\n  )), vec3(1.0, 1.0, 1.0), (\\n    (pow (hue_shader, vec3(8.0, 8.0, 8.0)) * texture (sampler_main, clamp (uv, 0.0, 1.0)).y)\\n   * 1.2)) * clamp ((1.0 - tmpvar_5.z), 0.0, 1.0));\\n  vec4 tmpvar_6;\\n  tmpvar_6.w = 1.0;\\n  tmpvar_6.xyz = ret_1;\\n  ret = tmpvar_6.xyz;\\n }"}')},3612:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":1,"gammaadj":1,"decay":1,"echo_zoom":1,"echo_alpha":0.5,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"wave_a":2.789,"wave_scale":0.292,"wave_smoothing":0,"wave_mystery":0.12,"modwavealphastart":1,"modwavealphaend":1,"warpanimspeed":0.01,"warpscale":100,"zoomexp":0.92178,"zoom":0.9901,"warp":0.01,"wave_g":0,"ob_size":0,"ob_r":0.2,"ob_a":0.1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":64,"mv_y":48,"mv_l":0,"mv_b":0,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"rad":0.71426,"tex_ang":0.12566,"tex_zoom":1.51878,"a":0,"g2":0,"border_r":0.1,"border_g":0,"border_b":0,"border_a":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":100,"additive":1,"thickoutline":1,"x":0.43,"y":0.42,"rad":0.15799,"ang":0.1885,"tex_zoom":0.87865,"r":0,"g":1,"g2":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"x = q4;\\ny = q8;"},{"baseVals":{"thickoutline":1,"x":1,"rad":3.0054,"tex_ang":0.12566,"tex_zoom":1.51878,"r":0,"g":1,"g2":0,"a2":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"thickoutline":1,"x":1,"rad":0.39872,"tex_ang":0.12566,"tex_zoom":1.51878,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"usedots":1,"scaling":2.44415,"smoothing":0,"a":0,"enabled":0},"init_eqs_eel":"t2 = 0;\\nt3 = 0;\\nt4 = 0;\\ncl = 0;","frame_eqs_eel":"t1 = 0;\\nv = 0.01;\\nj = j + (bass)*0.01;\\nj2 = j2 + (mid_att)*0.01;\\nj3 = j3 + (treb_att)*0.01;\\nt2 = j;\\nt3 = j2;\\nt4 = j3;\\n//t5 = 0;\\nk = k*0.99 + 10*mid/fps;\\nt5 = -k;\\n\\ncl1 = cl1 + 0.002;\\ncl1 = if(above(cl1,1),0,cl1);\\ncl1 = if(below(cl1,0),1,cl1);\\nt8 = cl1;\\n\\ncl2 = cl2 -1*q1;\\ncl2 = if(above(cl2,1),0,cl2);\\ncl2 = if(below(cl2,0),1,cl2);\\nt7 = cl2;\\n\\ncl3 = cl3 +0.001;\\ncl3 = if(above(cl3,1),0,cl3);\\ncl3 = if(below(cl3,0),1,cl3);\\nt6 = cl3;","point_eqs_eel":"xx = ((sample*0983624912364)%10000000+100)/10000000;\\nyy = ((xx*1896575575)%10000000+100)/10000000;\\nzz = ((yy*58652340875)%10000000+100)/10000000;\\n\\n\\nd = sqrt(sqr(xx)+sqr(yy)+sqr(zz));\\n\\nzz = zz + t8 - if(above(zz+t8,1),1,0) - 0.5;\\nxx = xx + t7 - if(above(xx+t7,1),1,0) - 0.5;\\nyy = yy + t6 - if(above(yy+t6,1),1,0) - 0.5;\\n\\nv = 0.001;\\n\\nw = 1;// (sample*sin(time*0.3)*0.01-1);\\nbb = d*d*0.5;\\nn= 0.3;\\ns1 = sin(sin(t2*w+bb)*n);\\ns2 = sin(sin(t3*w+bb)*n);\\ns3 = sin(sin(t4*w+bb)*n);\\nc1 = cos(sin(t2*w+bb)*n);\\nc2 = cos(sin(t3*w+bb)*n);\\nc3 = cos(sin(t4*w+bb)*n);\\n\\nz = (c3*s1*c2 + s3*s2)*xx - (c3*s1*s2-s3*c2)*yy + c3*c1*zz;\\nx1 = (c1*c2*xx + c1*s2*yy - s1*zz);\\ny1 = ((s3*s1*c2 - c3*s2)*xx + (s3*s1*s2+c3*c2)*yy + s3*c1*zz);\\n\\nzoom = .5*(1/(z+0.5));\\nx = 0.5 + zoom*x1 + sin(time*0.1)*0;;\\ny = 0.5 + zoom*y1 + cos(time*0.16801)*0;\\n\\npi3 = 3.1415*2*0.3333;\\nt = z*2+t2*1;\\nc=3;\\n//r = sin(t)*c;\\n\\n//g = sin(t+pi3)*c;\\n\\n//b = sin(t-pi3)*c;\\n\\n\\nr = if(above(r,1),1,r);\\nr = if(below(r,0),0,r);\\ng = if(above(g,1),1,g);\\ng = if(below(g,0),0,g);\\nb = if(above(b,1),1,b);\\nb = if(below(b,0),0,b);\\n\\na = 0.4;"},{"baseVals":{"scaling":2.44415,"smoothing":0,"enabled":0},"init_eqs_eel":"t2 = 0;\\nt3 = 0;\\nt4 = 0;\\ncl = 0;","frame_eqs_eel":"t8 = 1;","point_eqs_eel":"t8 = -t8;\\ny = sample;\\nx = 0.5 + t8*0.005;\\n\\npi3 = 3.1415*2*0.3333;\\nt = time + sample*2;\\nc=2;\\n\\nr = sin(t)*c;\\ng = sin(t+pi3)*c;\\n\\nb = sin(t-pi3)*c;\\n\\n\\nr = if(above(r,1),1,r);\\nr = if(below(r,0),0,r);\\ng = if(above(g,1),1,g);\\ng = if(below(g,0),0,g);\\nb = if(above(b,1),1,b);\\nb = if(below(b,0),0,b);\\n"},{"baseVals":{"thick":1,"additive":1,"scaling":100,"smoothing":0.6,"r":0,"g":0.4,"a":0.3,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"t1 = q1;\\nt2 = q2;\\nt3 = q3;\\nt4 = q4;\\nt5 = q5;\\nt6 = q6;\\nt7 = q7;\\nt8 = q8;","point_eqs_eel":"sample = 1-sample;\\nxxx = xx;\\nyyy = yy;\\nxx = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\\n\\nyy = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;\\nd = 1/sqrt(sqr(xx-xxx)+sqr(yy-yyy));\\nx = xx + sample*(1-sample)*(value1-value2)*(yy-yyy)*d;\\ny = yy - sample*(1-sample)*(value1-value2)*(xx-xxx)*d;"},{"baseVals":{"usedots":1,"scaling":2.44415,"smoothing":0,"r":0,"g":0,"enabled":0},"init_eqs_eel":"t2 = 0;\\nt3 = 0;\\nt4 = 0;\\ncl = 0;","frame_eqs_eel":"t8 = 1;","point_eqs_eel":"t8 = -t8;\\ny = (1+t8)*0.01;\\nx = sample;"}],"init_eqs_eel":"x1 = 0.9;\\ny1 = 0.5;\\n\\nx2 = 0.5; y2 = 0.5;\\nx3 = 0.5; y3 = 0.5;\\nx4 = 0.5; y4 = 0.5;","frame_eqs_eel":"decay = 1;\\nxx1 = xx1*0.9 + (bass)*0.01;\\nxx2 = xx2*0.9 + (treb)*0.01;\\nyy1 = yy1*0.94 + (treb+bass)*0.0075;\\n\\nx1 = 0.5 + xx1-xx2;\\ny1 = 0.5 + yy1;\\n\\n//x2 = 0;y2 = 0;x3 = 0;y3 = 0;x4 = 0;y4 = 0;\\n\\nspring = 18;\\ngrav = 1;\\nresist = 0.2;\\nbounce = 0.9;\\ndt = 0.0003;\\n\\nvx2 = vx2*(1-resist*dt) + dt*((x1+x3-2*x2)*spring);\\nvy2 = vy2*(1-resist*dt) + dt*((y1+y3-2*y2)*spring-grav);\\nvx3 = vx3*(1-resist*dt) + dt*((x2+x4-2*x3)*spring);\\nvy3 = vy3*(1-resist*dt) + dt*((y2+y4-2*y3)*spring-grav);\\nvx4 = vx4*(1-resist*dt) + dt*((x3-x4)*spring);\\nvy4 = vy4*(1-resist*dt) + dt*((y3-y4)*spring-grav);\\n\\nx2 = x2 + vx2;\\ny2 = y2 + vy2;\\nx3 = x3 + vx3;\\ny3 = y3 + vy3;\\nx4 = x4 + vx4;\\ny4 = y4 + vy4;\\n\\nvx2 = if(above(x2,0),vx2,abs(vx2)*bounce);\\nvx2 = if(below(x2,1),vx2,-abs(vx2)*bounce);\\nvx3 = if(above(x3,0),vx3,abs(vx3)*bounce);\\nvx3 = if(below(x3,1),vx3,-abs(vx3)*bounce);\\nvx4 = if(above(x4,0),vx4,abs(vx4)*bounce);\\nvx4 = if(below(x4,1),vx4,-abs(vx4)*bounce);\\n\\nvy2 = if(above(y2,0),vy2,abs(vy2)*bounce);\\nvy2 = if(below(y2,1),vy2,-abs(vy2)*bounce);\\nvy3 = if(above(y3,0),vy3,abs(vy3)*bounce);\\nvy3 = if(below(y3,1),vy3,-abs(vy3)*bounce);\\nvy4 = if(above(y4,0),vy4,abs(vy4)*bounce);\\nvy4 = if(below(y4,1),vy4,-abs(vy4)*bounce);\\n\\n\\nq1 = x1;\\nq2 = x2;\\nq3 = x3;\\nq4 = x4;\\n\\nq5 = y1;\\nq6 = y2;\\nq7 = y3;\\nq8 = y4;\\n\\n\\nzoom = 1.004;\\n\\nq6 = atan2(vx4,vy4);\\nq5 = sqrt(vx4*vx4 + vy4*vy4);","pixel_eqs_eel":"dir = -q6*1 + asin(1)*1;\\n\\nb1 = 0.08; // distance\\nm1 = q5*45;//-0.6 + q5*200; // size\\nt1 = 0.5; // velocity\\n\\nxx = 0.5 + (q4-0.5)/aspectx;\\nyy = 1-(0.5 + (q8-0.5)/aspecty);\\n\\n\\nx1 = xx   +cos(dir+1.5708)*b1;\\ny1 = yy -sin(dir+1.5708)*b1;\\n\\nx2 = xx   -cos(dir+1.5708)*b1;\\ny2 = yy +sin(dir+1.5708)*b1;\\n\\nd1 = sqrt((x1-x)*(x1-x)+(y1-y)*(y1-y))-b1*2;\\nsi1 = 1- 1/(1+pow(2,-d1*100));\\n\\nd2 = sqrt((x2-x)*(x2-x)+(y2-y)*(y2-y))-b1*2;\\nsi2 = 1- 1/(1+pow(2,-d2*100));\\n\\nsi3 = -pow(q5,3)*00;\\n\\ndx = (si1*sin(y1-y)*m1*d1  - si2*sin(y2-y)*m1*d2 + si3*cos(dir)*t1)*2/aspectx;\\ndy = (-si1*sin(x1-x)*m1*d1 + si2*sin(x2-x)*m1*d2 - si3*sin(dir)*t1)*2/aspecty;","warp":" shader_body { \\n  vec3 ret_1;\\n  vec2 tmpvar_2;\\n  tmpvar_2 = (texsize.zw * 8.0);\\n  vec2 tmpvar_3;\\n  tmpvar_3.x = (((texture (sampler_blur1, \\n    (uv + (vec2(1.0, 0.0) * tmpvar_2))\\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \\n    (uv - (vec2(1.0, 0.0) * tmpvar_2))\\n  ).xyz * scale1) + bias1)).x;\\n  tmpvar_3.y = (((texture (sampler_blur1, \\n    (uv + (vec2(0.0, 1.0) * tmpvar_2))\\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \\n    (uv - (vec2(0.0, 1.0) * tmpvar_2))\\n  ).xyz * scale1) + bias1)).x;\\n  vec2 tmpvar_4;\\n  tmpvar_4 = (uv - ((tmpvar_3 * texsize.zw) * 0.5));\\n  ret_1.x = texture (sampler_fw_main, tmpvar_4).x;\\n  ret_1.x = (ret_1.x + ((\\n    (ret_1.x - ((texture (sampler_blur3, tmpvar_4).xyz * scale3) + bias3).x)\\n   * 0.2) - 0.004));\\n  ret_1.y = ((texture (sampler_fw_main, uv_orig).y * 0.98) - 0.004);\\n  vec4 tmpvar_5;\\n  tmpvar_5.w = 1.0;\\n  tmpvar_5.xyz = ret_1;\\n  ret = tmpvar_5.xyz;\\n }","comp":" shader_body { \\n  vec2 tmpvar_1;\\n  tmpvar_1 = (texsize.zw * 4.0);\\n  vec2 tmpvar_2;\\n  tmpvar_2.x = (((texture (sampler_blur1, \\n    (uv + (vec2(1.0, 0.0) * tmpvar_1))\\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \\n    (uv - (vec2(1.0, 0.0) * tmpvar_1))\\n  ).xyz * scale1) + bias1)).x;\\n  tmpvar_2.y = (((texture (sampler_blur1, \\n    (uv + (vec2(0.0, 1.0) * tmpvar_1))\\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \\n    (uv - (vec2(0.0, 1.0) * tmpvar_1))\\n  ).xyz * scale1) + bias1)).x;\\n  vec4 tmpvar_3;\\n  tmpvar_3.w = 1.0;\\n  tmpvar_3.xyz = mix ((vec3(0.0, 0.0, 1.0) * texture (sampler_main, uv).x), vec3(1.0, 0.0, 0.0), texture (sampler_main, (uv - tmpvar_2)).yyy);\\n  ret = tmpvar_3.xyz;\\n }"}')},3472:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":5,"gammaadj":1.56,"decay":1,"echo_zoom":0.362,"echo_orient":1,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"fshader":1,"zoom":1.004,"warp":0.19788,"sx":0.99967,"sy":0.9999,"wave_g":0.65,"wave_b":0.65,"ob_size":0,"ob_a":1,"mv_x":64,"mv_y":48,"mv_l":0,"mv_a":0},"shapes":[{"baseVals":{"sides":5,"additive":1,"num_inst":2,"x":0.49,"rad":0.11589,"tex_zoom":4.36077,"g2":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"x = rand(1000)/1000;\\ny = rand(1000)/1000;\\nang = rand(150)/100;"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"thick":1,"r":0,"g":0.3,"b":0.75},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,1)*3.1415*.01*bass);\\nma=ma-(above(treb,1)*3.1415*.01*treb);\\n\\nmx=mx+(.0002*cos(ma));\\nmy=my+(.0002*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\na=(above(bass+mid+treb,.8));"},{"baseVals":{"enabled":1,"thick":1,"r":0,"b":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,1)*3.1415*.05*bass);\\nma=ma-(above(mid,1)*3.1415*.05*mid);\\n\\nmx=mx+(.0001*cos(ma));\\nmy=my+(.0001*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\na=(above(bass+mid+treb,.1));"},{"baseVals":{"enabled":1,"thick":1,"g":0.5,"b":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(mid,1)*3.1415*.01*mid);\\nma=ma-(above(treb,1)*3.1415*.01*treb);\\n\\nmx=mx+(.0004*cos(ma));\\nmy=my+(.0004*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\na=(above(bass+mid+treb,.3));"},{"baseVals":{"enabled":1,"thick":1,"r":0.4,"g":0,"b":0.6},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,.5)*3.1415*.02*bass);\\nma=ma-(above(treb,.5)*3.1415*.02*treb);\\n\\nmx=mx+(.0008*cos(ma));\\nmy=my+(.0008*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\na=(above(bass+mid+treb,.2));"}],"init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.2*( 0.60*sin(0.980*time) + 0.40*sin(1.047*time) );\\nwave_g = wave_g + 0.2*( 0.60*sin(0.835*time) + 0.40*sin(1.081*time) );\\nwave_b = wave_b + 0.2*( 0.60*sin(0.814*time) + 0.40*sin(1.011*time) );\\nq1 = (cx*2-1) + 0.6*( 0.60*sin(0.374*time) + 0.40*sin(0.294*time) );\\nq2 = (cy*2-1) + 0.6*( 0.60*sin(0.393*time) + 0.40*sin(0.223*time) );\\nwarp = 0;\\nzoom = 1;\\nbb = bb*0.99 + bass*0.02;\\nmm = mm*0.99 + mid*0.02;\\ntt = tt*0.99 + treb*0.02;\\n\\nmx = max(max(bb,mm),tt);\\nmn = min(min(bb,mm),tt);\\n\\nob_r = (bb-mn)/(mx-mn);\\nob_b = (mm-mn)/(mx-mn);\\nob_g = (tt-mn)/(mx-mn);","pixel_eqs_eel":"du = (x*2-1) - q1;\\ndv = (y*2-1) - q2;\\ndist = sqrt(du*du+dv*dv);\\nang2 = atan2(du,dv) + time*0.15;\\nmult = 0.05*sin(dist*0.05);\\ndx = mult*sin(ang2*2-1.5);\\ndy = mult*cos(ang2*2-1.5);","warp":" shader_body { \\n  vec4 tmpvar_1;\\n  tmpvar_1.w = 1.0;\\n  vec4 tmpvar_2;\\n  tmpvar_2 = texture (sampler_main, uv);\\n  tmpvar_1.xyz = ((texture (sampler_main, clamp (\\n    (uv - (((vec2(0.0, 64.0) * texsize.zw) * dot (\\n      (tmpvar_2.xyz - 0.35)\\n    , vec3(0.32, 0.49, 0.29))) * (dot (tmpvar_2.xyz, vec3(0.32, 0.49, 0.29)) - 0.4)))\\n  , 0.0, 1.0)).xyz - 0.0011) + ((texture (sampler_noise_lq, \\n    (((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 1.5)) + rand_frame.xy)\\n  ) - 0.5) * 0.0038).xyz);\\n  ret = tmpvar_1.xyz;\\n }","comp":" shader_body { \\n  vec2 uv1_1;\\n  vec2 tmpvar_2;\\n  tmpvar_2.y = 0.0;\\n  tmpvar_2.x = texsize.z;\\n  vec2 tmpvar_3;\\n  tmpvar_3.x = 0.0;\\n  tmpvar_3.y = texsize.w;\\n  vec2 tmpvar_4;\\n  tmpvar_4.x = (texture (sampler_main, (uv - tmpvar_2)).xyz - texture (sampler_main, (uv + tmpvar_2)).xyz).x;\\n  tmpvar_4.y = (texture (sampler_main, (uv - tmpvar_3)).xyz - texture (sampler_main, (uv + tmpvar_3)).xyz).x;\\n  uv1_1 = ((0.3 * cos(\\n    ((uv - 0.5) * 2.0)\\n  )) - tmpvar_4);\\n  float tmpvar_5;\\n  tmpvar_5 = clamp ((0.04 / sqrt(\\n    dot (uv1_1, uv1_1)\\n  )), 0.0, 1.0);\\n  uv1_1 = ((0.3 * cos(\\n    (uv1_1 * 12.0)\\n  )) - (9.0 * tmpvar_4));\\n  vec4 tmpvar_6;\\n  tmpvar_6.w = 1.0;\\n  tmpvar_6.xyz = (tmpvar_5 + ((texture (sampler_main, uv).xyz * 12.0) * vec3(clamp (\\n    (0.04 / sqrt(dot (uv1_1, uv1_1)))\\n  , 0.0, 1.0))));\\n  ret = tmpvar_6.xyz;\\n }"}')},4841:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":3,"gammaadj":1.56,"decay":1,"echo_zoom":0.362,"echo_orient":1,"wave_thick":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":1.599,"wave_smoothing":0,"wave_mystery":-0.5,"modwavealphastart":2,"modwavealphaend":2,"warpscale":0.107,"zoomexp":0.1584,"fshader":1,"warp":0.01,"wave_r":0.51,"wave_g":0.5,"ob_size":0,"ob_a":1,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":64,"mv_y":48,"mv_l":0.5,"mv_r":0,"mv_g":0,"mv_b":0,"mv_a":0},"shapes":[{"baseVals":{"sides":100,"thickoutline":1,"rad":0.50126,"tex_zoom":0.99996,"g":1,"b":1,"r2":1,"g2":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"x = 0.5+sin(time*0.618)*0.2;\\ny = 0.5+cos(time*1.618)*0.2;\\nrad = bass*0.05;\\nborder_r = 1-(sin(time*1.25)*0.3+0.7);\\nborder_g = 1-(sin(time)*0.3+0.3);\\nborder_b = 1-(sin(time/3)*0.5+0.5);"},{"baseVals":{"sides":100,"thickoutline":1,"rad":0.50126,"g":1,"b":1,"g2":0,"b2":1,"border_g":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"x = 0.5+sin(time*2.618)*0.3;\\ny = 0.5+cos(time*3.14)*0.3;\\nrad = bass*0.05;\\nborder_r = 1-(sin(time*1.25)*0.3+0.7);\\nborder_g = 1-(sin(time)*0.3+0.3);\\nborder_b = 1-(sin(time/3)*0.5+0.5);\\n"},{"baseVals":{"sides":100,"thickoutline":1,"rad":0.50126,"tex_zoom":0.9998,"g":1,"b":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"x = 0.5+sin(-time*2.618)*0.4;\\ny = 0.5+cos(-time*1.14)*0.4;\\nrad = bass*0.05;\\nborder_r = 1-(sin(time*1.25)*0.3+0.7);\\nborder_g = 1-(sin(time)*0.3+0.3);\\nborder_b = 1-(sin(time/3)*0.5+0.5);"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"scaling":0.16188,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"additive":1,"scaling":25.12601,"smoothing":1,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"//zoom = 0.99;\\nib_r = sin(time*1.25*4)*0.3+0.7;\\nib_g = sin(time*4)*0.3+0.3;\\nib_b = sin(time/3*4)*0.5+0.5;\\nwave_r = 1- ib_r;\\nwave_g = 1- ib_g;\\nwave_b = 1- ib_b;\\n//wave_mystery = -1+bass/2;\\nwave_x = 0.5+sin(time*3)*0.3;\\nwave_y = 0.5+cos(time*2.187)*0.3;","pixel_eqs_eel":"r = bass/4;\\ncx1 = 0.5+sin(time*0.618)*0.2;\\ncy1 = 0.5+cos(time*1.618)*0.2;\\nd = sqrt((x-cx1)*(x-cx1)+(y-cy1)*(y-cy1));\\ndir = (bass)*(r*r-d*d)*0.3;\\nx1 = if( above(d,r),0,  sin(y-cy1)*dir);\\ny1 = if( above(d,r),0, -sin(x-cx1)*dir);\\n\\n\\ncx1 = 0.5+sin(time*2.618)*0.3;\\ncy1 = 0.5+cos(time*3.14)*0.3;\\nd = sqrt((x-cx1)*(x-cx1)+(y-cy1)*(y-cy1));\\ndir = -(mid)*(r*r-d*d)*0.3;\\nx2 = if( above(d,r),0,  sin(y-cy1)*dir);\\ny2 = if( above(d,r),0, -sin(x-cx1)*dir);\\n\\ncx1 = 0.5+sin(-time*2.618)*0.4;\\ncy1 = 0.5+cos(-time*1.14)*0.4;\\nd = sqrt((x-cx1)*(x-cx1)+(y-cy1)*(y-cy1));\\ndir = -(treb)*(r*r-d*d)*0.3;\\nx3 = if( above(d,r),0,  sin(y-cy1)*dir);\\ny3 = if( above(d,r),0, -sin(x-cx1)*dir);\\n\\n\\ndx = x1+x2+x3;\\ndy = y1+y2+y3;","warp":" shader_body { \\n  vec2 uv_1;\\n  vec2 tmpvar_2;\\n  tmpvar_2 = (((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 2.0)) + rand_frame.xy);\\n  uv_1 = (uv + ((texture (sampler_noise_lq, tmpvar_2).xy - 0.5) * texsize.zw));\\n  vec2 tmpvar_3;\\n  tmpvar_3.x = bass;\\n  tmpvar_3.y = treb;\\n  vec4 tmpvar_4;\\n  tmpvar_4.w = 1.0;\\n  tmpvar_4.xyz = (texture (sampler_main, (uv_1 + (\\n    (texture (sampler_main, (mix (uv_1, uv_orig, vec2(-1.0, -1.0)) + texsize.zw)).xy - 0.4)\\n   * \\n    (-0.004 + (0.04 * clamp ((tmpvar_3 - 1.0), 0.0, 1.0)))\\n  ))).xyz - (0.0008 + (\\n    (texture (sampler_noise_lq, tmpvar_2) - 0.5)\\n   * 0.02)).xyz);\\n  ret = tmpvar_4.xyz;\\n }","comp":" shader_body { \\n  vec2 uv1_1;\\n  vec2 tmpvar_2;\\n  tmpvar_2.y = 0.0;\\n  tmpvar_2.x = texsize.z;\\n  vec2 tmpvar_3;\\n  tmpvar_3.x = 0.0;\\n  tmpvar_3.y = texsize.w;\\n  vec2 tmpvar_4;\\n  tmpvar_4.x = (texture (sampler_main, (uv - tmpvar_2)).xyz - texture (sampler_main, (uv + tmpvar_2)).xyz).x;\\n  tmpvar_4.y = (texture (sampler_main, (uv - tmpvar_3)).xyz - texture (sampler_main, (uv + tmpvar_3)).xyz).x;\\n  uv1_1 = ((0.3 * cos(\\n    ((uv - 0.5) * 2.0)\\n  )) - tmpvar_4);\\n  float tmpvar_5;\\n  tmpvar_5 = clamp ((0.04 / sqrt(\\n    dot (uv1_1, uv1_1)\\n  )), 0.0, 1.0);\\n  uv1_1 = ((0.3 * cos(\\n    (uv1_1 * 12.0)\\n  )) - (9.0 * tmpvar_4));\\n  vec4 tmpvar_6;\\n  tmpvar_6.w = 1.0;\\n  tmpvar_6.xyz = (tmpvar_5 + ((texture (sampler_main, uv).xyz * 12.0) * vec3(clamp (\\n    (0.04 / sqrt(dot (uv1_1, uv1_1)))\\n  , 0.0, 1.0))));\\n  ret = tmpvar_6.xyz;\\n }"}')},2956:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":2,"gammaadj":2.7,"wave_mode":1,"modwavealphabyvolume":1,"wave_a":2.707,"wave_scale":1.025,"wave_smoothing":0.1,"modwavealphastart":0.77,"modwavealphaend":1.01,"warpscale":1.331,"zoom":1.014,"warp":0.21786,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.350*( 0.60*sin(3.980*time) + 0.40*sin(11.047*time) );\\nwave_g = wave_g + 0.350*( 0.60*sin(0.835*time) + 0.40*sin(1.081*time) );\\nwave_b = wave_b + 0.350*( 0.60*sin(0.814*time) + 0.40*sin(1.011*time) );\\ncx = cx + 0.110*( 0.60*sin(0.374*time) + 0.40*sin(0.294*time) );\\ncy = cy + 0.110*( 0.60*sin(0.393*time) + 0.40*sin(0.223*time) );\\ndx = dx + 0.005*( 0.60*sin(0.173*time) + 0.40*sin(0.223*time) );\\ndecay = decay - 0.01*equal(frame%20,0);","pixel_eqs_eel":"","warp":" shader_body { \\n  vec4 tmpvar_1;\\n  tmpvar_1.w = 1.0;\\n  tmpvar_1.xyz = (texture (sampler_main, (uv + (\\n    (texture (sampler_main, (mix (uv, uv_orig, vec2(-1.0, -1.0)) + texsize.zw)).xy - 0.37)\\n   * 0.01))).xyz - 0.004);\\n  ret = tmpvar_1.xyz;\\n }","comp":" shader_body { \\n  vec4 tmpvar_1;\\n  tmpvar_1 = texture (sampler_main, uv);\\n  vec4 tmpvar_2;\\n  tmpvar_2.w = 1.0;\\n  tmpvar_2.xyz = mix (vec3(dot (tmpvar_1.xyz, vec3(0.3333, 0.3333, 0.3333))), tmpvar_1.xyz, vec3(3.0, 3.0, 3.0));\\n  ret = tmpvar_2.xyz;\\n }"}')},1939:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":0,"gammaadj":1.9,"echo_zoom":1.16936,"wave_mode":7,"modwavealphabyvolume":1,"wave_a":0,"wave_scale":1.015009,"wave_smoothing":0.522,"modwavealphastart":0.83,"modwavealphaend":1.31,"warpscale":3.138,"zoom":1.009006,"warp":0.000536,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"wave_r = 0.85 + 0.25*sin(0.437*time+1);\\nwave_g = 0.85 + 0.25*sin(0.544*time+2);\\nwave_b = 0.85 + 0.25*sin(0.751*time+3);\\nrot = rot + 0.010*( 0.60*sin(0.381*time) + 0.40*sin(0.579*time) );\\ncx = cx + 0.210*( 0.60*sin(0.374*time) + 0.40*sin(0.294*time) );\\ncy = cy + 0.210*( 0.60*sin(0.393*time) + 0.40*sin(0.223*time) );\\ndx = dx + 0.003*( 0.60*sin(0.234*time) + 0.40*sin(0.277*time) );\\ndy = dy + 0.003*( 0.60*sin(0.284*time) + 0.40*sin(0.247*time) );\\ndecay = decay - 0.01*equal(frame%6,0);\\ndx = dx + dx_residual;\\ndy = dy + dy_residual;\\nbass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.3)*0.96+1.3);\\ndx_residual = equal(bass_thresh,2.13)*0.016*sin(time*7) + (1-equal(bass_thresh,2.13))*dx_residual;\\ndy_residual = equal(bass_thresh,2.13)*0.012*sin(time*9) + (1-equal(bass_thresh,2.13))*dy_residual;\\nwave_x = wave_x - dx_residual*7;\\nwave_y = wave_y - dy_residual*7;\\nwave_mystery = time*0.03;\\n\\nzoom = zoom + 0.005*( 0.60*sin(0.1934*time+3) + 0.40*sin(0.307*time+9) );\\nzoom = zoom + max(0,bass_att-1.1)*0.4;","pixel_eqs_eel":"","warp":" shader_body { \\n  vec3 ret_1;\\n  ret_1 = texture (sampler_main, uv).xyz;\\n  ret_1 = (ret_1 + ((ret_1 - \\n    ((texture (sampler_blur2, uv).xyz * scale2) + bias2)\\n  ) * 0.3));\\n  ret_1 = (ret_1 * 0.9);\\n  ret_1 = (ret_1 + ((\\n    ((texture (sampler_noise_lq, ((\\n      (uv_orig * texsize.xy)\\n     * \\n      (texsize_noise_lq.zw * 0.4)\\n    ) + rand_frame.xy)).xyz - 0.5) / 256.0)\\n   * 122.0) * clamp (\\n    (treb_att - 1.0)\\n  , 0.0, 1.0)));\\n  ret_1 = mix (ret_1, vec3(dot (ret_1, vec3(0.32, 0.49, 0.29))), vec3(0.2, 0.2, 0.2));\\n  vec4 tmpvar_2;\\n  tmpvar_2.w = 1.0;\\n  tmpvar_2.xyz = ret_1;\\n  ret = tmpvar_2.xyz;\\n }","comp":" shader_body { \\n  vec3 ret_1;\\n  ret_1 = (texture (sampler_main, uv).xyz + ((\\n    (texture (sampler_blur1, uv).xyz * scale1)\\n   + bias1) * 0.4));\\n  vec3 tmpvar_2;\\n  tmpvar_2 = pow (ret_1, vec3(0.5, 0.8, 1.7));\\n  ret_1 = tmpvar_2;\\n  vec4 tmpvar_3;\\n  tmpvar_3.w = 1.0;\\n  tmpvar_3.xyz = tmpvar_2;\\n  ret = tmpvar_3.xyz;\\n }"}')},6848:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":5,"gammaadj":1.9,"echo_zoom":1.16936,"wave_mode":5,"additivewave":1,"wave_a":0,"wave_scale":0.899719,"wave_smoothing":0.63,"wave_mystery":1,"modwavealphastart":2,"modwavealphaend":2,"warpscale":2.593743,"zoom":1.00496,"warp":0.278033,"sx":0.999666,"sy":0.9999,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"mv_x":0,"mv_y":48,"mv_dx":-0.941273,"mv_dy":0.426319,"mv_l":5,"mv_r":0.315997,"mv_g":0.078173,"mv_b":0.941976,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"rg = 0;","frame_eqs_eel":"wave_r = wave_r + 0.350*( 0.60*sin(0.980*time) + 0.40*sin(1.047*time) );\\nwave_g = wave_g + 0.350*( 0.60*sin(0.835*time) + 0.40*sin(1.081*time) );\\nwave_b = wave_b + 0.350*( 0.60*sin(0.814*time) + 0.40*sin(1.011*time) );\\nq1 = (cx*2-1) + 0.52*( 0.60*sin(0.374*time) + 0.40*sin(0.294*time) );\\nq2 = (cy*2-1) + 0.52*( 0.60*sin(0.393*time) + 0.40*sin(0.223*time) );\\nq3 = (cx*2-1) + 0.52*( 0.60*sin(0.174*-time) + 0.40*sin(0.364*time) );\\nq4 = (cy*2-1) + 0.52*( 0.60*sin(0.234*time) + 0.40*sin(0.271*-time) );\\ndecay = decay - 0.01*equal(frame%5,0);\\n\\n// this is a great way to respond to beats:\\n// once you get one, let it decay at a constant rate!!\\nrg = max(rg*0.95, 0.3 + 0.5*min(2,max(0,mid_att-1)*1.3));\\nq9 = rg;","pixel_eqs_eel":"du = x*2-1 - q1;\\ndv = y*2-1 - q2;\\ndist = sqrt(du*du+dv*dv);\\nang2 = atan2(du,dv);\\nmult = 0.008/(dist+0.4);\\ndx = mult*sin(ang2-1.5);\\ndy = mult*cos(ang2-1.5);\\ndu = x*2-1 - q3;\\ndv = y*2-1 - q4;\\ndist = sqrt(du*du+dv*dv);\\nang2 = atan2(du,dv);\\nmult = 0.008/(dist+0.4);\\ndx = dx + mult*sin(ang2+1.5);\\ndy = dy + mult*cos(ang2+1.5);","warp":" shader_body { \\n  vec3 ret_1;\\n  vec2 tmpvar_2;\\n  tmpvar_2 = mix (uv_orig, uv, vec2(q9));\\n  ret_1 = texture (sampler_main, tmpvar_2).xyz;\\n  ret_1 = (ret_1 + ((ret_1 - \\n    ((texture (sampler_blur1, tmpvar_2).xyz * scale1) + bias1)\\n  ) * 0.3));\\n  ret_1 = (ret_1 * 0.9);\\n  ret_1 = (ret_1 + ((\\n    ((texture (sampler_noise_lq, ((\\n      (uv_orig * texsize.xy)\\n     * \\n      (texsize_noise_lq.zw * 0.4)\\n    ) + rand_frame.xy)).xyz - 0.5) / 256.0)\\n   * 122.0) * clamp (\\n    (treb_att - 1.0)\\n  , 0.0, 1.0)));\\n  ret_1 = mix (ret_1, vec3(dot (ret_1, vec3(0.32, 0.49, 0.29))), vec3(0.2, 0.2, 0.2));\\n  vec4 tmpvar_3;\\n  tmpvar_3.w = 1.0;\\n  tmpvar_3.xyz = ret_1;\\n  ret = tmpvar_3.xyz;\\n }","comp":" shader_body { \\n  vec4 tmpvar_1;\\n  tmpvar_1.w = 1.0;\\n  tmpvar_1.xyz = (0.3 + (0.4 * vec3(dot (texture (sampler_main, uv).xyz, vec3(0.32, 0.49, 0.29)))));\\n  ret = tmpvar_1.xyz;\\n }"}')},7485:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":1,"gammaadj":1,"decay":0.99,"echo_zoom":1,"echo_alpha":0.5,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"darken_center":1,"darken":1,"invert":1,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":2.853,"zoomexp":3.6,"zoom":1.02109,"rot":-0.16,"warp":0.309,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"mv_x":64,"mv_y":48,"mv_l":0,"mv_a":0},"shapes":[{"baseVals":{"sides":39,"additive":1,"num_inst":126,"rad":0.06989,"tex_ang":0.62832,"a":0,"r2":1,"g2":0,"a2":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"ma=ma+(above(bass,1)*3.1415*.01*bass);\\nma=ma-(above(treb,1)*3.1415*.01*treb);\\n\\nmx=mx+(.0002*cos(ma));\\nmy=my+(.0002*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\na=(above(bass+mid+treb,.8));"},{"baseVals":{"sides":41,"additive":1,"num_inst":239,"rad":0.06989,"tex_ang":0.62832,"r":0,"g":1,"a2":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"ma=ma+(above(bass,1)*3.1415*.05*bass);\\nma=ma-(above(mid,1)*3.1415*.05*mid);\\n\\nmx=mx+(.0001*cos(ma));\\nmy=my+(.0001*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\na=(above(bass+mid+treb,.1));"},{"baseVals":{"sides":43,"additive":1,"num_inst":32,"rad":0.06989,"tex_ang":0.62832,"r":0,"b":1,"g2":0,"b2":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"ma=ma+(above(mid,1)*3.1415*.01*mid);\\nma=ma-(above(treb,1)*3.1415*.01*treb);\\n\\nmx=mx+(.0004*cos(ma));\\nmy=my+(.0004*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\na=(above(bass+mid+treb,.3));"},{"baseVals":{"enabled":1,"sides":14,"rad":0.15964,"tex_ang":0.62832,"a":0,"r2":1,"b2":1,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"thick":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,1)*3.1415*.01*bass);\\nma=ma-(above(treb,1)*3.1415*.01*treb);\\n\\nmx=mx+(.0002*cos(ma));\\nmy=my+(.0002*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\na=(above(bass+mid+treb,.8));"},{"baseVals":{"thick":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,1)*3.1415*.05*bass);\\nma=ma-(above(mid,1)*3.1415*.05*mid);\\n\\nmx=mx+(.0001*cos(ma));\\nmy=my+(.0001*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\na=(above(bass+mid+treb,.1));"},{"baseVals":{"thick":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(mid,1)*3.1415*.01*mid);\\nma=ma-(above(treb,1)*3.1415*.01*treb);\\n\\nmx=mx+(.0004*cos(ma));\\nmy=my+(.0004*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\na=(above(bass+mid+treb,.3));"},{"baseVals":{"thick":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,.5)*3.1415*.02*bass);\\nma=ma-(above(treb,.5)*3.1415*.02*treb);\\n\\nmx=mx+(.0008*cos(ma));\\nmy=my+(.0008*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\na=(above(bass+mid+treb,.2));"}],"init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.400*( 0.60*sin(0.933*time) + 0.40*sin(1.045*time) );\\nwave_g = wave_g + 0.400*( 0.60*sin(0.900*time) + 0.40*sin(0.956*time) );\\nwave_b = wave_b + 0.400*( 0.60*sin(0.910*time) + 0.40*sin(0.920*time) );\\nq8 = oldq8+if(above(bass+bass_att,1.8),q8+0.0005*pow((bass+bass_att-1),9),0);\\noldq8 = q8;\\nmonitor = q8;\\nzoom = zoom + 0.023*( 0.60*sin(0.339*q8) + 0.40*sin(0.276*q8) );\\nrot = rot + 0.030*( 0.60*sin(0.381*q8) + 0.40*sin(0.579*q8) );\\n//decay = decay - 0.02*equal(frame%40,0);\\nmv_r = wave_r;\\nmv_b = wave_b;\\nmv_g = wave_g;\\nmv_x = 1.25;\\nmv_y = 1.25;\\nmv_dx = 0.1*sin(1.1*time);\\nmv_dy = 0.1*cos(1.112*time);","pixel_eqs_eel":"rot=rot+1/(10*(rad+0.2+0.1*sin(q8)));","warp":" shader_body { \\n  vec2 my_uv_1;\\n  vec3 ret_2;\\n  vec2 tmpvar_3;\\n  tmpvar_3 = (vec2(1280.0, 1024.0) * texsize.zw);\\n  float tmpvar_4;\\n  vec2 tmpvar_5;\\n  tmpvar_5 = (uv + vec2(0.005, 0.0));\\n  vec2 tmpvar_6;\\n  tmpvar_6 = (uv - vec2(0.005, 0.0));\\n  tmpvar_4 = (((\\n    (texture (sampler_blur2, tmpvar_5).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, tmpvar_6).xyz * scale2)\\n   + bias2)).x * tmpvar_3.x);\\n  float tmpvar_7;\\n  vec2 tmpvar_8;\\n  tmpvar_8 = (uv + vec2(0.0, 0.005));\\n  vec2 tmpvar_9;\\n  tmpvar_9 = (uv - vec2(0.0, 0.005));\\n  tmpvar_7 = (((\\n    (texture (sampler_blur2, tmpvar_8).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, tmpvar_9).xyz * scale2)\\n   + bias2)).x * tmpvar_3.y);\\n  vec2 tmpvar_10;\\n  tmpvar_10.x = tmpvar_4;\\n  tmpvar_10.y = tmpvar_7;\\n  vec2 tmpvar_11;\\n  tmpvar_11.x = (((\\n    (texture (sampler_blur2, tmpvar_5).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, tmpvar_6).xyz * scale2)\\n   + bias2)).x * tmpvar_3.x);\\n  tmpvar_11.y = (((\\n    (texture (sampler_blur2, tmpvar_8).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, tmpvar_9).xyz * scale2)\\n   + bias2)).x * tmpvar_3.y);\\n  ret_2.x = texture (sampler_fw_main, ((uv - (tmpvar_10 * 0.01)) + (tmpvar_11 * 0.003))).x;\\n  vec4 tmpvar_12;\\n  tmpvar_12 = texture (sampler_blur3, uv);\\n  ret_2.x = (ret_2.x + ((ret_2.x - \\n    ((tmpvar_12.xyz * scale3) + bias3)\\n  .x) * 0.1));\\n  ret_2.x = (ret_2.x + 0.004);\\n  vec2 tmpvar_13;\\n  tmpvar_13.x = tmpvar_7;\\n  tmpvar_13.y = -(tmpvar_4);\\n  my_uv_1 = (uv + ((tmpvar_13 * 0.05) * (1.2 - \\n    ((tmpvar_12.xyz * scale3) + bias3)\\n  .y)));\\n  ret_2.z = texture (sampler_fw_main, my_uv_1).z;\\n  vec2 x_14;\\n  x_14 = (my_uv_1 - uv);\\n  ret_2.z = (ret_2.z + ((\\n    ((ret_2.z - ((texture (sampler_blur1, uv).xyz * scale1) + bias1).z) * sqrt(dot (x_14, x_14)))\\n   * 180.0) / sqrt(\\n    dot (tmpvar_3, tmpvar_3)\\n  )));\\n  ret_2.z = (ret_2.z * 0.8);\\n  ret_2.z = (ret_2.z + 0.004);\\n  vec2 tmpvar_15;\\n  tmpvar_15.x = -(tmpvar_7);\\n  tmpvar_15.y = tmpvar_4;\\n  my_uv_1 = (tmpvar_15 * 0.045);\\n  vec2 tmpvar_16;\\n  tmpvar_16.x = (((\\n    (texture (sampler_blur2, (uv + vec2(0.01, 0.0))).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, (uv - vec2(0.01, 0.0))).xyz * scale2)\\n   + bias2)).y * tmpvar_3.x);\\n  tmpvar_16.y = (((\\n    (texture (sampler_blur2, (uv + vec2(0.0, 0.01))).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, (uv - vec2(0.0, 0.01))).xyz * scale2)\\n   + bias2)).y * tmpvar_3.y);\\n  my_uv_1 = (my_uv_1 + (uv - (tmpvar_16 * 0.03)));\\n  ret_2.y = texture (sampler_fw_main, my_uv_1).y;\\n  ret_2.y = (ret_2.y + ((\\n    (ret_2.y - ((texture (sampler_blur3, my_uv_1).xyz * scale3) + bias3).y)\\n   * 0.1) + 0.01));\\n  vec4 tmpvar_17;\\n  tmpvar_17.w = 1.0;\\n  tmpvar_17.xyz = ret_2;\\n  ret = tmpvar_17.xyz;\\n }","comp":" shader_body { \\n  vec2 uv2_1;\\n  float blur_2;\\n  float crisp_3;\\n  vec3 ret_4;\\n  vec4 tmpvar_5;\\n  tmpvar_5 = texture (sampler_main, uv);\\n  vec4 tmpvar_6;\\n  tmpvar_6 = texture (sampler_blur1, uv);\\n  ret_4 = (tmpvar_5.xyz + ((\\n    (tmpvar_6.xyz * scale1)\\n   + bias1) * 3.0));\\n  uv2_1 = (((uv - 0.5) * 0.8) + 0.5);\\n  crisp_3 = texture (sampler_main, uv2_1).y;\\n  blur_2 = ((texture (sampler_blur1, uv2_1).xyz * scale1) + bias1).y;\\n  ret_4 = (ret_4 * (1.0 - (blur_2 * 1.15)));\\n  vec3 tmpvar_7;\\n  tmpvar_7 = max (ret_4, vec3(crisp_3));\\n  uv2_1 = uv;\\n  crisp_3 = tmpvar_5.x;\\n  blur_2 = ((tmpvar_6.xyz * scale1) + bias1).x;\\n  ret_4 = (tmpvar_7 * (1.0 - (blur_2 * 1.15)));\\n  vec3 tmpvar_8;\\n  tmpvar_8 = max (ret_4, tmpvar_5.xxx);\\n  ret_4 = tmpvar_8;\\n  vec4 tmpvar_9;\\n  tmpvar_9.w = 1.0;\\n  tmpvar_9.xyz = tmpvar_8;\\n  ret = tmpvar_9.xyz;\\n }"}')},378:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":0,"gammaadj":1.980001,"decay":0.5,"echo_zoom":0.999998,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken_center":1,"darken":1,"wave_a":0.001,"wave_scale":0.527429,"wave_smoothing":0.45,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":0.442,"warpscale":0.498,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.8,"wave_g":0.49,"ob_size":0,"ob_r":1,"ob_g":1,"ob_b":1,"ob_a":0.05,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.4999,"mv_g":0.4999,"mv_b":0.4999,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"rad":0.048958,"tex_ang":1.00531,"tex_zoom":1.531168,"r":0.5,"g":1,"b":0.9,"r2":0.83,"g2":0.93,"b2":0.8,"a2":1,"border_b":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"\\ntrel = time/3;\\n\\nx = .5+sin(trel*2);\\ny = .5+cos(trel*1.3);\\n\\n\\n\\ncent = sqrt((x-.5)*(x-.5)+(y-.5)*(y-.5));\\n\\nrad = .1*cent;\\na = .8;"},{"baseVals":{"enabled":1,"thickoutline":1,"textured":1,"x":0.26,"y":0.2,"rad":0.393173,"tex_zoom":1.392831,"r":0,"g":0.55,"b":0.5,"a":0.9,"g2":0.4,"b2":0.4,"border_r":0.3,"border_g":0.7,"border_b":0.8,"border_a":0.2},"init_eqs_eel":"","frame_eqs_eel":"trig = q24;\\n\\ntextured = 1;\\n\\nx0 = x0*bnot(trig) + trig*(.2+ rand(100)/200); \\ny0 = y0*bnot(trig) + trig*(.2+ rand(100)/200); \\n\\n\\nx0 = x0 + .03*q1*(3+q26)/fps;\\ny0 = y0 + .03*q2*(3+q26)/fps;\\n\\nx0 = x0 - int(x0);\\ny0 = y0 - int(y0);\\n\\ntex_ang = time;\\n//tex_zoom = q1;\\nang = time*q2;\\nx = x0; y = y0;\\nrad0 = rad0*bnot(trig) + trig*rand(100)/200;\\nrad = rad0;\\n\\n\\nr0 = r0*bnot(trig) + trig * rand(10)/10;\\nb0 = b0*bnot(trig) + trig * rand(10)/10;\\ng0 = g0*bnot(trig) + trig * rand(10)/10;\\n\\nborder_r = r0; border_g = g0; border_b = b0;\\n\\nr = r0; b = b0; g = g0;"},{"baseVals":{"additive":1,"x":0.503,"rad":0.038857,"tex_zoom":0.609857,"g":0.1,"a":0.9,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"x = rand(50)/50;\\ny = .5 - 0*rand(15)/200;\\n\\nr = .4;\\ng = .6;\\nb = 1;\\nr2 = r;\\ng2 = g;\\nb2 = b;\\n\\na = min(q21/2 ,.9);\\nrad = a * (.1+abs(x-.5))/2 ;"},{"baseVals":{"thickoutline":1,"textured":1,"x":0.26,"y":0.76,"rad":0.39478,"tex_zoom":0.499805,"g":1,"b":1,"r2":1,"b2":1,"a2":0.8,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"tex_zoom = q27/2;"}],"waves":[{"baseVals":{"samples":282,"sep":20,"thick":1,"additive":1,"scaling":3.915805,"smoothing":0.1,"r":0.2,"g":0.3,"a":0.6,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"t2 = t2 + bass_att;","point_eqs_eel":"\\nx = sample;\\ny = value1 * rand(50)/100 * abs(sample-.5)+ .49;\\n\\na = q26/4 * (.2 + abs(sample-.5)); "},{"baseVals":{"usedots":1,"thick":1,"scaling":0.891519,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"xi = rand(100)/100;\\nyi = rand(100)/100;\\n\\nx = xi; y = yi;\\n\\na = q21/15; "},{"baseVals":{"thick":1,"scaling":0.891519,"smoothing":0.82,"r":0,"g":0.2,"b":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"dirx = 1;","frame_eqs_eel":"dec_med = pow (0.6, 30/fps);\\ndec_slow = pow (0.9, 30/fps);\\nbeat = max (max (bass, mid), treb); \\navg = avg*dec_slow + beat*(1-dec_slow);\\nis_beat = above(beat, .2+avg+peak) * above (time, t0+.2);\\nt0 = is_beat*time + (1-is_beat)*t0;\\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\\nindex = (index + is_beat) %8;\\nindex2 = (index2 + is_beat*bnot(index))%4;\\nindex3 = (index3 + is_beat*bnot(index)*bnot(index2))%3;\\n\\n\\nq20 = avg;\\nq21 = beat;\\nq22 = peak;\\nq23 = index;\\nq24 = is_beat;\\nq26 = bass + mid + treb;\\nava = ava*dec_slow + q26*(1-dec_slow);\\n\\n\\n//k1 =  is_beat*bnot(index)*bnot(index2);\\n\\nk1 =  is_beat*equal(index%2,0);\\np1 =  k1*(p1+1) + (1-k1)*p1;\\np2 = dec_med * p2+ (1-dec_med)*p1;\\nrott = p2 * 3.1416/2;\\nq1 = cos(rott);\\nq2 = sin(rott);\\nq3 = -q2;\\nq4 = q1;\\n\\nq27 = 8-index;\\nq28 = .5 + sin(time/7)/10;\\n\\nrm = min(q26-1.5*ava,2);\\nmov = is_beat*rm + (1-is_beat)*mov;\\n\\nmovez = movez + .4/fps*mov;\\nq30 = movez;\\n//**************************\\n\\nampl = q26/8;\\n\\nmovex = movex + .2/fps*sin(rott);\\nmovey = movey + .2/fps*cos(rott);\\n\\nq18 = movex; q19 = movey;\\ntrel = trel + 1/fps + q24;\\nq17 = 2*sin(trel/4);","pixel_eqs_eel":"","warp":" shader_body { \\n  vec2 uv_1;\\n  vec2 uv6_2;\\n  vec2 tmpvar_3;\\n  tmpvar_3 = ((uv - 0.5) * aspect.xy);\\n  float tmpvar_4;\\n  tmpvar_4 = (((q28 * 2.0) * sqrt(\\n    dot (tmpvar_3, tmpvar_3)\\n  )) + (rand_frame * 64.0)).x;\\n  uv_1 = (uv + (clamp (\\n    ((sin(tmpvar_4) / cos(tmpvar_4)) * normalize(tmpvar_3))\\n  , vec2(-16.0, -16.0), vec2(16.0, 16.0)) / 20.0));\\n  uv6_2 = (0.4 * sin((tmpvar_3 * 12.0)));\\n  vec4 tmpvar_5;\\n  tmpvar_5.w = 1.0;\\n  tmpvar_5.xyz = (((q24 * \\n    (((texture (sampler_main, uv_1).xyz - (\\n      ((texture (sampler_blur1, fract(uv_1)).xyz * scale1) + bias1)\\n     * 0.04)) + (0.15 * (vec3(\\n      (0.1 / sqrt(dot (uv6_2, uv6_2)))\\n    ) * roam_cos.xyz))) - 0.04)\\n  ) * 0.98) + ((1.0 - q24) * texture (sampler_main, uv_orig).xyz));\\n  ret = tmpvar_5.xyz;\\n }","comp":"vec3 xlat_mutableneu;\\nvec3 xlat_mutableret1;\\nvec2 xlat_mutablers2;\\n shader_body { \\n  vec2 uv_1;\\n  float inten_3;\\n  float dist_4;\\n  float ang2_5;\\n  vec2 uv2_6;\\n  uv_1 = (uv - 0.5);\\n  uv_1 = (uv_1 * aspect.xy);\\n  dist_4 = 1.0;\\n  inten_3 = 1.0;\\n  xlat_mutableret1 = vec3(0.0, 0.0, 0.0);\\n  for (float n_2 = 0.0; n_2 <= 4.0; n_2 += 1.0) {\\n    vec2 uv3_7;\\n    ang2_5 = ((6.28 * n_2) / 4.0);\\n    float tmpvar_8;\\n    tmpvar_8 = cos(ang2_5);\\n    float tmpvar_9;\\n    tmpvar_9 = sin(ang2_5);\\n    uv2_6.x = ((uv_1.x * tmpvar_8) - (uv_1.y * tmpvar_9));\\n    uv2_6.y = ((uv_1.x * tmpvar_9) + (uv_1.y * tmpvar_8));\\n    uv2_6 = (uv2_6 * aspect.yx);\\n    dist_4 = (1.0 - fract((\\n      (0.25 * n_2)\\n     + q30)));\\n    inten_3 = ((sqrt(dist_4) * (1.0 - dist_4)) * 4.0);\\n    vec2 tmpvar_10;\\n    tmpvar_10.x = tmpvar_8;\\n    tmpvar_10.y = tmpvar_9;\\n    uv3_7 = (fract((\\n      ((3.0 * uv2_6) * dist_4)\\n     + \\n      (0.3 * q27)\\n    )) + (q17 * tmpvar_10));\\n    xlat_mutableneu = (texture (sampler_main, uv3_7).xyz - ((texture (sampler_blur2, \\n      ((uv3_7 * 1.02) * q1)\\n    ).xyz * scale2) + bias2));\\n    xlat_mutableneu = (xlat_mutableneu * vec3(greaterThanEqual (xlat_mutableneu, vec3(0.0, 0.0, 0.0))));\\n    xlat_mutableret1 = max (xlat_mutableret1, (xlat_mutableneu * inten_3));\\n  };\\n  xlat_mutablers2 = ((0.4 * cos(\\n    ((uv_1 * 13.0) + time)\\n  )) - dot (xlat_mutableret1, vec3(0.32, 0.49, 0.29)));\\n  vec4 tmpvar_11;\\n  tmpvar_11.w = 1.0;\\n  tmpvar_11.xyz = (xlat_mutableret1 + ((\\n    ((0.05 / sqrt(dot (xlat_mutablers2, xlat_mutablers2))) * q26)\\n   / 4.0) * hue_shader));\\n  ret = tmpvar_11.xyz;\\n }"}')},3815:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":3,"wave_mode":4,"additivewave":1,"wave_dots":1,"modwavealphabyvolume":1,"wave_a":0.331,"wave_scale":0.898,"wave_smoothing":0.108,"wave_mystery":0.1,"modwavealphastart":0.72,"modwavealphaend":1.28,"zoom":1.3345,"wave_r":0,"wave_g":0.5,"wave_b":0.5,"wave_y":0.54,"mv_x":24.8,"mv_dy":0.16,"mv_l":1.5,"mv_a":0},"shapes":[{"baseVals":{"sides":3,"rad":0.31275,"tex_zoom":0.17914,"r":0.82,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"xy=0.5+rand_frame;"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"samples":352,"usedots":1,"additive":1,"scaling":0.03856,"smoothing":0.2,"g":0},"init_eqs_eel":"","frame_eqs_eel":"q1=bass_att;","point_eqs_eel":"r = abs (sin (frame /38));\\ng = 0.5*abs (cos (frame /45));\\nb = 0.5*abs (sin (frame / 133));\\na = 0.3;\\nt02 = t02 + q1/10;\\nratio = sin (frame/49);\\n\\nampl = 0.01+0.4*sqr(sin ((frame ) / 18)* cos (frame / 123));\\n\\nx1 = (r-0.5)/15 +0.5 + ampl* sin (sample*6.28);\\ny1 = (b-0.5)/15+0.5 + ampl* cos (sample*6.28);\\n\\nx =  x1+1*0.2*(ampl+ratio )*sin ( sample*6.28 * ratio*7.3);\\ny =  y1+1*0.2*(ampl+ratio )*cos ( sample*6.28*6);\\n"},{"baseVals":{"samples":15,"scaling":2.06378,"smoothing":0.8,"r":0.8,"g":0,"b":0.6,"a":0.9,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"samples":112,"additive":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"dx=0;\\noldshift=shift;\\nnormalframez=normalframez+1;\\nshift=above(bass_att,1)*above(treb_att,0.9);\\ncrash=abs(oldshift-shift);\\nnex=equal(rshift,0)*1+equal(rshift,1)*2;\\nrshift=if(crash,nex,rshift);\\nmonitor=rshift;\\nwave_r=int(rand(200))/200;\\nwave_g=int(rand(200))/200;\\nwave_b=int(rand(200))/200;\\nwarp=0;\\nq1=above(bass_att,1.3);\\nzoom1=zoom+0.15-0.3*(normalframez%2);\\nzoom=if(shift,zoom1,1);\\nrot=rot-0.1+rshift*0.1;","pixel_eqs_eel":"dy=-below(y,0.4)*0.007+above(y,0.6)*0.007;","warp":" shader_body { \\n  vec4 tmpvar_1;\\n  tmpvar_1.w = 1.0;\\n  tmpvar_1.xyz = ((texture (sampler_main, (uv_orig + \\n    ((uv - uv_orig) * dot (texture (sampler_main, uv).xyz, vec3(0.32, 0.49, 0.29)))\\n  )).xyz * 0.99) - 0.002);\\n  ret = tmpvar_1.xyz;\\n }","comp":" shader_body { \\n  vec3 ret_1;\\n  ret_1 = (texture (sampler_main, uv).xyz * 2.0);\\n  ret_1 = (ret_1 * (1.0 - ret_1));\\n  ret_1 = (((1.0 - \\n    pow (clamp (ret_1, 0.0, 1.0), vec3(0.5, 0.5, 0.5))\\n  ) * 1.5) - 0.75);\\n  vec4 tmpvar_2;\\n  tmpvar_2.w = 1.0;\\n  tmpvar_2.xyz = ret_1;\\n  ret = tmpvar_2.xyz;\\n }"}')},5717:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":3,"decay":0.975,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":2,"wave_dots":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"wave_a":100,"wave_scale":27.455,"wave_smoothing":0.5,"wave_mystery":-1,"modwavealphastart":0.4,"modwavealphaend":1,"warpscale":1.772,"zoomexp":1.001,"zoom":1.007,"warp":0,"mv_y":8.64,"mv_l":1.455,"mv_r":0,"mv_g":0,"mv_b":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":100,"x":0.455,"rad":0.43233,"r":0.5,"g":0.5,"r2":0.57,"g2":0,"border_b":0.5,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"sounds=(bass+treb+mid)/3;\\n\\nrad=rad*sounds*0.6;\\n\\nr=r+sin(bass)*g;\\ng=g+sin(mid)*g;\\n\\n\\nx=x+0.207*cos(time*bass*0.1);\\ny=y+0.2029*sin(time*bass*0.09);"},{"baseVals":{"enabled":1,"sides":100,"rad":0.13465,"tex_zoom":0.91,"r2":1,"a2":0.318,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"\\ng2=g2+0.09*sin((treb+mid)*1.23);\\ng=g+0.09*cos((bass+mid)*1.37);\\n\\nsounds=(bass+mid+treb)/3;\\n\\nrad=rad*(treb+mid)/3;\\n\\nx=x+0.300*sin(time*bass);\\ny=y+0.317*cos(time*bass);"},{"baseVals":{"enabled":1,"sides":100,"rad":0.20047,"g":1,"b":1,"r2":0.5,"g2":0.445,"b2":0.94,"border_b":0.5,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"sounds=(bass+treb+mid)/3;\\natt=(bass_att+treb_att+mid_att)/3;\\natt=(bass_att+treb_att+mid_att)/3;\\nr2=r2+(0.25*sin(time*6.28))-bass;\\ng2=g2+(0.25*sin(time*6.28))-bass;\\n\\nrad=rad;\\nx=x+0.243*cos(time*2.3)+sounds*0.09;\\ny=y+0.217*sin((time*3.5)+(sounds*0.3));"},{"baseVals":{"x":0.475,"border_g":0.9,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"sep":256,"scaling":20.35074,"smoothing":0.435,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"r=r+0.5*sin(treb*1.13);\\ng=g+0.5*sin(bass*1.33);\\nb=b+0.5*sin(mid*1.23);","point_eqs_eel":""},{"baseVals":{"sep":256,"usedots":1,"scaling":100,"smoothing":0.51,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"scaling":0.91,"smoothing":0.45,"b":0.91,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"scaling":1.08,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"wave_x = wave_x + 0.2*( 0.60*sin(2.121*time) + 0.5*sin(1.621*time) );\\nwave_y = wave_y + 0.2*( 0.60*sin(1.742*time) + 0.5*sin(2.322*time) );\\nwave_r = wave_r + 0.200*( 0.60*sin(0.823*time) + 0.40*sin(0.916*time) );\\nwave_g = wave_g + 0.500*( 0.60*sin(0.900*time) + 0.40*sin(1.023*time) );\\nwave_b = wave_b + 0.500*( 0.60*sin(0.808*time) + 0.40*sin(0.949*time) );","pixel_eqs_eel":"zoom = zoom + 0.01 * ( sin(2*cos(3*(sqrt(2)-rad)*ang)) + 1 );","warp":" shader_body { \\n  vec2 my_uv_1;\\n  vec2 d_2;\\n  vec3 ret_3;\\n  vec2 tmpvar_4;\\n  tmpvar_4 = (texsize.zw * 4.0);\\n  vec3 tmpvar_5;\\n  tmpvar_5 = (((texture (sampler_blur1, \\n    fract((uv + (vec2(1.0, 0.0) * tmpvar_4)))\\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \\n    fract((uv - (vec2(1.0, 0.0) * tmpvar_4)))\\n  ).xyz * scale1) + bias1));\\n  vec3 tmpvar_6;\\n  tmpvar_6 = (((texture (sampler_blur1, \\n    fract((uv + (vec2(0.0, 1.0) * tmpvar_4)))\\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \\n    fract((uv - (vec2(0.0, 1.0) * tmpvar_4)))\\n  ).xyz * scale1) + bias1));\\n  vec3 tmpvar_7;\\n  tmpvar_7 = ((texture (sampler_blur1, uv).xyz * scale1) + bias1);\\n  d_2 = -(tmpvar_4);\\n  float tmpvar_8;\\n  tmpvar_8 = (d_2 * 4.0).x;\\n  vec2 tmpvar_9;\\n  tmpvar_9.x = tmpvar_5.y;\\n  tmpvar_9.y = tmpvar_6.y;\\n  vec2 tmpvar_10;\\n  tmpvar_10.x = tmpvar_5.x;\\n  tmpvar_10.y = tmpvar_6.x;\\n  vec2 tmpvar_11;\\n  tmpvar_11 = ((uv - (tmpvar_9 * d_2)) - (tmpvar_10 * tmpvar_8));\\n  ret_3.y = texture (sampler_fc_main, (tmpvar_11 - floor(tmpvar_11))).y;\\n  ret_3.y = (ret_3.y + ((\\n    (ret_3.y - tmpvar_7.y)\\n   * 0.042) + -0.0075));\\n  vec2 tmpvar_12;\\n  tmpvar_12.x = tmpvar_5.x;\\n  tmpvar_12.y = tmpvar_6.x;\\n  vec2 tmpvar_13;\\n  tmpvar_13.x = tmpvar_5.z;\\n  tmpvar_13.y = tmpvar_6.z;\\n  my_uv_1 = ((uv - (tmpvar_12 * d_2)) - (tmpvar_13 * tmpvar_8));\\n  ret_3.x = texture (sampler_fc_main, (my_uv_1 - floor(my_uv_1))).x;\\n  ret_3.x = (ret_3.x + ((\\n    (ret_3.x - tmpvar_7.x)\\n   * 0.042) + -0.0075));\\n  vec2 tmpvar_14;\\n  tmpvar_14.x = tmpvar_5.z;\\n  tmpvar_14.y = tmpvar_6.z;\\n  vec2 tmpvar_15;\\n  tmpvar_15.x = tmpvar_5.y;\\n  tmpvar_15.y = tmpvar_6.y;\\n  my_uv_1 = ((uv - (tmpvar_14 * d_2)) - (tmpvar_15 * tmpvar_8));\\n  ret_3.z = texture (sampler_fc_main, (my_uv_1 - floor(my_uv_1))).z;\\n  ret_3.z = (ret_3.z + ((\\n    (ret_3.z - tmpvar_7.z)\\n   * 0.042) + -0.0075));\\n  vec4 tmpvar_16;\\n  tmpvar_16 = texture (sampler_noisevol_hq, (((vec3(0.04, 0.02, 0.02) * my_uv_1.xyy) * (\\n    (q27 * texsize.xyy)\\n   * texsize_noisevol_hq.zww)) + ((time * vec3(2.3, 2.3, 1.8)) * q29)));\\n  if (((ret_3.x > (q21 * q13)) && (ret_3.x <= (q24 * q11)))) {\\n    ret_3.y = (ret_3.y - (tmpvar_16.x * 0.5));\\n  };\\n  if (((ret_3.y > (q22 * q11)) && (ret_3.y <= (q25 * q12)))) {\\n    ret_3.z = (ret_3.z - (tmpvar_16.y * 0.5));\\n  };\\n  if (((ret_3.z > (q23 * q12)) && (ret_3.z <= (q26 * q13)))) {\\n    ret_3.x = (ret_3.x - (tmpvar_16.z * 0.5));\\n  };\\n  vec4 tmpvar_17;\\n  tmpvar_17.w = 1.0;\\n  tmpvar_17.xyz = ret_3;\\n  ret = tmpvar_17.xyz;\\n }","comp":" shader_body { \\n  vec3 ret_1;\\n  vec4 tmpvar_2;\\n  tmpvar_2 = texture (sampler_main, uv);\\n  ret_1 = (((vec3(2.8, 2.8, 1.2) * tmpvar_2.x) + (vec3(2.0, 0.4, 2.0) * tmpvar_2.y)) + (vec3(0.1, 1.3, 1.2) * tmpvar_2.z));\\n  ret_1 = (ret_1 * 0.37);\\n  ret_1 = ((ret_1 * ret_1) * (1.0 + (\\n    clamp (((cos(\\n      (((dot (tmpvar_2.xyz, vec3(0.32, 0.49, 0.29)) * 17.0) + 3.0) + (uv.x * 30.0))\\n    ) * 3.0) - 2.7), 0.0, 1.0)\\n   * 4.0)));\\n  vec4 tmpvar_3;\\n  tmpvar_3.w = 1.0;\\n  tmpvar_3.xyz = ret_1;\\n  ret = tmpvar_3.xyz;\\n }"}')},984:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"gammaadj":2.7,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wrap":0,"darken":1,"wave_a":0.865,"wave_scale":3.75,"wave_smoothing":0,"modwavealphastart":0.4,"modwavealphaend":1.3,"warpanimspeed":0.01,"warpscale":100,"zoomexp":0.32545,"warp":0.01,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0.005,"ob_a":1,"ib_size":0,"ib_r":1,"ib_g":1,"ib_b":1,"ib_a":1,"mv_x":64,"mv_y":9.6,"mv_l":5,"mv_r":0,"mv_g":0,"mv_b":0,"mv_a":0.3},"shapes":[{"baseVals":{"enabled":1,"sides":100,"textured":1,"x":0.37,"rad":100,"ang":3.64425,"r":0,"a":0.1,"g2":0,"a2":0.13,"border_a":1},"init_eqs_eel":"t1 = rand(100)*0.01;\\nt2 = rand(100)*0.01;","frame_eqs_eel":"tex_ang = time*(0.3 + 0.1*t1);\\nrad = rad * (0.9 + 0.2*t2);\\nr = min(1,max(0,r + 0.2*sin(time*0.417 + 1)));\\ng = min(1,max(0,g + 0.2*sin(time*0.391 + 2)));\\nb = min(1,max(0,b + 0.2*sin(time*0.432 + 4)));\\nr2 = min(1,max(0,r2 + 0.2*sin(time*0.657 + 3)));\\ng2 = min(1,max(0,g2 + 0.2*sin(time*0.737 + 5)));\\nb2 = min(1,max(0,b2 + 0.2*sin(time*0.884 + 6)));\\n//a1 = (bass_att);\\na1 = 0.3 + 0.1 * sin(treb_att * .55);\\nmv_l = 3 + 1 * (treb_att * .25);\\n"},{"baseVals":{"enabled":1,"sides":100,"additive":1,"textured":1,"x":0.37,"rad":0.89796,"ang":3.64425,"r":0,"a":0.1,"g2":0,"border_a":0},"init_eqs_eel":"t1 = rand(100)*0.01;\\nt2 = rand(100)*0.01;","frame_eqs_eel":"x = x + 0.05*sin(mid_att*0.15+3);\\ny = y + 0.03*sin(mid_att*0.19+1);\\ntex_ang = bass_att*(0.1 + 0.1*treb_att);\\nrad = rad * (0.9 + 0.6*treb_att);\\n\\n\\n\\nx = x + sin(treb_att * .005);\\ny = y + sin(mid_att * .013);\\na = 0 + (treb * .1);"},{"baseVals":{"enabled":1,"sides":13,"additive":1,"textured":1,"x":0.77,"y":0.43,"rad":0.51386,"ang":4.20974,"g":1,"b":1,"g2":0,"a2":1,"border_a":0},"init_eqs_eel":"t1 = rand(100)*0.01;\\nt2 = rand(100)*0.01;","frame_eqs_eel":"x = x + 0.05*(bass_att*0.07);\\ny = y + 0.03*(bass_att*0.03);\\ntex_ang = mid_att*(0.8 + 0.1*t1);\\nrad = rad * (0.9 + 0.2*mid_att);\\nr = min(1,max(0,r + 0.1*(bass_att*0.417 + 1)));\\ng = min(1,max(0,g + 0.1*(mid_att*0.391 + 2)));\\nb = min(1,max(0,b + 0.1*(treb_att*0.432 + 4)));\\nr2 = min(1,max(0,r2 + 0.1*sin(bass_att*0.457 + 3)));\\ng2 = min(1,max(0,g2 + 0.1*sin(mid_att*0.437 + 5)));\\nb2 = min(1,max(0,b2 + 0.1*sin(treb_att*0.484 + 6)));\\nsides = treb_att;\\n\\nx = x + sin(mid_att * .019);\\ny = y + sin(treb_att * .015);\\nnum_inst = sin(mid_att * .25);\\n\\nr = 0.5 + 0.5*sin(frame*2.5);\\nb = 0.5 + 0.5*sin(frame*0.5 + 2.094);\\ng = 0.5 + 0.5*sin(frame*0.5 + 1.188);"},{"baseVals":{"enabled":1,"sides":3,"additive":1,"textured":1,"y":0.7,"rad":1.33692,"r":0,"g":0.8,"b":1,"a":0.1,"g2":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"x = x + 0.2*sin(treb_att*0.25);\\ny = y + 0.1*sin(treb_att*0.5+2);\\nrot = mid_att * .45;\\n\\nr = min(1,max(0,r + 0.1*(bass_att*0.417 + 1)));\\ng = min(1,max(0,g + 0.1*(mid_att*0.391 + 2)));\\nb = min(1,max(0,b + 0.1*(treb_att*0.432 + 4)));\\nr2 = min(1,max(0,r2 + 0.1*sin(bass_att*0.457 + 3)));\\ng2 = min(1,max(0,g2 + 0.1*sin(mid_att*0.437 + 5)));\\nb2 = min(1,max(0,b2 + 0.1*sin(treb_att*0.484 + 6)));\\nang = sin(treb_att);\\n\\nx = x + sin(mid_att * .016);\\ny = x + sin(treb_att * .015);\\nnum_inst = sin(treb_att * .35);\\n\\nr = 0.5 + 0.5*sin(frame*2.5);\\nb = 0.5 + 0.5*sin(frame*0.5 + 2.094);\\ng = 0.5 + 0.5*sin(frame*0.5 + 1.188);\\n\\n\\nrad = rad + (treb * .001);"}],"waves":[{"baseVals":{"enabled":1,"spectrum":1,"thick":1,"additive":1,"scaling":9.86086},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass_att,1)*3.1415*.01*bass_att);\\nma=ma-(above(treb_att,1)*3.1415*.01*treb_att);\\n\\nmx=mx+(.0002*cos(ma));\\nmy=my+(.0002*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\n//a=(above(bass+mid+treb,.8));\\n//a = bass_att * .35;\\n\\nr = sin(treb+att * .45);\\nb = sin(treb+att * .65);\\ng = sin(treb+att * .25);\\n\\n"},{"baseVals":{"enabled":1,"spectrum":1,"thick":1,"additive":1,"scaling":27.42973},"init_eqs_eel":"","frame_eqs_eel":"//r = min(1,max(0,r + 0.1*(bass_att*0.217 + 1)));\\n//g = min(1,max(0,g + 0.1*(treb_att*0.191 + 2)));\\n//b = min(1,max(0,b + 0.1*sin(mid_att*0.232 + 4)));\\n//r2 = min(1,max(0,r2 + 0.1*sin(bass_att*0.257 + 3)));\\n//g2 = min(1,max(0,g2 + 0.1*sin(treb_att*0.237 + 5)));\\n//b2 = min(1,max(0,b2 + 0.1*sin(mid_att*0.284 + 6)));\\n\\n\\na1 = treb_att * .25;\\na2 = mid_att * .15;\\na3 = treb_att * .25;\\n\\n\\nr = sin(treb_att);\\nb = sin(treb_att);\\ng = sin(treb_att);","point_eqs_eel":"ma=ma+(above(bass_att,1)*3.1415*.01*bass_att);\\nma=ma-(above(treb_att,1)*3.1415*.01*treb_att);\\n\\nmx=mx+(.0002*cos(ma));\\nmy=my+(.0002*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\n//a=(above(bass+mid+treb,.8));\\n//a = bass_att * .35;\\n\\nr = sin(treb+att * .45);\\nb = sin(treb+att * .65);\\ng = sin(treb+att * .25);\\n\\n"},{"baseVals":{"enabled":1,"thick":1,"additive":1,"scaling":6.62306,"r":0.5,"g":0.5,"b":0.5},"init_eqs_eel":"","frame_eqs_eel":"//r = min(1,max(0,r + 0.1*(bass_att*0.217 + 1)));\\n//g = min(1,max(0,g + 0.1*(treb_att*0.191 + 2)));\\n//b = min(1,max(0,b + 0.1*(mid_att*0.232 + 4)));\\nr2 = min(1,max(0,r2 + 0.1*sin(bass_att*0.257 + 3)));\\ng2 = min(1,max(0,g2 + 0.1*sin(treb_att*0.237 + 5)));\\nb2 = min(1,max(0,b2 + 0.1*sin(mid_att*0.284 + 6)));\\na1 = treb_att * .25;\\na2 = mid_att * .15;\\na3 = treb_att * .25;\\n","point_eqs_eel":"ma=ma+(above(bass_att,1)*3.1415*.01*bass_att);\\nma=ma-(above(treb_att,1)*3.1415*.01*treb_att);\\n\\nmx=mx+(.0002*cos(ma));\\nmy=my+(.0002*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\n//a=(above(bass+mid+treb,.8));\\n//a = bass_att * .35;\\n\\nr = sin(treb+att * .45);\\nb = sin(treb+att * .65);\\ng = sin(treb+att * .25);\\n\\n"},{"baseVals":{"enabled":1,"samples":142,"thick":1,"scaling":8.9269,"r":0.6,"g":0},"init_eqs_eel":"","frame_eqs_eel":"//r = min(1,max(0,r + 0.1*(bass_att*0.217 + 1)));\\n//g = min(1,max(0,g + 0.1*(treb_att*0.191 + 2)));\\n//b = min(1,max(0,b + 0.1*(mid_att*0.232 + 4)));\\nr2 = min(1,max(0,r2 + 0.1*sin(bass_att*0.257 + 3)));\\ng2 = min(1,max(0,g2 + 0.1*sin(treb_att*0.237 + 5)));\\nb2 = min(1,max(0,b2 + 0.1*sin(mid_att*0.284 + 6)));\\n\\n\\nr = 255;\\nb = 255;\\ng = 255;","point_eqs_eel":"ma=ma+(above(bass_att,1)*3.1415*.01*bass_att);\\nma=ma-(above(treb_att,1)*3.1415*.01*treb_att);\\n\\nmx=mx+(.0002*cos(ma));\\nmy=my+(.0002*sin(ma));\\n\\nmx=if(above(mx,.9),(.9-mx),mx);\\nmy=if(above(my,.9),(.9-my),my);\\nmx=if(below(mx,.1),(.9+mx),mx);\\nmy=if(below(my,.1),(.9+my),my);\\n\\nx=mx;\\ny=my;\\n\\n//a=(above(bass+mid+treb,.8));\\n//a = bass_att * .35;\\n\\nr = sin(treb+att * .45);\\nb = sin(treb+att * .65);\\ng = sin(treb+att * .25);\\n\\n"}],"init_eqs_eel":"","frame_eqs_eel":"//Variables controling the glitch effect////////////////////////////////////////\\ndecayrate = 0.09;   //How fast the glitch effect decays back to original image\\ntrebresp = 2.8;    //Level of treb needed for effect to take place\\n////////////////////////////////////////////////////////////////////////////////\\n\\n\\ncdecay = pow(decayrate, 30/fps);\\ncount = above(treb, trebresp)*1 + (1-above(treb, 3))*count;\\ncount = count - above(count, cdecay)*cdecay;\\nq29=count;\\nmonitor = q29;\\n\\n\\n\\ndecay = 0;\\n\\ndt = 0.02;\\n\\nh = h + v*dt;\\n\\nv = v*0.986 + a*dt;\\na = -(h - 0.5)*0.4 + sqrt(- min(0,(w1v+w2v)*0.1)) - .175;\\n\\nmonitor = w2;\\n\\n\\nw1 = w1 + w1v*dt;\\nw1v = w1v*0.98 + w1a*dt;\\nw1a = -(w1)*20 - w2a*0.1   + av*30;\\n\\nw2 = w2 + w2v*dt;\\nw2v = w2v*0.98 + w2a*dt;\\nw2a = -(w2-w1)*20;\\n\\nbb = bb*0.99 + bass*0.02;\\nmm = mm*0.99 + mid*0.02;\\ntt = tt*0.99 + treb*0.02;\\n\\nmi = min(min(bb,mm),tt);\\nma = max(max(bb,mm),tt);\\nav = (bb+mm+tt-mi-ma);\\nq5 = av;\\navn = (av-mi)/(ma-mi);\\nav = abs(avo-avn);\\navo = avn;\\n\\nq1 = h*0.8 + 0.12;\\nq2 = (w1);\\nq3 = (w2 + w1);\\nq4 = 0.1+ avo*0.1;\\n\\n\\n\\nwave_r = 0.5 + 0.5*sin(frame*2.5);\\nwave_b = 0.5 + 0.5*sin(frame*0.5 + 1.094);\\nwave_g = 0.5 + 0.5*sin(frame*0.5 + 1.188);","pixel_eqs_eel":"","warp":" shader_body { \\n  vec2 uv_1;\\n  vec3 ret_2;\\n  vec2 tmpvar_3;\\n  tmpvar_3 = ((uv * texsize.xy) * 0.08);\\n  uv_1 = (uv - ((\\n    (sin(tmpvar_3) / cos(tmpvar_3))\\n   * texsize.zw) * (treb * 3.0)));\\n  vec3 tmpvar_4;\\n  tmpvar_4 = (texture (sampler_main, uv_1).xyz + (vec3(dot (texture (sampler_noise_lq, \\n    ((((texsize.xy * texsize_noise_lq.zw).x * uv) * 0.02) + (0.1 * rand_frame).xy)\\n  ), vec4(0.32, 0.49, 0.29, 0.0))) / 30.0));\\n  ret_2 = ((mix (tmpvar_4, \\n    (1.0 - tmpvar_4.zyx)\\n  , vec3(0.01, 0.01, 0.01)) - 0.03) - (0.2 * pow (\\n    (1.0 - rad)\\n  , \\n    (treb * 90.0)\\n  )));\\n  ret_2 = (ret_2 + (ret_2 * (vol * 0.001)));\\n  ret_2 = (ret_2 + (ret_2 * (treb * 0.025)));\\n  ret_2 = (ret_2 + 0.001);\\n  uv_1 = (uv_1 + ((treb_att * 0.001) * texture (sampler_main, uv_1)).xy);\\n  ret_2 = (ret_2 + ((\\n    (texture (sampler_blur3, uv_1).xyz * scale3)\\n   + bias3) * 0.05));\\n  vec4 tmpvar_5;\\n  tmpvar_5.w = 1.0;\\n  tmpvar_5.xyz = ret_2;\\n  ret = tmpvar_5.xyz;\\n }","comp":" shader_body { \\n  vec2 uv_1;\\n  vec3 crisp_2;\\n  vec2 uv3_3;\\n  vec2 uv2_4;\\n  vec3 ret_5;\\n  vec2 tmpvar_6;\\n  vec2 tmpvar_7;\\n  tmpvar_7 = (uv - 0.5);\\n  tmpvar_6 = (tmpvar_7 * aspect.xy);\\n  float tmpvar_8;\\n  tmpvar_8 = (0.1 / (sqrt(\\n    dot (tmpvar_6, tmpvar_6)\\n  ) + 0.05));\\n  vec2 tmpvar_9;\\n  float tmpvar_10;\\n  tmpvar_10 = (ang / 3.14);\\n  tmpvar_9.x = tmpvar_10;\\n  tmpvar_9.y = (tmpvar_8 * 1.5);\\n  uv2_4.y = (tmpvar_9.y + (0.1 * time));\\n  uv2_4.x = (tmpvar_10 + (0.02 * time));\\n  uv3_3.y = (tmpvar_8 + q30);\\n  uv3_3.x = (tmpvar_10 + (time / 32.0));\\n  crisp_2 = ((texture (sampler_main, fract(uv2_4)).xyz + (2.0 * texture (sampler_main, \\n    fract(uv3_3)\\n  ).xyz)) + ((2.0 * \\n    ((texture (sampler_blur2, fract(uv2_4)).xyz * scale2) + bias2)\\n  ) + (2.0 * \\n    ((texture (sampler_blur2, fract(uv3_3)).xyz * scale2) + bias2)\\n  )));\\n  crisp_2 = ((3.0 * crisp_2) * rad);\\n  float tmpvar_11;\\n  tmpvar_11 = clamp ((1.0 - (4.0 * rad)), 0.0, 1.0);\\n  ret_5 = ((crisp_2 + (\\n    ((vec3(1.0, 0.0, 1.0) * uv.y) * pow ((1.0 - rad), 8.0))\\n   * tmpvar_11)) + (tmpvar_11 * texture (sampler_main, fract(uv)).xyz));\\n  uv_1 = ((tmpvar_7 * aspect.xy) + 0.5);\\n  vec2 tmpvar_12;\\n  tmpvar_12 = (1.0 - uv_1);\\n  vec3 tmpvar_13;\\n  tmpvar_13 = (texture (sampler_main, uv_1).xyz + (2.0 * (\\n    (texture (sampler_blur2, uv_1).xyz * scale2)\\n   + bias2)));\\n  vec3 tmpvar_14;\\n  tmpvar_14 = (texture (sampler_main, tmpvar_12).xyz + (2.0 * (\\n    (texture (sampler_blur2, tmpvar_12).xyz * scale2)\\n   + bias2)));\\n  vec3 tmpvar_15;\\n  tmpvar_15 = mix (ret_5, mix ((tmpvar_13 * tmpvar_14), (tmpvar_13 + tmpvar_14), vec3((q29 * 0.16))), vec3((q29 * 0.5)));\\n  vec3 tmpvar_16;\\n  tmpvar_16 = mix (tmpvar_15, (1.0 - tmpvar_15), ((q29 * tmpvar_15) * (rad * \\n    (2.0 - q29)\\n  )));\\n  ret_5 = (tmpvar_16 * (tmpvar_16 + (treb * 0.001)));\\n  vec4 tmpvar_17;\\n  tmpvar_17.w = 1.0;\\n  tmpvar_17.xyz = ret_5;\\n  ret = tmpvar_17.xyz;\\n }"}')},2158:e=>{e.exports=JSON.parse('{"version":1,"baseVals":{"rating":5,"gammaadj":1,"decay":0.94,"echo_zoom":0.9998,"echo_alpha":0.4999,"echo_orient":3,"wave_mode":1,"additivewave":1,"wave_dots":1,"wave_brighten":0,"wave_a":1.254574,"wave_scale":0.45029,"wave_smoothing":0,"zoomexp":1.008151,"zoom":0.659411,"warp":0.01,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"ob_size":0.005,"ob_r":1,"ob_a":1,"ib_size":0.005,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":0.9,"mv_x":64,"mv_y":48,"mv_l":0,"mv_r":0,"mv_g":0.7,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"warp=0;\\nle=1+.5+2*sin(bass_att);\\nbpulse=band(above(le,bth),above(le-bth,bblock));\\nbblock=le-bth;\\nbth=if(above(le,bth),le+114/(le+10)-7.407,\\nbth+bth*.07/(bth-12)+below(bth,2.7)*.1*(2.7-bth));\\nbth=if(above(bth,6),6,bth);\\nbres=bpulse*sin(pulse+le*.5) + bnot(bpulse)*bres;\\n\\nle=1+.5+2*sin(treb_att);\\ntpulse=band(above(le,tth),above(le-tth,tblock));\\ntblock=le-tth;\\ntth=if(above(le,tth),le+114/(le+10)-7.407,\\ntth+tth*.07/(tth-12)+below(tth,2.7)*.1*(2.7-tth));\\ntth=if(above(tth,6),6,tth);\\ntres=tpulse*sin(pulse+le*.5) + bnot(tpulse)*tres;\\n\\nle=1+.5+2*sin(mid_att);\\nmpulse=band(above(le,mth),above(le-mth,mblock));\\nmblock=le-mth;\\nmth=if(above(le,mth),le+114/(le+10)-7.407,\\nmth+mth*.07/(mth-12)+below(mth,2.7)*.1*(2.7-mth));\\nmth=if(above(mth,6),6,mth);\\nmres=mpulse*sin(pulse+le*.5) + bnot(mpulse)*mres;\\n\\n\\n\\npulse=if(above(abs(pulse),3.14),-3.14,pulse+(bth+mth+tth)*.003);\\nq1=bres;\\nq2=tres;\\nq3=mres;\\nq4=sin(pulse);\\n\\nmod_state=(above(q1,0)+above(q2,0)+above(q3,0))*(1+above(q4,0));\\nccl=ccl+tpulse+mpulse-bpulse;\\nq5=cos(pulse*(.5+.1*mod_state));\\nq6=sin(pulse*(.5+pow(.25,mod_state)));\\nq7=mod_state;\\nq8=ccl;\\nob_r=.5+.5*cos(q1+q7);\\nob_g=.5+.5*cos(q2*3.14+q7);\\nob_b=.5+.5*cos(q3*2+sin(time*.0816));\\nib_size=.025+.02*q2;\\nob_size=.03+.02*q3-.002*q7;\\nwave_r=.5+.5*sin(q1*q7+time*2.183);\\nwave_g=.5+.5*sin(q2*3+time*1.211);\\nwave_b=.5+.5*sin(q3+time*1.541);\\n\\nob_a=.8+.2*q2;\\nzoom=zoom+.01*q4;","pixel_eqs_eel":"grid=pow(sin(rad*q6*q2+x*y*q6*q3)*2,1+q7%5)%2;\\nrot=bnot(grid)+grid*q4;\\nsx=sx+sin((q2+.5)*x)*.003;\\nsy=sy+sin((q1+3.4)*y)*.003;\\nzoom=zoom+.11*cos(rad*3.14)*q4;","warp":"","comp":""}')},7927:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":3,"wave_mode":2,"wrap":0,"wave_a":0.001,"wave_scale":5.819,"wave_mystery":-0.38,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"sides":100,"rad":0.16446,"g":1,"b":1,"a":0,"r2":1,"b2":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"a = if(above(bass,2.5),1,0);"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"thick":1},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"y = sample;\\nx = (value1+value2)*.003;\\na = (value1+value2)*.1;\\nr = .5+.3*sin(sample*10+time);\\ng = .5+.3*cos(sample*10-time*1.334);\\nb = .5+.3*sin(sample*10+time*.998);"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"warp = 0;\\nwave_r = wave_r + .4*sin(time*.333)+bass_att*.2;\\nwave_g = wave_g + .4*sin(time*.555)+treb_att*.2;\\nwave_b = wave_b + .4*sin(time*.444)+mid_att*.2;","pixel_eqs_eel":"","warp":" shader_body { \\n  vec2 muv_1;\\n  vec3 ret_2;\\n  float tmpvar_3;\\n  tmpvar_3 = (2.0 * bass_att);\\n  muv_1.x = (uv.x - ((\\n    ((0.01 * cos((\\n      (uv.x * (5.0 + tmpvar_3))\\n     + time))) + (0.01 * cos((\\n      (uv.y * (5.0 + tmpvar_3))\\n     + time))))\\n   * 0.5) * treb_att));\\n  float tmpvar_4;\\n  tmpvar_4 = (2.0 * mid_att);\\n  muv_1.y = (uv.y + ((\\n    ((0.01 * sin((\\n      (uv.x * (5.0 + tmpvar_4))\\n     + time))) - (0.01 * cos((\\n      (uv.y * (5.0 + tmpvar_4))\\n     + time))))\\n   * 0.5) * bass_att));\\n  vec3 tmpvar_5;\\n  tmpvar_5 = ((texture (sampler_blur2, muv_1).xyz * scale2) + bias2);\\n  vec4 tmpvar_6;\\n  tmpvar_6 = texture (sampler_pw_main, muv_1);\\n  ret_2.x = (tmpvar_6.x + (tmpvar_5.x * (bass_att * 0.05)));\\n  ret_2.y = (tmpvar_6.y + (tmpvar_5.y * (treb_att * 0.05)));\\n  ret_2.z = (tmpvar_6.z + (tmpvar_5.z * (mid_att * 0.05)));\\n  if ((ret_2.x > 0.9)) {\\n    ret_2.x = 0.0;\\n  };\\n  if ((ret_2.y > 0.9)) {\\n    ret_2.y = 0.0;\\n  };\\n  if ((ret_2.z > 0.9)) {\\n    ret_2.z = 0.0;\\n  };\\n  vec4 tmpvar_7;\\n  tmpvar_7.w = 1.0;\\n  tmpvar_7.xyz = ret_2;\\n  ret = tmpvar_7.xyz;\\n }","comp":" shader_body { \\n  vec3 ret1_1;\\n  vec2 uv1_2;\\n  vec3 ret_3;\\n  vec4 tmpvar_4;\\n  tmpvar_4 = texture (sampler_main, uv);\\n  ret_3 = (tmpvar_4.xyz * (0.6 + (0.3 * \\n    sin(((uv.x * 10.0) + time))\\n  )));\\n  vec2 tmpvar_5;\\n  tmpvar_5.x = (texture (sampler_main, (uv - vec2(0.001, 0.0))).xyz - texture (sampler_main, (uv + vec2(0.001, 0.0))).xyz).x;\\n  tmpvar_5.y = (texture (sampler_main, (uv - vec2(0.0, 0.001))).xyz - texture (sampler_main, (uv + vec2(0.0, 0.001))).xyz).x;\\n  uv1_2 = ((0.5 * cos(\\n    (((uv - 0.5) * 1.5) + 1.6)\\n  )) - (3.0 * tmpvar_5));\\n  ret1_1 = ((0.3 * dot (tmpvar_4.xyz, vec3(0.32, 0.49, 0.29))) + ((\\n    clamp ((0.01 / sqrt(dot (uv1_2, uv1_2))), 0.0, 1.0)\\n   * \\n    mix (vec3(dot (((texture (sampler_blur2, uv).xyz * scale2) + bias2), vec3(0.32, 0.49, 0.29))), ret_3, pow (ret_3, vec3((0.05 + (mid_att * 0.03)))))\\n  ) * (\\n    (4.0 + bass)\\n   + \\n    (mid + treb_att)\\n  )));\\n  ret_3 = ret1_1;\\n  vec4 tmpvar_6;\\n  tmpvar_6.w = 1.0;\\n  tmpvar_6.xyz = ret1_1;\\n  ret = tmpvar_6.xyz;\\n }"}')},9047:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.995,"echo_zoom":1,"echo_orient":1,"wave_mode":5,"wave_brighten":0,"wrap":0,"wave_a":100,"wave_scale":0.721,"wave_smoothing":0.5,"modwavealphastart":0.5,"modwavealphaend":1,"fshader":1,"dx":0.00001,"dy":0.00001,"warp":0.01,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"ob_size":0,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_x":0,"mv_y":0,"mv_l":1,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"wave_r = 0.5 + 0.5*sin(6*time);\\nwave_g = 0.5 + 0.5*sin(4.1*time);\\nwave_b = -1 + (1-wave_r + 1-wave_g);\\nwarp = 0;","pixel_eqs_eel":"thresh = above(bass_att,thresh)*2+(1-above(bass_att,thresh))*((thresh-1.3)*0.96+1.3);\\ndx_r = equal(thresh,2)*0.015*sin(5*time)+(1-equal(thresh,2))*dx_r;\\ndy_r = equal(thresh,2)*0.015*sin(6*time)+(1-equal(thresh,2))*dy_r;\\n\\n\\nxs = above(sin(12*dx_r*bass),0)*(dy_r*sin(2*rad)) + \\nbelow(sin(12*dx_r*bass),0)*(cos(time)*dx_r*sin(0.6*rad));\\n\\nzoom = zoom + abs(12*xs);\\nrot = rot + 5*xs*cos(1-xs*rad*12*dx_r);\\ndx = dx + dx_r;\\ndy = dy + dy_r;","warp":" shader_body { \\n  vec2 my_uv_1;\\n  vec3 ret_2;\\n  vec2 tmpvar_3;\\n  tmpvar_3 = (vec2(1280.0, 1024.0) * texsize.zw);\\n  float tmpvar_4;\\n  vec2 tmpvar_5;\\n  tmpvar_5 = (uv + vec2(0.005, 0.0));\\n  vec2 tmpvar_6;\\n  tmpvar_6 = (uv - vec2(0.005, 0.0));\\n  tmpvar_4 = (((\\n    (texture (sampler_blur2, tmpvar_5).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, tmpvar_6).xyz * scale2)\\n   + bias2)).x * tmpvar_3.x);\\n  float tmpvar_7;\\n  vec2 tmpvar_8;\\n  tmpvar_8 = (uv + vec2(0.0, 0.005));\\n  vec2 tmpvar_9;\\n  tmpvar_9 = (uv - vec2(0.0, 0.005));\\n  tmpvar_7 = (((\\n    (texture (sampler_blur2, tmpvar_8).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, tmpvar_9).xyz * scale2)\\n   + bias2)).x * tmpvar_3.y);\\n  vec2 tmpvar_10;\\n  tmpvar_10.x = tmpvar_4;\\n  tmpvar_10.y = tmpvar_7;\\n  vec2 tmpvar_11;\\n  tmpvar_11.x = (((\\n    (texture (sampler_blur2, tmpvar_5).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, tmpvar_6).xyz * scale2)\\n   + bias2)).x * tmpvar_3.x);\\n  tmpvar_11.y = (((\\n    (texture (sampler_blur2, tmpvar_8).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, tmpvar_9).xyz * scale2)\\n   + bias2)).x * tmpvar_3.y);\\n  ret_2.x = texture (sampler_fw_main, ((uv - (tmpvar_10 * 0.01)) + (tmpvar_11 * 0.003))).x;\\n  vec4 tmpvar_12;\\n  tmpvar_12 = texture (sampler_blur3, uv);\\n  ret_2.x = (ret_2.x + ((ret_2.x - \\n    ((tmpvar_12.xyz * scale3) + bias3)\\n  .x) * 0.1));\\n  ret_2.x = (ret_2.x + 0.004);\\n  vec2 tmpvar_13;\\n  tmpvar_13.x = tmpvar_7;\\n  tmpvar_13.y = -(tmpvar_4);\\n  my_uv_1 = (uv + ((tmpvar_13 * 0.05) * (1.2 - \\n    ((tmpvar_12.xyz * scale3) + bias3)\\n  .y)));\\n  ret_2.z = texture (sampler_fw_main, my_uv_1).z;\\n  vec2 x_14;\\n  x_14 = (my_uv_1 - uv);\\n  ret_2.z = (ret_2.z + ((\\n    ((ret_2.z - ((texture (sampler_blur1, uv).xyz * scale1) + bias1).z) * sqrt(dot (x_14, x_14)))\\n   * 180.0) / sqrt(\\n    dot (tmpvar_3, tmpvar_3)\\n  )));\\n  ret_2.z = (ret_2.z * 0.8);\\n  ret_2.z = (ret_2.z + 0.004);\\n  vec2 tmpvar_15;\\n  tmpvar_15.x = -(tmpvar_7);\\n  tmpvar_15.y = tmpvar_4;\\n  my_uv_1 = (tmpvar_15 * 0.045);\\n  vec2 tmpvar_16;\\n  tmpvar_16.x = (((\\n    (texture (sampler_blur2, (uv + vec2(0.01, 0.0))).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, (uv - vec2(0.01, 0.0))).xyz * scale2)\\n   + bias2)).y * tmpvar_3.x);\\n  tmpvar_16.y = (((\\n    (texture (sampler_blur2, (uv + vec2(0.0, 0.01))).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, (uv - vec2(0.0, 0.01))).xyz * scale2)\\n   + bias2)).y * tmpvar_3.y);\\n  my_uv_1 = (my_uv_1 + (uv - (tmpvar_16 * 0.03)));\\n  ret_2.y = texture (sampler_fw_main, my_uv_1).y;\\n  ret_2.y = (ret_2.y + ((\\n    (ret_2.y - ((texture (sampler_blur3, my_uv_1).xyz * scale3) + bias3).y)\\n   * 0.1) + 0.01));\\n  vec4 tmpvar_17;\\n  tmpvar_17.w = 1.0;\\n  tmpvar_17.xyz = ret_2;\\n  ret = tmpvar_17.xyz;\\n }","comp":" shader_body { \\n  vec3 ret_1;\\n  ret_1 = texture (sampler_main, uv).xyz;\\n  ret_1 = (ret_1 * hue_shader);\\n  vec3 tmpvar_2;\\n  tmpvar_2 = mix (ret_1, vec3(dot (ret_1, vec3(0.32, 0.49, 0.29))), vec3(0.5, 1.0, 0.1));\\n  ret_1 = tmpvar_2;\\n  vec4 tmpvar_3;\\n  tmpvar_3.w = 1.0;\\n  tmpvar_3.xyz = tmpvar_2;\\n  ret = tmpvar_3.xyz;\\n }"}')},2813:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":5,"gammaadj":1.7,"echo_zoom":1.16936,"wave_mode":2,"wave_dots":1,"wave_brighten":0,"wave_a":0.001,"wave_scale":0.011726,"wave_smoothing":0.9,"zoom":0.999902,"warp":0.01,"wave_r":0.5,"wave_g":0.4,"wave_b":0.3,"ob_size":0.0065,"ib_size":0.26,"mv_x":0,"mv_y":43.199997,"mv_l":1,"mv_g":0.91,"mv_b":0.71,"mv_a":0},"shapes":[{"baseVals":{"sides":5,"textured":1,"rad":1.06779,"ang":0.753982,"tex_zoom":0.779769,"g":1,"b":1,"r2":1,"b2":1,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"ang=sin(q1*0.15);\\nx=sin(q1*0.5) * 0.05 + 0.5;\\ny=cos(q1*0.63)* 0.05 + 0.5"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":5,"additive":1,"rad":0.038091,"g":1,"b":1,"g2":0.6,"b2":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"tm=q1;\\n\\nxp=0;\\nyp=0.1;\\nzp=0;\\n\\n//wrist movement;\\nang=sin(tm*2 )*0.5 +0.5;\\n\\nxq=xp;\\nsinang=sin(ang);cosang=cos(ang);\\nyq=yp*sinang + zp*cosang;\\nzq=yp*cosang - zp*sinang;\\nyq=yp;\\nzq=zp;\\n\\nang=tm*8;\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq*sinang + yq*cosang;\\nyp=xq*cosang - yq*sinang;\\nzp=zq;\\n\\n//forearm movement;\\nzp=zp-0.3;\\nang=3.14 + sin(tm*2 - 0.5)*1.5;\\nsinang=sin(ang);cosang=cos(ang);\\nxq=xp;\\nyq=yp*sinang + zp*cosang;\\nzq=yp*cosang - zp*sinang;\\n\\n//upper arm twist\\nang=-1.0 + cos(tm*3.1 + 0.5);\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq*sinang + yq*cosang;\\nyp=xq*cosang - yq*sinang;\\nzp=zq;\\n\\n//upper arm outward;\\nzp=zp-0.35;\\nang=cos(tm*2.3)*1.75 - 1.05;\\nsinang=sin(ang);cosang=cos(ang);\\nxq=xp*sinang + zp*cosang;\\nyq=yp;\\nzq=xp*cosang - zp*sinang;\\n\\n//upper arm up down;\\nang=cos(tm)*0.5 - 0.5;\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq;\\nyp=yq*cosang - zq*sinang;\\nzp=yq*sinang + zq*cosang;\\n\\n//xp=xq;yp=yq;zp=zq;\\n\\n\\n//project into screenspace and draw on screen\\nzp=zp+2;\\nxs=xp/zp;\\nys=yp/zp;\\n\\nx=xs+0.5;\\ny=ys*1.3+0.5;\\n\\n\\n\\n"}],"waves":[{"baseVals":{"enabled":1,"r":0.1,"b":0.7},"init_eqs_eel":"","frame_eqs_eel":"t1=sin(time)*0.5+0.5;\\nt2=sin(time+2.1)*0.5+0.5;\\nt3=sin(time+4.2)*0.5+0.5;\\n\\nt4=sin(time+1.1)*0.5+0.5;\\nt5=sin(time+3.1)*0.5+0.5;\\nt6=sin(time+5.2)*0.5+0.5;","point_eqs_eel":"n=sample*6.283;\\nphs=-sample * 0.2;\\ntm=q1 + phs;\\n\\nflip=flip+1;\\nflip=flip*below(flip,2);\\n\\nxp=0;\\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\\nzp=0;\\n\\n//wrist movement;\\nang=sin(tm*2 )*0.5 +0.5;\\n\\nxq=xp;\\nsinang=sin(ang);cosang=cos(ang);\\nyq=yp*sinang + zp*cosang;\\nzq=yp*cosang - zp*sinang;\\nyq=yp;\\nzq=zp;\\n\\nang=tm*8;\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq*sinang + yq*cosang;\\nyp=xq*cosang - yq*sinang;\\nzp=zq;\\n\\n//forearm movement;\\nzp=zp-0.3;\\nang=3.14 + sin(tm*2 - 0.5)*1.5;\\nsinang=sin(ang);cosang=cos(ang);\\nxq=xp;\\nyq=yp*sinang + zp*cosang;\\nzq=yp*cosang - zp*sinang;\\n\\n//upper arm twist\\nang=-1.0 + cos(tm*3.1 + 0.5);\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq*sinang + yq*cosang;\\nyp=xq*cosang - yq*sinang;\\nzp=zq;\\n\\n//upper arm outward;\\nzp=zp-0.35;\\nang=cos(tm*2.3)*1.75 - 1.05;\\nsinang=sin(ang);cosang=cos(ang);\\nxq=xp*sinang + zp*cosang;\\nyq=yp;\\nzq=xp*cosang - zp*sinang;\\n\\n//upper arm up down;\\nang=cos(tm)*0.5 - 0.5;\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq;\\nyp=yq*cosang - zq*sinang;\\nzp=yq*sinang + zq*cosang;\\n\\n//xp=xq;yp=yq;zp=zq;\\n\\n\\n//project into screenspace and draw on screen\\nzp=zp+2;\\nxs=xp/zp;\\nys=yp/zp;\\n\\nx=xs+0.5;\\ny=ys*1.3+0.5;\\n\\n\\na=if( equal(q8,1) , (1-sample) , sample);\\na=a*a;\\n\\nb=b+pow(1-sample,2)*0.3;\\n\\n\\n\\nr1=t1;\\ng1=t2;\\nb1=t3;\\nr2=t4;\\ng2=t5;\\nb2=t6;\\n\\nr=r1*flip + r2*(1-flip);\\ng=g1*flip + g2*(1-flip);\\nb=b1*flip + b2*(1-flip);"},{"baseVals":{"enabled":1,"r":0.2,"b":0.6},"init_eqs_eel":"","frame_eqs_eel":"t1=sin(time)*0.5+0.5;\\nt2=sin(time+2.1)*0.5+0.5;\\nt3=sin(time+4.2)*0.5+0.5;\\n\\nt4=sin(time+1.1)*0.5+0.5;\\nt5=sin(time+3.1)*0.5+0.5;\\nt6=sin(time+5.2)*0.5+0.5;","point_eqs_eel":"n=sample*6.283;\\nphs=-sample * 0.2;\\ntm=q1 + phs;\\n\\nflip=flip+1;\\nflip=flip*below(flip,2);\\n\\nxp=0;\\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2 +0.1;\\nyp=-yp;\\nzp=0;\\n\\n//wrist movement;\\nang=sin(tm*2)*0.5 +0.5;\\n\\nsinang=sin(ang);cosang=cos(ang);\\nxq=xp;\\nyq=yp*sinang + zp*cosang;\\nzq=yp*cosang - zp*sinang;\\nyq=yp;\\nzq=zp;\\n\\nang=tm*8;\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq*sinang + yq*cosang;\\nyp=xq*cosang - yq*sinang;\\nzp=zq;\\n\\n//forearm movement;\\nzp=zp-0.3;\\nang=3.14 + sin(tm*2 - 0.5)*1.5;\\nsinang=sin(ang);cosang=cos(ang);\\nxq=xp;\\nyq=yp*sinang + zp*cosang;\\nzq=yp*cosang - zp*sinang;\\n\\n//upper arm twist\\nang=-1.0 + cos(tm*3.1 + 0.5);\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq*sinang + yq*cosang;\\nyp=xq*cosang - yq*sinang;\\nzp=zq;\\n\\n//upper arm outward;\\nzp=zp-0.35;\\nang=cos(tm*2.3)*1.75 - 1.05;\\nsinang=sin(ang);cosang=cos(ang);\\nxq=xp*sinang + zp*cosang;\\nyq=yp;\\nzq=xp*cosang - zp*sinang;\\n\\n//upper arm up down;\\nang=cos(tm)*0.5 - 0.5;\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq;\\nyp=yq*cosang - zq*sinang;\\nzp=yq*sinang + zq*cosang;\\n\\n//xp=xq;yp=yq;zp=zq;\\n\\n\\n//project into screenspace and draw on screen\\nzp=zp+2;\\nxs=xp/zp;\\nys=yp/zp;\\n\\nx=xs+0.5;\\ny=ys*1.3+0.5;\\n\\n\\na=if( equal(q8,1) , (1-sample) , sample);\\na=a*a;\\n\\n\\nb=b+pow(1-sample,2)*0.3;\\n\\nr1=t1;\\ng1=t2;\\nb1=t3;\\nr2=t4;\\ng2=t5;\\nb2=t6;\\n\\nr=r1*flip + r2*(1-flip);\\ng=g1*flip + g2*(1-flip);\\nb=b1*flip + b2*(1-flip);"},{"baseVals":{"r":0.1,"b":0.7,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"t1=sin(time)*0.5+0.5;\\nt2=sin(time+2.1)*0.5+0.5;\\nt3=sin(time+4.2)*0.5+0.5;\\n\\nt4=sin(time+1.1)*0.5+0.5;\\nt5=sin(time+3.1)*0.5+0.5;\\nt6=sin(time+5.2)*0.5+0.5;","point_eqs_eel":"n=sample*6.283;\\nphs=-sample * 0.2;\\ntm=q1 + phs;\\n\\nflip=flip+1;\\nflip=flip*below(flip,2);\\n\\nxp=0;\\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\\nzp=0;\\n\\n//wrist movement;\\nang=sin(tm*2 )*0.5 +0.5;\\n\\nxq=xp;\\nsinang=sin(ang);cosang=cos(ang);\\nyq=yp*sinang + zp*cosang;\\nzq=yp*cosang - zp*sinang;\\nyq=yp;\\nzq=zp;\\n\\nang=tm*8;\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq*sinang + yq*cosang;\\nyp=xq*cosang - yq*sinang;\\nzp=zq;\\n\\n//forearm movement;\\nzp=zp-0.3;\\nang=3.14 + sin(tm*2 - 0.5)*1.5;\\nsinang=sin(ang);cosang=cos(ang);\\nxq=xp;\\nyq=yp*sinang + zp*cosang;\\nzq=yp*cosang - zp*sinang;\\n\\n//upper arm twist\\nang=-1.0 + cos(tm*3.1 + 0.5);\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq*sinang + yq*cosang;\\nyp=xq*cosang - yq*sinang;\\nzp=zq;\\n\\n//upper arm outward;\\nzp=zp-0.35;\\nang=cos(tm*2.3)*1.75 - 1.05;\\nsinang=sin(ang);cosang=cos(ang);\\nxq=xp*sinang + zp*cosang;\\nyq=yp;\\nzq=xp*cosang - zp*sinang;\\n\\n//upper arm up down;\\nang=cos(tm)*0.5 - 0.5;\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq;\\nyp=yq*cosang - zq*sinang;\\nzp=yq*sinang + zq*cosang;\\n\\n//xp=xq;yp=yq;zp=zq;\\n\\n\\n//project into screenspace and draw on screen\\nzp=zp+2;\\nxs=-xp/zp;\\nys=yp/zp;\\n\\nx=xs+0.5;\\ny=ys*1.3+0.5;\\n\\n\\na=if( equal(q8,1) , (1-sample) , sample);\\na=a*a;\\n\\nb=b+pow(1-sample,2)*0.3;\\n\\n\\n\\nr1=t1;\\ng1=t2;\\nb1=t3;\\nr2=t4;\\ng2=t5;\\nb2=t6;\\n\\nr=r1*flip + r2*(1-flip);\\ng=g1*flip + g2*(1-flip);\\nb=b1*flip + b2*(1-flip);"},{"baseVals":{"r":0.2,"b":0.6,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"t1=sin(time)*0.5+0.5;\\nt2=sin(time+2.1)*0.5+0.5;\\nt3=sin(time+4.2)*0.5+0.5;\\n\\nt4=sin(time+1.1)*0.5+0.5;\\nt5=sin(time+3.1)*0.5+0.5;\\nt6=sin(time+5.2)*0.5+0.5;","point_eqs_eel":"n=sample*6.283;\\nphs=-sample * 0.2;\\ntm=q1 + phs;\\n\\nflip=flip+1;\\nflip=flip*below(flip,2);\\n\\nxp=0;\\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2 +0.1;\\nyp=-yp;\\nzp=0;\\n\\n//wrist movement;\\nang=sin(tm*2)*0.5 +0.5;\\n\\nsinang=sin(ang);cosang=cos(ang);\\nxq=xp;\\nyq=yp*sinang + zp*cosang;\\nzq=yp*cosang - zp*sinang;\\nyq=yp;\\nzq=zp;\\n\\nang=tm*8;\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq*sinang + yq*cosang;\\nyp=xq*cosang - yq*sinang;\\nzp=zq;\\n\\n//forearm movement;\\nzp=zp-0.3;\\nang=3.14 + sin(tm*2 - 0.5)*1.5;\\nsinang=sin(ang);cosang=cos(ang);\\nxq=xp;\\nyq=yp*sinang + zp*cosang;\\nzq=yp*cosang - zp*sinang;\\n\\n//upper arm twist\\nang=-1.0 + cos(tm*3.1 + 0.5);\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq*sinang + yq*cosang;\\nyp=xq*cosang - yq*sinang;\\nzp=zq;\\n\\n//upper arm outward;\\nzp=zp-0.35;\\nang=cos(tm*2.3)*1.75 - 1.05;\\nsinang=sin(ang);cosang=cos(ang);\\nxq=xp*sinang + zp*cosang;\\nyq=yp;\\nzq=xp*cosang - zp*sinang;\\n\\n//upper arm up down;\\nang=cos(tm)*0.5 - 0.5;\\nsinang=sin(ang);cosang=cos(ang);\\nxp=xq;\\nyp=yq*cosang - zq*sinang;\\nzp=yq*sinang + zq*cosang;\\n\\n//xp=xq;yp=yq;zp=zq;\\n\\n\\n//project into screenspace and draw on screen\\nzp=zp+2;\\nxs=-xp/zp;\\nys=yp/zp;\\n\\nx=xs+0.5;\\ny=ys*1.3+0.5;\\n\\n\\na=if( equal(q8,1) , (1-sample) , sample);\\na=a*a;\\n\\n\\nb=b+pow(1-sample,2)*0.3;\\n\\nr1=t1;\\ng1=t2;\\nb1=t3;\\nr2=t4;\\ng2=t5;\\nb2=t6;\\n\\nr=r1*flip + r2*(1-flip);\\ng=g1*flip + g2*(1-flip);\\nb=b1*flip + b2*(1-flip);"}],"init_eqs_eel":"","frame_eqs_eel":"movement = movement + 0.01*(bass+bass_att) + 0.001*pow(bass+1,3);\\nq1 = movement;\\nmonitor =q1;","pixel_eqs_eel":"","warp":" shader_body { \\n  vec3 ret_1;\\n  ret_1 = texture (sampler_main, uv).xyz;\\n  vec2 tmpvar_2;\\n  tmpvar_2 = (normalize((uv - uv_orig)) * texsize.zw);\\n  vec4 tmpvar_3;\\n  tmpvar_3.w = 0.0;\\n  tmpvar_3.xyz = ret_1;\\n  vec4 tmpvar_4;\\n  tmpvar_4.w = 0.0;\\n  tmpvar_4.xyz = max (tmpvar_3, (texture (sampler_main, (uv - tmpvar_2)) * 0.9)).xyz;\\n  vec4 tmpvar_5;\\n  tmpvar_5.w = 0.0;\\n  tmpvar_5.xyz = max (tmpvar_4, (texture (sampler_main, (uv + tmpvar_2)) * 0.97)).xyz;\\n  vec4 tmpvar_6;\\n  tmpvar_6.w = 0.0;\\n  tmpvar_6.xyz = max (tmpvar_5, (texture (sampler_main, (uv + \\n    (tmpvar_2 * 2.0)\\n  )) * 0.97)).xyz;\\n  ret_1 = (max (tmpvar_6, (texture (sampler_main, \\n    (uv + (tmpvar_2 * 3.0))\\n  ) * 0.9)).xyz * 0.92);\\n  vec4 tmpvar_7;\\n  tmpvar_7.w = 1.0;\\n  tmpvar_7.xyz = ret_1;\\n  ret = tmpvar_7.xyz;\\n }","comp":" shader_body { \\n  vec2 uv_1;\\n  vec3 ret_2;\\n  uv_1 = (0.05 + (0.9 * uv));\\n  ret_2 = (abs((\\n    ((texture (sampler_blur1, uv_1).xyz * scale1) + bias1)\\n   - texture (sampler_main, uv_1).xyz)) * 6.0);\\n  ret_2 = (ret_2 * 1.333);\\n  vec4 tmpvar_3;\\n  tmpvar_3.w = 1.0;\\n  tmpvar_3.xyz = ret_2;\\n  ret = tmpvar_3.xyz;\\n }"}')},4900:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.995,"echo_zoom":1.007,"echo_orient":3,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"wave_a":1.413,"wave_scale":0.418,"wave_smoothing":0,"wave_mystery":-0.66,"modwavealphastart":2,"modwavealphaend":2,"warpanimspeed":0.626,"warpscale":8.642,"zoomexp":7.10084,"zoom":0.99951,"warp":0.09014,"wave_r":0,"wave_g":0,"wave_x":0.24,"wave_y":0.44,"ob_size":0,"ob_a":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":48,"additive":1,"rad":0.0277,"ang":6.03186,"tex_ang":6.03186,"tex_zoom":0.6839,"r":0,"g":1,"a2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"x = q3;\\ny = q4;\\nrad = q5;\\n\\n\\nx = 0.5 + (x-0.5)/q2;\\ny = 0.5 + (y-0.5)/q1;\\n"},{"baseVals":{"enabled":1,"sides":48,"additive":1,"rad":0.0277,"ang":6.03186,"tex_ang":6.03186,"tex_zoom":0.6839,"r":0,"b":1,"g2":0,"b2":1,"a2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"x = q6;\\ny = q7;\\nrad = q8;\\n\\nx = 0.5 + (x-0.5)/q2;\\ny = 0.5 + (y-0.5)/q1;\\n"},{"baseVals":{"sides":48,"rad":0.0277,"ang":6.03186,"tex_ang":6.03186,"tex_zoom":0.6839,"r":0,"g":1,"a2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"x = q9;\\ny = q10;\\nrad = q11;\\n\\nx = 0.5 + (x-0.5)/q2;\\ny = 0.5 + (y-0.5)/q1;\\n"},{"baseVals":{"sides":48,"additive":1,"thickoutline":1,"rad":0.0277,"ang":6.03186,"tex_ang":6.03186,"tex_zoom":0.6839,"r":0,"g":1,"a":0,"border_a":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"x = q12;\\ny = q13;\\nrad = q14;\\n\\nx = 0.5 + (x-0.5)/q2;\\ny = 0.5 + (y-0.5)/q1;\\n"}],"waves":[{"baseVals":{"enabled":1,"thick":1,"additive":1,"scaling":2.0231,"smoothing":0,"g":0,"b":0},"init_eqs_eel":"t2 = 0;\\nt3 = 0;\\nt4 = 0;\\ncl = 0;","frame_eqs_eel":"vol = bass*8 + mid*5 + treb*3;\\nm = m*0.97 + vol*0.08;\\nmonitor = vol;\\nbeat = above(vol,res)*above(vol,m)*above(vol,16);\\ndiff = (1-beat)*diff + beat*(vol-res);\\nres = beat*(vol + m*0.04) + (1-beat)*(res -  (0.1+diff*0.02)*60/fps);\\nres = max(0,res);\\n\\na = beat;","point_eqs_eel":"tt3 = tt3*0.6 + (value1)*1;\\ntt2 = tt2*0.7 + tt3*0.2;\\ntt1 = tt1*0.8 + tt2*0.1;\\nd = d*0.9 + tt1*0.2;\\n\\ny = 0.5 + d*sample*(1-sample)*2;\\nx =  -0.05 + sample*1.1;"},{"baseVals":{"spectrum":1,"g":0,"b":0,"enabled":0},"init_eqs_eel":"chance = 0;","frame_eqs_eel":"x = if(q9,q15,x);\\ny = if(q9,q16,y);\\nv = if(q9,q19,v);\\nw = if(q9,q20,w);\\n\\nref_w = if(q9, q10, ref_w);\\n\\nt1 = x;\\nt2 = y;\\nt3 = v;\\nt4 = w;\\nt5 = ref_w;\\n\\nt8 = 1;","point_eqs_eel":"x = t1 + sample*sin(t4)*t3*20;\\ny = t2 + sample*cos(t4)*t3*20;\\n\\nx = 0.5 + (x-0.5)/q1;\\ny = 0.5 + (y-0.5)/q2;"},{"baseVals":{"spectrum":1,"g":0,"b":0,"enabled":0},"init_eqs_eel":"chance = 0;","frame_eqs_eel":"x = if(q9,q15,x);\\ny = if(q9,q16,y);\\nv = if(q9,q19,v);\\nw = if(q9,q20,w);\\n\\nref_w = if(q9, q10, ref_w);\\n\\nt1 = x;\\nt2 = y;\\nt3 = v;\\nt4 = w;\\nt5 = ref_w;\\n\\nt8 = 1;","point_eqs_eel":"x = t1 + sample*sin(t5)*t3*20*cos(t4-t5);\\ny = t2 + sample*cos(t5)*t3*20*cos(t4-t5);\\n\\nx = 0.5 + (x-0.5)/q1;\\ny = 0.5 + (y-0.5)/q2;"},{"baseVals":{"spectrum":1,"g":0,"b":0,"enabled":0},"init_eqs_eel":"chance = 0;","frame_eqs_eel":"x = if(q9,q15,x);\\ny = if(q9,q16,y);\\nv = if(q9,q19,v);\\nw = if(q9,q20,w);\\n\\nref_w = if(q9, q10 + asin(1), ref_w);\\n\\nt1 = x;\\nt2 = y;\\nt3 = v;\\nt4 = w;\\nt5 = ref_w;\\n\\nt8 = 1;","point_eqs_eel":"x = t1 + sample*sin(t5)*t3*20*cos(t4-t5);\\ny = t2 + sample*cos(t5)*t3*20*cos(t4-t5);\\n\\nx = 0.5 + (x-0.5)/q1;\\ny = 0.5 + (y-0.5)/q2;"}],"init_eqs_eel":"x1 = 0.5;\\nx2 = 0.51;\\n\\ny2 = 0.9;\\ny1 = 0.7;\\n\\nx3 = 0.8;\\ny3 = 0.5;\\n\\nx4 = 0.2;\\ny4 = 0.5;\\n\\n\\nax1 = 0;\\nay1 = 0;\\nax2 = 0;\\nay2 = 0;\\nax3 = 0;\\nay3 = 0;\\n\\nvx1 = 0.000;\\nvx2 = 0.000;","frame_eqs_eel":"zoom = 1.002;\\nwarp = 0.2;\\nwave_a = 0;\\n//pogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogo\\nr = 0.04+ max(bass_att,treb_att)*0.008;\\nbounce = below(y1,r);y1 = y1+vy1;vy1 = if(bounce, abs(vy1)*0.94 + (r-y1)*0.1, vy1-0.0003*60/fps);\\nbounce = below(x1,r);x1 = x1+vx1;vx1 = if(bounce, abs(vx1)*0.94 + (r-x1)*0.1, vx1);\\nbounce = above(x1,1-r);vx1 = if(bounce, - abs(vx1)*0.94 + (1-r-x1)*0.04, vx1);\\nbounce = below(y2,r);y2 = y2 + vy2;vy2 = if(bounce,abs(vy2)*0.94+(r-y2)*.1, vy2-0.0003*60/fps);\\nbounce = below(x2,r);x2 = x2+ vx2;vx2 = if(bounce, abs(vx2)*0.94 + (r-x2)*0.1, vx2);\\nbounce = above(x2,1-r);vx2 = if(bounce, - abs(vx2)*0.94 + (1-r-x2)*0.1, vx2);\\nbounce = below(y3,r);y3 = y3 + vy3;vy3 = if(bounce,abs(vy3)*0.94+(r-y3)*.1, vy3-0.0003*60/fps);\\nbounce = below(x3,r);x3 = x3+ vx3;vx3 = if(bounce, abs(vx3)*0.94 + (r-x3)*0.1, vx3);\\nbounce = above(x3,1-r);vx3 = if(bounce, - abs(vx3)*0.94 + (1-r-x3)*0.1, vx3);\\nbounce = below(y4,r);y4 = y4 + vy4;vy4 = if(bounce,abs(vy4)*0.94+(r-y4)*.1, vy4-0.0003*60/fps);\\nbounce = below(x4,r);x4 = x4+ vx4;vx4 = if(bounce, abs(vx4)*0.94 + (r-x4)*0.1, vx4);\\nbounce = above(x4,1-r);vx4 = if(bounce, - abs(vx4)*0.94 + (1-r-x4)*0.1, vx4);\\nbounce = below( sqrt( sqr(x1+vx1-x2-vx2) + sqr(y1+vy1-y2-vy2)), 2*r);\\nref_ang = atan2(x2-x1,y2-y1)+asin(1); // common tangent\\nv1 = sqrt(vx1*vx1+vy1*vy1);v2 = sqrt(vx2*vx2+vy2*vy2);w1 = atan2(vx1,vy1);w2 = atan2(vx2,vy2);\\nvx1 = if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang) + sin(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vx1);\\nvy1 = if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang) + cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vy1);\\nvx2 = if(bounce,sin(ref_ang)*v2*cos(w2-ref_ang) + sin(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vx2);\\nvy2 = if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang) + cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vy2);\\nbounce = below( sqrt( sqr(x1+vx1-x3-vx3) + sqr(y1+vy1-y3-vy3)), 2*r);\\nref_ang = atan2(x3-x1,y3-y1)+asin(1); // common tangent\\nv1 = sqrt(vx1*vx1+vy1*vy1);v2 = sqrt(vx3*vx3+vy3*vy3);w1 = atan2(vx1,vy1);w2 = atan2(vx3,vy3);\\nvx1 = if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang) + sin(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vx1);\\nvy1 = if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang) + cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vy1);\\nvx3 = if(bounce,sin(ref_ang)*v2*cos(w2-ref_ang) + sin(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vx3);\\nvy3 = if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang) + cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vy3);\\nbounce = below( sqrt( sqr(x2+vx2-x3-vx3) + sqr(y2+vy2-y3-vy3)), 2*r);\\nref_ang = atan2(x3-x2,y3-y2)+asin(1); // common tangent\\nv1 = sqrt(vx2*vx2+vy2*vy2);v2 = sqrt(vx3*vx3+vy3*vy3);w1 = atan2(vx2,vy2);w2 = atan2(vx3,vy3);\\nvx2 = if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang) + sin(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vx2);\\nvy2 = if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang) + cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vy2);\\nvx3 = if(bounce,sin(ref_ang)*v2*cos(w2-ref_ang) + sin(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vx3);\\nvy3 = if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang) + cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vy3);\\nbounce = below( sqrt( sqr(x1+vx1-x4-vx4) + sqr(y1+vy1-y4-vy4)), 2*r);\\nref_ang = atan2(x4-x1,y4-y1)+asin(1); // common tangent\\nv1 = sqrt(vx1*vx1+vy1*vy1);v2 = sqrt(vx4*vx4+vy4*vy4);w1 = atan2(vx1,vy1);w2 = atan2(vx4,vy4);\\nvx1 = if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang) + sin(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vx1);\\nvy1 = if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang) + cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vy1);\\nvx4 = if(bounce,sin(ref_ang)*v2*cos(w2-ref_ang) + sin(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vx4);\\nvy4 = if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang) + cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vy4);\\nbounce = below( sqrt( sqr(x2+vx2-x4-vx4) + sqr(y2+vy2-y4-vy4)), 2*r);\\nref_ang = atan2(x4-x2,y4-y2)+asin(1); // common tangent\\nv1 = sqrt(vx2*vx2+vy2*vy2);v2 = sqrt(vx4*vx4+vy4*vy4);w1 = atan2(vx2,vy2);w2 = atan2(vx4,vy4);\\nvx2 = if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang) + sin(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vx2);\\nvy2 = if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang) + cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vy2);\\nvx4 = if(bounce,sin(ref_ang)*v2*cos(w2-ref_ang) + sin(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vx4);\\nvy4 = if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang) + cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vy4);\\nbounce = below( sqrt( sqr(x3+vx3-x4-vx4) + sqr(y3+vy3-y4-vy4)), 2*r);\\nref_ang = atan2(x4-x3,y4-y3)+asin(1); // common tangent\\nv1 = sqrt(vx3*vx3+vy3*vy3);v2 = sqrt(vx4*vx4+vy4*vy4);w1 = atan2(vx3,vy3);w2 = atan2(vx4,vy4);\\nvx3 = if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang) + sin(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vx3);\\nvy3 = if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang) + cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vy3);\\nvx4 = if(bounce,sin(ref_ang)*v2*cos(w2-ref_ang) + sin(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vx4);\\nvy4 = if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang) + cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vy4);\\n//pogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogopogo\\nq1 = aspectx;\\nq2 = aspecty;\\nq3 = x1;\\nq4 = y1;\\nq5 = r*2;\\nq6 = x2;\\nq7 = y2;\\nq8 = r*2;\\nq9 = x3;\\nq10 = y3;\\nq11 = r*2;\\nq12 = x4;\\nq13 = y4;\\nq14 = r*2;\\nq15 = atan2(vx4,vy4);\\nq16 = sqrt(vx4*vx4+vy4*vy4);\\nq17 = atan2(vx3,vy3);\\nq18 = sqrt(vx3*vx3+vy3*vy3);","pixel_eqs_eel":"x = 0.5 + (x-0.5)*q2;\\ny = 0.5 + (y-0.5)*q1;\\n\\n\\ndir = -q15 + asin(1);\\nb1 = 0.075;\\nm1 = q16*25;\\nxx = q12;\\nyy = 1-q13;\\nx1 = xx  -sin(dir)*b1;\\ny1 = yy  -cos(dir)*b1;\\nx2 = xx  +sin(dir)*b1;\\ny2 = yy  +cos(dir)*b1;\\nd1 = sqrt((x1-x)*(x1-x)+(y1-y)*(y1-y))-b1*2;\\nd2 = sqrt((x2-x)*(x2-x)+(y2-y)*(y2-y))-b1*2;\\nsi1 = sigmoid(-d1,1000);\\nsi2 = sigmoid(-d2,1000);\\ndx = (si1*sin(y1-y)*m1*d1  - si2*sin(y2-y)*m1*d2)*3*q1;\\ndy = (-si1*sin(x1-x)*m1*d1 + si2*sin(x2-x)*m1*d2)*3*q2;\\n\\ndir = -q17 + asin(1);\\nm1 = q18*25;\\nxx = q9;\\nyy = 1-q10;\\nx1 = xx  -sin(dir)*b1;\\ny1 = yy  -cos(dir)*b1;\\nx2 = xx  +sin(dir)*b1;\\ny2 = yy  +cos(dir)*b1;\\nd1 = sqrt((x1-x)*(x1-x)+(y1-y)*(y1-y))-b1*2;\\nd2 = sqrt((x2-x)*(x2-x)+(y2-y)*(y2-y))-b1*2;\\nsi1 = sigmoid(-d1,1000);\\nsi2 = sigmoid(-d2,1000);\\ndx = dx + (si1*sin(y1-y)*m1*d1  - si2*sin(y2-y)*m1*d2)*3*q1;\\ndy = dy + (-si1*sin(x1-x)*m1*d1 + si2*sin(x2-x)*m1*d2)*3*q2;","warp":" shader_body { \\n  vec3 ret_1;\\n  vec2 tmpvar_2;\\n  tmpvar_2 = (texsize.zw * 8.0);\\n  vec3 tmpvar_3;\\n  tmpvar_3 = (((texture (sampler_blur1, \\n    (uv + (vec2(1.0, 0.0) * tmpvar_2))\\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \\n    (uv - (vec2(1.0, 0.0) * tmpvar_2))\\n  ).xyz * scale1) + bias1));\\n  vec3 tmpvar_4;\\n  tmpvar_4 = (((texture (sampler_blur1, \\n    (uv + (vec2(0.0, 1.0) * tmpvar_2))\\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \\n    (uv - (vec2(0.0, 1.0) * tmpvar_2))\\n  ).xyz * scale1) + bias1));\\n  vec2 tmpvar_5;\\n  tmpvar_5.x = tmpvar_3.z;\\n  tmpvar_5.y = tmpvar_4.z;\\n  vec2 tmpvar_6;\\n  tmpvar_6 = (uv + ((tmpvar_5 * texsize.zw) * 4.0));\\n  ret_1.z = (((texture (sampler_main, tmpvar_6).z - \\n    ((texture (sampler_main, tmpvar_6).z - ((texture (sampler_blur3, tmpvar_6).xyz * scale3) + bias3).z) * 0.02)\\n  ) - 0.008) + ((texture (sampler_noise_lq, \\n    (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)\\n  ).xyz - 0.5) * 0.1)).x;\\n  vec2 tmpvar_7;\\n  tmpvar_7.x = tmpvar_3.x;\\n  tmpvar_7.y = tmpvar_4.x;\\n  vec2 tmpvar_8;\\n  tmpvar_8 = ((0.5 + (uv - 0.5)) - (tmpvar_7 * texsize.zw));\\n  ret_1.x = texture (sampler_main, tmpvar_8).x;\\n  ret_1.x = (ret_1.x + ((\\n    (ret_1.x - ((texture (sampler_blur3, tmpvar_8).xyz * scale3) + bias3))\\n  .x * 0.4) + 0.006));\\n  vec2 tmpvar_9;\\n  tmpvar_9.x = tmpvar_3.x;\\n  tmpvar_9.y = tmpvar_4.x;\\n  vec2 tmpvar_10;\\n  tmpvar_10.x = tmpvar_3.y;\\n  tmpvar_10.y = tmpvar_4.y;\\n  vec2 tmpvar_11;\\n  tmpvar_11.x = tmpvar_3.z;\\n  tmpvar_11.y = tmpvar_4.z;\\n  ret_1.y = texture (sampler_fc_main, (((uv - \\n    ((tmpvar_9 * texsize.zw) * 8.0)\\n  ) + (\\n    (tmpvar_10 * texsize.zw)\\n   * 4.0)) + ((tmpvar_11 * texsize.zw) * 8.0))).y;\\n  ret_1.y = (ret_1.y * (1.0 + (ret_1.x * 0.1)));\\n  ret_1.y = (ret_1.y - (0.004 + (\\n    clamp (ret_1.z, 0.0, 1.0)\\n   * 0.04)));\\n  vec4 tmpvar_12;\\n  tmpvar_12.w = 1.0;\\n  tmpvar_12.xyz = ret_1;\\n  ret = tmpvar_12.xyz;\\n }","comp":" shader_body { \\n  vec3 ret_1;\\n  vec2 tmpvar_2;\\n  tmpvar_2 = (texsize.zw * 4.0);\\n  vec3 tmpvar_3;\\n  tmpvar_3 = (((texture (sampler_blur1, \\n    (uv + (vec2(1.0, 0.0) * tmpvar_2))\\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \\n    (uv - (vec2(1.0, 0.0) * tmpvar_2))\\n  ).xyz * scale1) + bias1));\\n  vec3 tmpvar_4;\\n  tmpvar_4 = (((texture (sampler_blur1, \\n    (uv + (vec2(0.0, 1.0) * tmpvar_2))\\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \\n    (uv - (vec2(0.0, 1.0) * tmpvar_2))\\n  ).xyz * scale1) + bias1));\\n  vec2 tmpvar_5;\\n  tmpvar_5.x = tmpvar_3.z;\\n  tmpvar_5.y = tmpvar_4.z;\\n  vec2 tmpvar_6;\\n  tmpvar_6.x = tmpvar_3.y;\\n  tmpvar_6.y = tmpvar_4.y;\\n  vec2 tmpvar_7;\\n  tmpvar_7 = ((uv - (tmpvar_5 * 0.1)) + (tmpvar_6 * 0.06));\\n  vec4 tmpvar_8;\\n  tmpvar_8 = texture (sampler_main, uv);\\n  ret_1 = (((\\n    ((texture (sampler_blur2, tmpvar_7).xyz * scale2) + bias2)\\n  .x * \\n    clamp ((1.0 - tmpvar_8.z), 0.0, 1.0)\\n  ) * pow (hue_shader.yxz, vec3(8.0, 8.0, 8.0))) * 3.0);\\n  ret_1 = (mix (ret_1, (\\n    pow (hue_shader.yzx, vec3(8.0, 8.0, 8.0))\\n   * 1.4), vec3((\\n    (texture (sampler_main, tmpvar_7).x * 0.8)\\n   + \\n    ((texture (sampler_blur1, tmpvar_7).xyz * scale1) + bias1)\\n  .x))) * clamp ((1.0 - \\n    (((texture (sampler_blur1, uv).xyz * scale1) + bias1).y * 4.0)\\n  ), 0.0, 1.0));\\n  vec2 tmpvar_9;\\n  tmpvar_9.x = tmpvar_3.y;\\n  tmpvar_9.y = tmpvar_4.y;\\n  vec3 tmpvar_10;\\n  vec3 tmpvar_11;\\n  tmpvar_11 = pow (hue_shader, vec3(8.0, 8.0, 8.0));\\n  tmpvar_10 = mix (mix (ret_1, vec3(1.0, 1.0, 1.0), (\\n    (tmpvar_11 * texture (sampler_main, clamp ((uv - (tmpvar_9 * 2.0)), 0.0, 1.0)).z)\\n   * 1.2)), (tmpvar_11.zxy * 1.8), tmpvar_8.yyy);\\n  ret_1 = tmpvar_10;\\n  vec4 tmpvar_12;\\n  tmpvar_12.w = 1.0;\\n  tmpvar_12.xyz = tmpvar_10;\\n  ret = tmpvar_12.xyz;\\n }"}')},5916:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":4,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"additivewave":1,"wave_dots":1,"wave_thick":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.527,"wave_smoothing":0,"wave_mystery":0.6,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_g":0.49,"ob_a":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b2x":0.6,"b3x":0.4,"b1ed":0},"shapes":[{"baseVals":{"sides":8,"additive":1,"num_inst":256,"rad":0.03632,"tex_ang":1.00531,"tex_zoom":1.53117,"g":1,"b":1,"a":0,"g2":0,"border_r":0,"border_g":0,"border_b":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":5,"additive":1,"num_inst":256,"x":0.26,"y":0.2,"rad":0.39317,"tex_zoom":0.9355,"g2":0,"a2":0.2,"border_g":0,"border_b":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"n = (instance);\\nFLen = reg00;\\nSLen = reg00/2;\\n\\nz0 = 10;\\ny0 = gmegabuf(2000+n+FLen)/z0;\\nx0 = gmegabuf(2000+n)/z0;\\n\\na0 = (gmegabuf(n+10000));\\n\\nk1 = instance/num_inst-.5;\\nx = .5 + x0 + sin(k1*8*sin(q12*.07)) * sin(q11*.13)*q3*.7; \\ny = .5 + q32*(y0 + sin(k1*8*sin(q14*.1)) * sin(q13*.2)*q3*.7); \\n\\narg = q2/8;\\nhigh = exp(-500*pow(arg+.5-instance/num_inst,2));\\nhigh += exp(-500*pow(-arg+.5-instance/num_inst,2));\\n\\nexc = sqrt((pow(x-.5,2)+pow(y-.5,2)));\\nrad0 = above(z0,0)*min (.1, a0/60)+.005;\\nrad0 = rad0 * (1+2*exc) * (1+high);\\n\\np1 = .5 + sin(q12)/2;\\np2 = .5 + sin(q13*1.4)/2;\\n//p1 = rand(1)-.5;\\n//p2 = rand(1)-.5;\\nexc = ((pow(x-p1,2)+pow(y-p2,2)));\\nrad = min(rad0 * (1 + .004*q3/abs(exc)),1) ;\\n\\na = min(a0*8+.4,1);\\n\\nk1 = instance/num_inst*5 + high;\\nw = 1-exp(-treb_att/2-.5);\\ng = w + (1-w)*sin(k1);\\nr = w + (1-w)*sin(k1-6.28/3);\\nb = w + (1-w)*sin(k1-6.28*2/3);\\n\\na2 = a/4;\\ng2 = g*0; b2 = b*0; r2 = r*0;"},{"baseVals":{"sides":13,"additive":1,"num_inst":5,"x":0.65,"y":0.38,"rad":0.57049,"tex_zoom":0.73678,"a":0.7,"g2":0,"border_r":0.5,"border_g":0.5,"border_b":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"k1 = instance/num_inst;\\nx = .5 + .3*sin(instance*k1*413);\\ny = .5 + .3 * sin(instance*k1*113);\\n\\nrad = .1 + .4*sin(k1*333);\\n\\nr =  .5*sin(k1*234);\\nb =  .5*sin(k1*534);\\ng =  .5*sin(k1*34);"},{"baseVals":{"sides":14,"additive":1,"thickoutline":1,"textured":1,"x":0.6,"y":0.55,"rad":0.97237,"ang":1.25664,"tex_zoom":0.34933,"g":0.6,"g2":0,"b2":1,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"sep":120,"spectrum":1,"additive":1,"scaling":7.52386,"smoothing":0,"r":0,"a":0.7},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"FLen = reg00;\\n\\nn = int(sample*FLen);\\nvol = (value1+value2) * (1+ .1 / (sample+.03));\\n\\nchg = min(max(vol- gmegabuf(n),-1),1);\\ndec = if (chg>0, 1-chg*0.3, 1+chg*0.2);\\n\\nchg = q1 -q2;\\ndec = .94 - abs(chg) * if (chg> 0, .2,.1);\\n\\ndec = min(max(dec,0),1);\\ngmegabuf(n) = gmegabuf(n)*dec + vol*(1-dec);\\n\\ndec = q2/4;\\n//dec = .90;\\ndec = max(min(dec,1),.1);\\n\\ngmegabuf(n) = gmegabuf(n)*dec + gmegabuf(n+(q2<.8))*(1-dec);\\ngmegabuf(n+10000) = gmegabuf(n+10000)*.2 + .8* vol/3;\\na = .0;\\nx = sample;\\ny = .2 + gmegabuf(n+0)*.23;"},{"baseVals":{"samples":256,"usedots":1,"scaling":0.89152,"smoothing":0.82,"a":0.9,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"samples":32,"thick":1,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.2,"b":0.6,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"n = 0;\\nloop (50000,\\ngmegabuf(n) = 0;\\nmegabuf(n) = 0;\\nn = n+1;\\n);\\n\\nsw1 = rand(8);\\nsw2 = rand(8);\\nsw3 = rand(8);\\nsw4 = rand(8);","frame_eqs_eel":"flen = 512; //Wave Punkte\\nreg00 = FLen;\\nSLen = FLen/2;\\ndec_m = pow(.94, 30/fps);\\n\\n//Volume\\nn = 0; vol = 0;\\nloop (SLen,\\n  vol = vol + pow(gmegabuf(n),2)/FLen;  \\n  n = n+1;\\n);\\nvol = sqrt(vol)/2;\\nvol_ = vol_*dec_m + (1-dec_m)* (vol);\\n\\n//switches\\nlev1 = lev1 * dec_m + (1-dec_m) * gmegabuf(1);\\nlev2 = lev2 * dec_m + (1-dec_m) * gmegabuf(20);\\nlev3 = lev3 * dec_m + (1-dec_m) * gmegabuf(50);\\nlev4 = lev4 * dec_m + (1-dec_m) * gmegabuf(100);\\nsw1 = sw1 + (lev1-gmegabuf(1)>0)/fps;\\nsw2 = sw2 + (lev2-gmegabuf(20)>0)/fps;\\nsw3 = sw3 + (lev3-gmegabuf(50)>0)/fps;\\nsw4 = sw4 + (lev4-gmegabuf(100)>0)/fps;\\n\\ndif = (1+sin(sw3/4))*16+2;\\nofs = sin(sw2/3)*8;\\nn = 0; k1 = frame*0; \\nloop (SLen,\\n      m1 = (n)%SLen;\\n      m2 = (n+ofs)%SLen;\\n\\n      k = (m1+dif)%SLen;\\n      i = (SLen+m2-dif)%SLen;\\n\\n      in1 = (gmegabuf(m1)-gmegabuf(k))/pow(vol_+.03,.8)*1.2;\\n      in2 = (gmegabuf(m2)-gmegabuf(i))/pow(vol_+.03,.8)*1.2;\\n\\n      dec = if (pow(gmegabuf(2000+n),2) + pow(gmegabuf(2000+FLen+n),2)> in1*in1+in2*in2,.8,.94) ;\\n      dec = pow (dec, 30/fps); \\n\\n      gmegabuf(2000+n) =       gmegabuf(2000+n)*dec      +(1-dec)* in1;\\n      gmegabuf(2000+FLen+n) =  gmegabuf(2000+FLen+n)*dec +(1-dec)* in2;\\n      n=n+1;\\n);\\n\\nq1 = (bass+treb+mid)/3;\\nq2 = (bass_att+treb_att+mid_att)/3;\\nq3 = vol_;\\nq11 = sw1;\\nq12 = sw2;\\nq13 = sw3;\\nq14 = sw4;\\n\\nrot = 0; zoom = .98; warp = .3; rot = 0;\\n\\nq32 = aspecty;\\nmonitor = dif;","pixel_eqs_eel":"","warp":" shader_body { \\n  vec4 tmpvar_1;\\n  tmpvar_1.w = 1.0;\\n  tmpvar_1.xyz = ((texture (sampler_main, uv).xyz * clamp (\\n    (q1 - 0.8)\\n  , 0.0, 1.0)) * 0.92);\\n  ret = tmpvar_1.xyz;\\n }","comp":" shader_body { \\n  vec3 ret_1;\\n  ret_1 = (texture (sampler_main, uv).xyz + ((texture (sampler_blur2, uv).xyz * scale2) + bias2));\\n  ret_1 = (ret_1 + ((0.8 * \\n    (hue_shader - 0.8)\\n  ) * (1.0 - uv.y)));\\n  vec4 tmpvar_2;\\n  tmpvar_2.w = 1.0;\\n  tmpvar_2.xyz = ret_1;\\n  ret = tmpvar_2.xyz;\\n }"}')},1289:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":0.952,"echo_alpha":0.5,"echo_orient":3,"wave_mode":5,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.474,"wave_smoothing":0.45,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.8,"wave_g":0.49,"ob_size":0,"ob_a":0.3,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1x":0.8,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":7,"additive":1,"num_inst":1024,"rad":0.04896,"tex_ang":1.00531,"tex_zoom":1.53117,"r":0,"g":1,"b":1,"a":0,"g2":0,"border_b":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"max_age = reg00;\\nn = instance*12;\\n\\nx0 = gmegabuf (n);\\ny0 = gmegabuf (n+1);\\nz0 = gmegabuf (n+2); \\nif (z0 < -100, rad = 0; gmegabuf(n+8) = max_age,\\n  rad0 = pow(1-gmegabuf(n+8)/max_age,0.2)/z0* gmegabuf(n+7) + 0.01;\\n  rad = abs(rad0)*0.032 ;\\n\\n  x = 0.5 + x0/z0;\\n  y = 0.5 + y0/z0;\\n);\\n\\na = 1; a2 = 0.2;\\n\\ng = .8; g2 = .0;\\n//b = (gmegabuf(n+7)>0)*0.04/abs(rad0); b2 = 0;\\nb = (rand(10)>3)*0.2 + 0.2*(z0<0); b2 =0;\\n\\n"},{"baseVals":{"sides":12,"thickoutline":1,"x":0.9,"y":0.7,"rad":0.02958,"tex_zoom":0.9355,"g":0.5,"b":1,"g2":0,"b2":0.4,"border_r":0.3,"border_g":0.7,"border_b":0.8,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"a = 1;"},{"baseVals":{"sides":44,"textured":1,"rad":1.397,"tex_zoom":0.44799,"a":0.5,"r2":1,"g2":0,"border_r":0.5,"border_g":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":34,"thickoutline":1,"x":0.65,"y":0.8,"rad":0.14595,"tex_zoom":0.3357,"g2":0,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"a = q22;"}],"waves":[{"baseVals":{"enabled":1,"samples":160,"sep":20,"usedots":1,"additive":1,"scaling":7.858,"smoothing":0.1,"r":0.2,"g":0.3,"a":0.6},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = rand(100)/100;\\ny =  0.5 - (1-0.7)/q32- 0.15*(rand(100)/100-0.5);\\na = 0.15;\\n\\nr= 0; b=1; g = 0;"},{"baseVals":{"usedots":1,"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.2,"b":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"max_age =  4.5; // Sekunden\\nreg00 = max_age;\\n\\nn = 0;\\nloop (12*1024, gmegabuf(n) = max_age-1 + rand(2); n+=1);\\n\\n\\nq9 = (rand(25)-10)*2;\\nq3 = rand (100)/100;\\nq4 = rand (100)/100;\\n\\n//q2 = q3 = q4 = 0;\\n//record\\n// 0 : xpos\\n// 1 : ypos\\n// 2 : zpos\\n// 3 :vx\\n// 4 :vy\\n// 5 :vz\\n\\n\\n// 8 : age","frame_eqs_eel":"dec_fast = 1 - 0.22*40/fps;\\ndec_med  = 1 - 0.15*40/fps;\\ndec_slow = 1 - 0.04* 40/fps;\\n\\nvol = (bass+med+treb)/3;\\nvol_ = vol_*dec_slow + (1-dec_slow)*vol;\\nbeat = vol;\\nis_beat = above(beat, 1+peak*4) * above (time, t0+.2);\\nt0   = if (is_beat,time,t0);\\npeak = if (is_beat, beat, peak*dec_med);\\n\\nindex = (index + is_beat) %1024;\\nind1 = ind1*dec_med + (1-dec_fast)*index;\\nind2 = ind2*dec_med + (1-dec_fast)*ind1;\\nq27 = ind2;\\nq24 = is_beat;\\n\\n//Partikel\\nran1 = if (is_beat, rand(100)/100-0.5, ran1);\\nran2 = if (is_beat, rand(100)/50+1, ran2);\\nran1_ = dec_med * ran1_ + (1-dec_med)*ran1;\\nhigh = ran2 > 2.9;\\nq5 = ran1_;\\n\\nn = 0;\\npush = max(0,vol-vol_alt)*vol_; air = 0.1*dt; \\ndt = 1/fps;\\nv00 = pow(push,0.25)+0.4; Free = 512; New = 0;\\n\\ny0 = -0.68; yobf = y0+0.1;\\nloop (512,\\n   megabuf (n) = gmegabuf (n);\\n   megabuf (n+1) = gmegabuf (n+1);\\n   megabuf (n+2) = gmegabuf (n+2);\\n  if (gmegabuf(n+8) > max_age,\\n    if (band(push >= dt*10 * !high,New < 200), \\n    Free -= 1; New +=1;\\n    // Init Neues Partikel\\n     Tht = rand (100) / 500 * (1+high*1.5);\\n     Phi   = rand (12);\\n     v0 = v00 * (1 + rand(10)/40);\\n     gmegabuf (n) = ran1*1.7;\\n     gmegabuf (n+1) = y0 + 2.2 * high;\\n     gmegabuf (n+2) = 2;\\n     gmegabuf (n+3) = v0*sin(Tht) * cos(Phi);\\n     gmegabuf (n+4) = v0*cos(4*Tht) * (1-high*1.5);\\n     gmegabuf (n+5) = v0*sin(Tht)*sin(Phi)*1.5*vol;\\n     gmegabuf (n+7) = 0;\\n     gmegabuf (n+8) = rand(100)/100;,0)\\n  ,\\n  //Integration\\n   Free -= 1;\\n   gmegabuf (n)   += gmegabuf(n+3)*dt;\\n   gmegabuf (n+1) += gmegabuf(n+4)*dt;\\n   gmegabuf (n+2) += gmegabuf(n+5)*dt;\\n\\n   gmegabuf (n+3) *= (1-air);\\n   gmegabuf (n+4) *= (1-air);\\n   gmegabuf (n+4) -= 0.8*dt;\\n   gmegabuf (n+5) *= (1-air);\\n   gmegabuf (n+7) = (gmegabuf(n+1)>yobf) * min(1,18*(gmegabuf(n+1)-yobf));\\n   if (band(gmegabuf(n+1)<yobf,gmegabuf(n+4)<0),gmegabuf(8) = max_age,0);\\n//  gmegabuf(n+7)=1;\\n   gmegabuf (n+8) += dt;);\\nn += 12);\\n  \\n//Kopien\\nn = 0;\\nloop (512,\\n  m = 511*12+n;\\n  gmegabuf (m) = (gmegabuf(n) + megabuf(n))/2;  \\n  gmegabuf (m+1) = (gmegabuf(n+1) + megabuf(n+1))/2;  \\n  gmegabuf (m+2) = (gmegabuf(n+2) + megabuf(n+2))/2;  \\n  gmegabuf (m+7) = gmegabuf(n+7);  \\n  gmegabuf (m+8) = gmegabuf(n+8);  \\nn += 12);\\n\\n\\n\\ndec = if (bass>bass1,0.5,0.9);\\nbass1 = bass1*dec + bass*(1-dec);\\nq1 = min(1,max(0,bass1-1.5) * abs(q3-0.5)*3);\\n\\nq10 = max (vol_-0.1,0.1);\\nvol_alt = vol;\\n\\n\\nq32 = aspecty;\\n\\n\\nnew1 = if (new>0,new,new1);\\n\\nmonitor = New1;","pixel_eqs_eel":"dy = -.007*y;\\nwarp =.0;\\nrot = .025*sin(q27+x*7+y*0)*0.2/(abs(y-0.7)+0.1) * q10;// * (1-2*(y>0.7));\\nzoom = 1.003 + 0.2*max(0,y-0.7);","warp":"vec2 ver;\\nfloat xlat_mutablecloud;\\nvec2 xlat_mutabledz;\\nvec2 xlat_mutableuv1;\\nvec2 xlat_mutableuv2;\\nfloat xlat_mutablez;\\n shader_body { \\n  vec2 tmpvar_1;\\n  tmpvar_1.y = 0.0;\\n  tmpvar_1.x = texsize.z;\\n  vec2 tmpvar_2;\\n  tmpvar_2.x = 0.0;\\n  tmpvar_2.y = texsize.w;\\n  ver = (tmpvar_2 * 2.0);\\n  vec3 ret_3;\\n  xlat_mutabledz.x = (2.0 * dot (vec3((texture (sampler_main, \\n    (uv + tmpvar_1)\\n  ).z - texture (sampler_main, \\n    (uv - tmpvar_1)\\n  ).z)), vec3(0.32, 0.49, 0.29)));\\n  xlat_mutabledz.y = (2.0 * dot (vec3((texture (sampler_main, \\n    (uv + ver)\\n  ).z - texture (sampler_main, \\n    (uv - ver)\\n  ).z)), vec3(0.32, 0.49, 0.29)));\\n  vec2 tmpvar_4;\\n  tmpvar_4.x = q3;\\n  tmpvar_4.y = (0.4 + (q4 * 0.4));\\n  xlat_mutableuv1 = (uv_orig - tmpvar_4);\\n  vec4 tmpvar_5;\\n  tmpvar_5 = texture (sampler_main, uv_orig);\\n  xlat_mutablez = ((0.8 * (xlat_mutableuv1.y - 0.4)) - (mix (tmpvar_5.x, \\n    ((texture (sampler_blur1, uv_orig).xyz * scale1) + bias1)\\n  .x, 0.5) * 0.03));\\n  vec2 tmpvar_6;\\n  tmpvar_6.x = (xlat_mutableuv1.x * xlat_mutablez);\\n  tmpvar_6.y = xlat_mutablez;\\n  vec2 tmpvar_7;\\n  tmpvar_7.x = 0.0;\\n  tmpvar_7.y = (-(time) * 0.014);\\n  xlat_mutableuv2 = (tmpvar_6 + tmpvar_7);\\n  vec2 tmpvar_8;\\n  tmpvar_8.x = 0.0;\\n  tmpvar_8.y = (time * 0.004);\\n  vec2 uvi_9;\\n  uvi_9 = ((xlat_mutableuv2 * 1.5) + tmpvar_8);\\n  float zv_10;\\n  zv_10 = (0.002 * time);\\n  xlat_mutablecloud = (1.0 - (1.5 * abs(\\n    (texture (sampler_noise_hq, ((xlat_mutableuv2 + (0.07 * \\n      abs((((\\n        (dot (texture (sampler_noise_hq, uvi_9), vec4(0.32, 0.49, 0.29, 0.0)) + (dot (texture (sampler_noise_hq, (\\n          (uvi_9 * 2.0)\\n         + zv_10)), vec4(0.32, 0.49, 0.29, 0.0)) / 2.0))\\n       + \\n        (dot (texture (sampler_noise_hq, ((uvi_9 * 4.0) + zv_10)), vec4(0.32, 0.49, 0.29, 0.0)) / 4.0)\\n      ) + (\\n        dot (texture (sampler_noise_hq, ((uvi_9 * 8.0) + zv_10)), vec4(0.32, 0.49, 0.29, 0.0))\\n       / -8.0)) - 1.0))\\n    )) / 2.0)) - 0.5)\\n  ))).x;\\n  xlat_mutablecloud = (xlat_mutablecloud * clamp ((\\n    (texture (sampler_noise_hq, (xlat_mutableuv2 * vec2(2.0, 0.5))).x + 0.5)\\n   - \\n    (3.0 * abs(xlat_mutableuv2.x))\\n  ), 0.0, 1.0));\\n  vec2 tmpvar_11;\\n  tmpvar_11.x = 0.0;\\n  tmpvar_11.y = ((-0.01 * time) * (0.125 * float(\\n    int((8.0 * pow (xlat_mutablecloud, 4.0)))\\n  )));\\n  float tmpvar_12;\\n  tmpvar_12 = (texture (sampler_noise_hq, (18.0 * (\\n    (xlat_mutableuv2 + (0.05 * xlat_mutablecloud))\\n   + tmpvar_11))) - 0.75).x;\\n  xlat_mutablecloud = (xlat_mutablecloud * (1.0 + (\\n    (0.2 * tmpvar_12)\\n   * \\n    (xlat_mutablecloud * xlat_mutablecloud)\\n  )));\\n  ret_3.x = ((0.3 * xlat_mutablecloud) + (0.7 * tmpvar_5.xyz)).x;\\n  xlat_mutableuv1 = (uv - vec2(0.0, 0.71));\\n  vec4 tmpvar_13;\\n  tmpvar_13 = texture (sampler_blur1, uv);\\n  float tmpvar_14;\\n  tmpvar_14 = clamp (((12.0 * \\n    (((10.0 * xlat_mutableuv1.y) + ((\\n      (tmpvar_13.xyz * scale1)\\n     + bias1).x / 2.0)) - 1.0)\\n  ) + tmpvar_12), 0.0, 1.0);\\n  xlat_mutableuv1 = (uv - 0.7);\\n  ret_3.z = (((\\n    ((((4.0 * tmpvar_14) * (1.0 - tmpvar_14)) * clamp ((tmpvar_5.x - 0.2), 0.0, 1.0)) + texture (sampler_main, (uv + (xlat_mutabledz * 0.003))).z)\\n   - \\n    (0.03 * sqrt(dot (xlat_mutabledz, xlat_mutabledz)))\\n  ) - (\\n    pow (((tmpvar_13.xyz * scale1) + bias1).z, 8.0)\\n   * 0.2)) - 0.01);\\n  ret_3.y = (texture (sampler_main, mix (uv, uv_orig, vec2(0.5, 0.5))).y * (0.85 - (0.2 * \\n    ((tmpvar_13.xyz * scale1) + bias1)\\n  .y)));\\n  ret_3.x = (ret_3.x + ((texture (sampler_noise_lq, \\n    (2.0 * xlat_mutableuv2)\\n  ) * 0.08) * clamp (\\n    (1.0 - (3.0 * ret_3.x))\\n  , 0.0, 1.0)).x);\\n  vec4 tmpvar_15;\\n  tmpvar_15.w = 1.0;\\n  tmpvar_15.xyz = ret_3;\\n  ret = tmpvar_15.xyz;\\n }","comp":"float dunk;\\nfloat xlat_mutablenoise;\\nvec2 xlat_mutablers;\\nvec2 xlat_mutablers0;\\nfloat xlat_mutablesmask;\\nfloat xlat_mutablesmoke;\\nvec2 xlat_mutableuv1;\\nfloat xlat_mutablez;\\n shader_body { \\n  vec2 tmpvar_1;\\n  tmpvar_1.y = 0.0;\\n  tmpvar_1.x = texsize.z;\\n  dunk = ((rand_preset.x * 0.3) + 0.1);\\n  vec2 uv_2;\\n  vec3 ret_3;\\n  uv_2 = (uv + (texsize.zw / 2.0));\\n  xlat_mutableuv1 = (uv_2 - vec2(0.0, 0.7));\\n  xlat_mutablesmask = (((10.0 * xlat_mutableuv1.y) + (\\n    ((texture (sampler_blur1, uv_2).xyz * scale1) + bias1)\\n  .x / 2.0)) - 1.0);\\n  float tmpvar_4;\\n  tmpvar_4 = clamp (((2.0 * xlat_mutablesmask) + 0.3), 0.0, 1.0);\\n  xlat_mutablenoise = ((3.0 * (1.0 - tmpvar_4)) * texture (sampler_noise_lq, ((xlat_mutableuv1 * 1.5) + (rand_frame * 0.2).xy)).x);\\n  float tmpvar_5;\\n  tmpvar_5 = clamp (((12.0 * xlat_mutablesmask) + (xlat_mutablenoise / 2.0)), 0.0, 1.0);\\n  xlat_mutablez = ((0.35 / xlat_mutableuv1.y) + (xlat_mutablenoise / 2.0));\\n  xlat_mutablers0.x = (xlat_mutableuv1.x * xlat_mutablez);\\n  xlat_mutablers0.y = xlat_mutablez;\\n  vec2 tmpvar_6;\\n  tmpvar_6.x = (xlat_mutablers0.x + (time / 4.0));\\n  tmpvar_6.y = (xlat_mutablez + (time * 0.21));\\n  xlat_mutablers = (tmpvar_6 * tmpvar_5);\\n  float t_7;\\n  t_7 = ((texture (sampler_main, uv_2).x - dunk) * (1.0 - (tmpvar_5 * \\n    pow (uv_2.y, 4.0)\\n  )));\\n  float tmpvar_8;\\n  tmpvar_8 = clamp (((1.2 * t_7) - 0.2), 0.0, 1.0);\\n  t_7 = tmpvar_8;\\n  vec3 tmpvar_9;\\n  tmpvar_9.x = tmpvar_8;\\n  tmpvar_9.y = (tmpvar_8 * tmpvar_8);\\n  tmpvar_9.z = pow (tmpvar_8, 8.0);\\n  vec3 tmpvar_10;\\n  tmpvar_10 = clamp ((tmpvar_9 / vec3(0.8, 0.8, 0.8)), 0.0, 1.0);\\n  float t_11;\\n  t_11 = ((texture (sampler_blur2, (uv_2 + 0.03)).xyz * scale2) + bias2).x;\\n  float tmpvar_12;\\n  tmpvar_12 = clamp (((1.2 * t_11) - 0.2), 0.0, 1.0);\\n  t_11 = tmpvar_12;\\n  vec3 tmpvar_13;\\n  tmpvar_13.x = tmpvar_12;\\n  tmpvar_13.y = (tmpvar_12 * tmpvar_12);\\n  tmpvar_13.z = pow (tmpvar_12, 8.0);\\n  vec3 tmpvar_14;\\n  tmpvar_14 = clamp ((tmpvar_13 / vec3(0.8, 0.8, 0.8)), 0.0, 1.0);\\n  ret_3 = ((tmpvar_10 * (tmpvar_10 * \\n    (3.0 - (2.0 * tmpvar_10))\\n  )) + ((\\n    (((1.0 - texture (sampler_main, uv_2).x) * (1.0 - tmpvar_5)) * abs((texture (sampler_main, (uv_2 - tmpvar_1)).x - texture (sampler_main, (uv_2 + tmpvar_1)).x)))\\n   * \\n    (tmpvar_14 * (tmpvar_14 * (3.0 - (2.0 * tmpvar_14))))\\n  ) * q9));\\n  xlat_mutablesmoke = ((texture (sampler_blur1, uv_2).xyz * scale1) + bias1).z;\\n  vec2 tmpvar_15;\\n  tmpvar_15.x = uv_2.x;\\n  tmpvar_15.y = ((0.85 - xlat_mutableuv1.y) + ((\\n    ((texture (sampler_noise_hq, xlat_mutablers) + texture (sampler_noise_hq, ((xlat_mutablers / 4.0) - (time / 8.0)))) - 1.0)\\n  .x * 0.2) * q10));\\n  float t_16;\\n  t_16 = ((texture (sampler_main, tmpvar_15).x + texture (sampler_main, tmpvar_15).y) - dunk);\\n  float tmpvar_17;\\n  tmpvar_17 = clamp (((1.2 * t_16) - 0.2), 0.0, 1.0);\\n  t_16 = tmpvar_17;\\n  vec3 tmpvar_18;\\n  tmpvar_18.x = tmpvar_17;\\n  tmpvar_18.y = (tmpvar_17 * tmpvar_17);\\n  tmpvar_18.z = pow (tmpvar_17, 8.0);\\n  vec3 tmpvar_19;\\n  tmpvar_19 = clamp ((tmpvar_18 / vec3(0.8, 0.8, 0.8)), 0.0, 1.0);\\n  ret_3 = (ret_3 + ((\\n    (tmpvar_19 * (tmpvar_19 * (3.0 - (2.0 * tmpvar_19))))\\n   * tmpvar_5) * 0.85));\\n  float tmpvar_20;\\n  tmpvar_20 = ((3.6 * tmpvar_4) * (1.0 - tmpvar_4));\\n  ret_3 = (ret_3 * (clamp (\\n    (1.0 - (xlat_mutablesmoke * (1.0 - tmpvar_20)))\\n  , 0.0, 1.0) * clamp (\\n    (1.0 - (tmpvar_20 * float((rand_preset.x > 0.5))))\\n  , 0.0, 1.0)));\\n  vec3 tmpvar_21;\\n  tmpvar_21.z = 0.0;\\n  tmpvar_21.xy = (((texture (sampler_blur3, uv_2).xyz * scale3) + bias3).xy * vec2(3.0, 5.0));\\n  ret_3 = (ret_3 + ((xlat_mutablesmoke * \\n    dot (tmpvar_21, vec3(0.32, 0.49, 0.29))\\n  ) * vec3(1.0, 0.84, 0.62)));\\n  float tmpvar_22;\\n  tmpvar_22 = clamp (((1.2 * \\n    clamp (texture (sampler_main, uv_2).y, 0.0, 1.0)\\n  ) - 0.2), 0.0, 1.0);\\n  vec3 tmpvar_23;\\n  tmpvar_23.x = tmpvar_22;\\n  tmpvar_23.y = (tmpvar_22 * tmpvar_22);\\n  tmpvar_23.z = pow (tmpvar_22, 8.0);\\n  vec3 tmpvar_24;\\n  tmpvar_24 = clamp ((tmpvar_23 / vec3(0.8, 0.8, 0.8)), 0.0, 1.0);\\n  ret_3 = (ret_3 + (tmpvar_24 * (tmpvar_24 * \\n    (3.0 - (2.0 * tmpvar_24))\\n  )));\\n  float tmpvar_25;\\n  tmpvar_25 = clamp (0.52, 0.0, 1.0);\\n  vec3 tmpvar_26;\\n  tmpvar_26.x = tmpvar_25;\\n  tmpvar_26.y = (tmpvar_25 * tmpvar_25);\\n  tmpvar_26.z = pow (tmpvar_25, 8.0);\\n  vec3 tmpvar_27;\\n  tmpvar_27 = clamp ((tmpvar_26 / vec3(0.8, 0.8, 0.8)), 0.0, 1.0);\\n  vec3 tmpvar_28;\\n  tmpvar_28 = mix (clamp (ret_3, 0.0, 1.0), (tmpvar_27 * (tmpvar_27 * \\n    (3.0 - (2.0 * tmpvar_27))\\n  )), vec3((pow (\\n    ((1.0 - uv_2.y) - ((uv_2.x - 0.5) * (q3 - 0.5)))\\n  , 4.0) * q1)));\\n  ret_3 = tmpvar_28;\\n  vec4 tmpvar_29;\\n  tmpvar_29.w = 1.0;\\n  tmpvar_29.xyz = tmpvar_28;\\n  ret = tmpvar_29.xyz;\\n }"}')},5929:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":3,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":7,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.001,"wave_scale":0.958,"wave_smoothing":0.45,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0.05,"ob_g":0.1,"ob_b":1,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_x":25.6,"mv_y":9.6,"mv_l":0,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"textured":1,"x":0.09,"y":0.9,"rad":0.22437,"tex_zoom":1.76002,"r2":1,"g2":0,"a2":0.6,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"x":0.26,"y":0.2,"rad":0.39317,"tex_zoom":6.19589,"r":0,"g":0.55,"b":0.5,"g2":0.4,"b2":0.4,"a2":0.07,"border_r":0.3,"border_g":0.7,"border_b":0.8,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":44,"additive":1,"x":0.503,"rad":0.03886,"tex_zoom":0.60986,"g":0.1,"a":0.9,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"rad":0.01,"tex_zoom":0.49981,"r":0,"g2":0,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"samples":282,"sep":20,"usedots":1,"thick":1,"additive":1,"scaling":3.91581,"smoothing":0.1,"r":0.2,"g":0.3,"a":0.6,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"usedots":1,"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.2,"b":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"//******** INITIALIZATION *********\\n//---------- some global vars, do not change -------------\\navg = 0.01;\\nq7 = .25; //MyZoom\\nq8 =  rand(2.0)-1.0; //fractal modifier\\n//q8 = 1; //#\\nq16 = 1 + rand(2); //Tele ; rather fish eye\\n//q16 = 1; //#\\nq18 = rand(0.8)+.1; //brightness balance back/front\\nq30 = 1; //logarithmic Z-Dist storage; unused\\nq31 =128;\\nstart = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;\\ncran0 = rand(1);\\nn = 0; loop (10000, gmegabuf(n)=0; n=n+1; );\\nn = 0; loop (10000,  megabuf(n)=0; n=n+1; );\\ntrelx = 0;  trely = 0; trelz = 0;\\nreg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;\\n\\n//Find random starting point\\nwhile (exec2(\\n  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;\\n  PosX = rand(5)-2;   PosY = rand(5)-2;   PosZ = rand(5)-2;\\n\\n//  PosX = 3.3; PosY = 2; PosZ = -2; ran1 = 0; ran2 = 0; ran3 = 0; //#\\n\\n  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3);\\n  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);\\n\\n  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;\\n  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;\\n  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;\\n\\n  //***********BOT*************\\n  //Coord. Trans. must exactly match def in warp S. !!!!\\n  dist = 0.001;\\n  while (exec2(\\n    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;\\n    uvx += PosX; uvy += PosY; uvz += PosZ;\\n    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);\\n    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);\\n    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);\\n    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;\\n    loop (7+1,\\n      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));\\n      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));\\n      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));\\n      slen = uvx*uvx + uvy*uvy + uvz*uvz;\\n      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0;\\n      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0;\\n      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0;\\n    );\\n    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);\\n    dist *= 1.05;\\n  ,(dist < 0.6)*(len > 30)));\\n,(dist < .06))); //end while","frame_eqs_eel":"fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25));\\ndec_s = 1-.06*30/fps_;\\nbeat = (time >  t0+3); t0 = if(beat, time, t0);\\n\\nspeed = min(0.2,dist_-.02) * (1+2*avg) *(1-slow*.0)*.7/q7; //#\\nds = ds * dec_s + (1-dec_s)*speed*.25/fps_;\\nRotZ = if (RotZ==0,beat*(rand(100)<20*travel)*(rand(10)/10-.3),\\n                   bnot(beat*(rand(100)<30))*RotZ);\\nslow = if (bnot(slow), beat*(rand(1000*avg)<6), bnot(beat*(rand(100)<50)));\\nlook = if (bnot(look), beat*(rand(1000*speed)<12), bnot(beat*(rand(100)<50)));\\n\\n//Lamp View\\nlx = if (beat,rand(150)/200+.15,lx);\\nly = if (beat,rand(150)/200+.15,ly);\\nlampx = lampx * dec_s + (1-dec_s)*if (look,lx,0.5);\\nlampy = lampy * dec_s + (1-dec_s)*if (look,ly,0.5);\\nq1 = lampx; q2 = lampy;\\n\\n//Position\\nDirX= reg26; DirY= reg27; DirZ = reg28;\\nPosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ;\\nq4 = PosX; q5 = PosY; q6 = PosZ;\\n\\nangchg = (.2-dist_)*(dist_ < .2)*2;\\ntravel = if (angchg > 0,0,travel+ds);\\nv1 = v1 * dec_s + (1-dec_s)* RotZ * ds;\\nv2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;\\nv3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + 2*v1*sin(time*.1));\\n//v2 = .008;\\n//push old RotMat\\nreg30 =reg20; reg31 =reg21; reg32 =reg22;\\nreg33 =reg23; reg34 =reg24; reg35 =reg25;\\nreg36 =reg26; reg37 =reg27; reg38 =reg28;\\n\\nn = 0; avg = 0;\\nloop (5,\\n  n = n+1;\\n  //new Rot. Mat for infinitesimal angles\\n  ran1 = rand(100)/100;\\n  ran2 = rand(100)/200-.25;\\n  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;\\n  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx);\\n  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);\\n  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;\\n  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;\\n  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;\\n\\n  //pop old RotMat\\n  reg20 =reg30; reg21 =reg31; reg22 =reg32;\\n  reg23 =reg33; reg24 =reg34; reg25 =reg35;\\n  reg26 =reg36; reg27 =reg37; reg28 =reg38;\\n\\n  //Multiply new RotMat by old one\\n  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;\\n  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;\\n  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;\\n  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;\\n  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;\\n  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;\\n  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;\\n  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;\\n  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;\\n\\n  reg20 =q20; reg21 =q21; reg22 =q22;\\n  reg23 =q23; reg24 =q24; reg25 =q25;\\n  reg26 =q26; reg27 =q27; reg28 =q28;\\n\\n  //***********BOT*************\\n  //Coord. Trans. must exactly match def in warp S. !!!!\\n  dist = 0.002;\\n  while (exec2(\\n    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;\\n    uvx += PosX; uvy += PosY; uvz += PosZ;\\n    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);\\n    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);\\n    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);\\n    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;\\n    loop (7+1,\\n      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));\\n      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));\\n      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));\\n      slen = uvx*uvx + uvy*uvy + uvz*uvz;\\n      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0;\\n      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0;\\n      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0;\\n    );\\n    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);\\n    dist *= 1.1;\\n  ,(dist < 0.6)*(len > 30)));\\n  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points\\n  avg = avg+abs(megabuf(n)/5);\\n); //end loop 5\\n\\nn = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));\\n\\nxslope = min(max(2/avg*(megabuf(1)-megabuf(3)),-3),3);\\nyslope = min(max(2/avg*(megabuf(4)-megabuf(2)),-3),3);\\nmonitor = avg;\\ndist_ = dist_*dec_s + (1-dec_s)*dist;\\n\\nq10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv\\nq14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + 1.0/255 + start*.05;\\nq19 = .6 + .4*sin(time*.02+cran0*6); //brightness backgd\\nstart = start * .9;\\nq11 = v1; q12 = v2; q13 = v3;\\n//forward comp. of Rotation\\nmonitor = q16;","pixel_eqs_eel":"warp = 0.0; zoom = 1; dx = -q12/q16*(1+0*pow(x-.5,2)); dy = q13/q16*(1+0*pow(y-.5,2)); rot =q11;","warp":"float sustain;\\nfloat xlat_mutabledist;\\nfloat xlat_mutablestruc;\\nvec2 xlat_mutableuv1;\\nvec3 xlat_mutableuv2;\\n shader_body { \\n  mat3 tmpvar_1;\\n  tmpvar_1[uint(0)].x = q20;\\n  tmpvar_1[uint(0)].y = q23;\\n  tmpvar_1[uint(0)].z = q26;\\n  tmpvar_1[1u].x = q21;\\n  tmpvar_1[1u].y = q24;\\n  tmpvar_1[1u].z = q27;\\n  tmpvar_1[2u].x = q22;\\n  tmpvar_1[2u].y = q25;\\n  tmpvar_1[2u].z = q28;\\n  vec3 tmpvar_2;\\n  tmpvar_2.x = q4;\\n  tmpvar_2.y = q5;\\n  tmpvar_2.z = q6;\\n  sustain = (0.98 - q14);\\n  vec2 uv_3;\\n  vec3 ret_4;\\n  vec2 tmpvar_5;\\n  tmpvar_5 = (uv - 0.5);\\n  xlat_mutableuv1 = ((tmpvar_5 * aspect.xy) * q16);\\n  vec4 tmpvar_6;\\n  tmpvar_6 = texture (sampler_pc_main, uv);\\n  uv_3 = ((tmpvar_5 * (1.0 - \\n    (q10 / (1.0 - ((tmpvar_6.z + \\n      (0.003921569 * tmpvar_6.y)\\n    ) + (q10 * 0.7))))\\n  )) + 0.5);\\n  vec4 tmpvar_7;\\n  tmpvar_7 = fract((8.0 * texture (sampler_noise_lq, (uv_3 + rand_frame.yz))));\\n  xlat_mutabledist = tmpvar_7.x;\\n  if ((tmpvar_7.y > 0.2)) {\\n    vec3 tmpvar_8;\\n    tmpvar_8 = (tmpvar_7.xyz - vec3(0.4, 0.5, 0.5));\\n    vec2 uvi_9;\\n    uvi_9 = ((tmpvar_8.zy * 0.003) + uv_3);\\n    vec2 pix_10;\\n    vec4 nb2_11;\\n    vec4 nb_12;\\n    vec2 x_13;\\n    x_13 = (uvi_9 - 0.5);\\n    pix_10 = (texsize.zw * (1.0 + (\\n      sqrt(dot (x_13, x_13))\\n     * 8.0)));\\n    float tmpvar_14;\\n    tmpvar_14 = (q10 * 0.7);\\n    vec4 tmpvar_15;\\n    tmpvar_15 = texture (sampler_pc_main, (uvi_9 - pix_10));\\n    nb_12.x = (1.0 - ((tmpvar_15.z + \\n      (0.003921569 * tmpvar_15.y)\\n    ) + tmpvar_14));\\n    vec4 tmpvar_16;\\n    tmpvar_16 = texture (sampler_pc_main, (uvi_9 + (pix_10 * vec2(1.0, -1.0))));\\n    nb_12.y = (1.0 - ((tmpvar_16.z + \\n      (0.003921569 * tmpvar_16.y)\\n    ) + tmpvar_14));\\n    vec4 tmpvar_17;\\n    tmpvar_17 = texture (sampler_pc_main, (uvi_9 + pix_10));\\n    nb_12.z = (1.0 - ((tmpvar_17.z + \\n      (0.003921569 * tmpvar_17.y)\\n    ) + tmpvar_14));\\n    vec4 tmpvar_18;\\n    tmpvar_18 = texture (sampler_pc_main, (uvi_9 + (pix_10 * vec2(-1.0, 1.0))));\\n    nb_12.w = (1.0 - ((tmpvar_18.z + \\n      (0.003921569 * tmpvar_18.y)\\n    ) + tmpvar_14));\\n    vec4 tmpvar_19;\\n    tmpvar_19 = texture (sampler_pc_main, (uvi_9 + (pix_10 * vec2(0.0, -1.0))));\\n    nb2_11.x = (1.0 - ((tmpvar_19.z + \\n      (0.003921569 * tmpvar_19.y)\\n    ) + tmpvar_14));\\n    vec4 tmpvar_20;\\n    tmpvar_20 = texture (sampler_pc_main, (uvi_9 + (pix_10 * vec2(1.0, 0.0))));\\n    nb2_11.y = (1.0 - ((tmpvar_20.z + \\n      (0.003921569 * tmpvar_20.y)\\n    ) + tmpvar_14));\\n    vec4 tmpvar_21;\\n    tmpvar_21 = texture (sampler_pc_main, (uvi_9 + (pix_10 * vec2(0.0, 1.0))));\\n    nb2_11.z = (1.0 - ((tmpvar_21.z + \\n      (0.003921569 * tmpvar_21.y)\\n    ) + tmpvar_14));\\n    vec4 tmpvar_22;\\n    tmpvar_22 = texture (sampler_pc_main, (uvi_9 + (pix_10 * vec2(-1.0, 0.0))));\\n    nb2_11.w = (1.0 - ((tmpvar_22.z + \\n      (0.003921569 * tmpvar_22.y)\\n    ) + tmpvar_14));\\n    vec4 tmpvar_23;\\n    tmpvar_23 = min (nb_12, nb2_11);\\n    nb_12.zw = tmpvar_23.zw;\\n    nb_12.xy = min (tmpvar_23.xy, tmpvar_23.zw);\\n    xlat_mutabledist = (min (nb_12.x, nb_12.y) + ((0.008 * tmpvar_8.x) * abs(tmpvar_8.y)));\\n  };\\n  vec4 tmpvar_24;\\n  tmpvar_24 = texture (sampler_pc_main, uv_3);\\n  float tmpvar_25;\\n  tmpvar_25 = min (xlat_mutabledist, (1.0 - (\\n    (tmpvar_24.z + (0.003921569 * tmpvar_24.y))\\n   + \\n    (q10 * 0.7)\\n  )));\\n  xlat_mutabledist = tmpvar_25;\\n  float tmpvar_26;\\n  tmpvar_26 = (tmpvar_25 + pow (tmpvar_25, 3.0));\\n  vec3 tmpvar_27;\\n  tmpvar_27.xy = (xlat_mutableuv1 * tmpvar_26);\\n  tmpvar_27.z = tmpvar_26;\\n  xlat_mutableuv2 = (((tmpvar_27 / q7) * tmpvar_1) + tmpvar_2);\\n  xlat_mutableuv2 = ((fract(\\n    ((xlat_mutableuv2 / 8.0) + 0.5)\\n  ) - 0.5) * 8.0);\\n  float li_28;\\n  vec3 zz0_29;\\n  vec3 zz_30;\\n  zz0_29 = (xlat_mutableuv2 + q8);\\n  li_28 = 0.0;\\n  zz_30 = ((2.0 * clamp (xlat_mutableuv2, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - xlat_mutableuv2);\\n  float tmpvar_31;\\n  tmpvar_31 = dot (zz_30, zz_30);\\n  if ((tmpvar_31 <= 0.25)) {\\n    zz_30 = (zz_30 * 4.0);\\n    li_28 = 24.0;\\n  } else {\\n    if ((tmpvar_31 <= 1.0)) {\\n      zz_30 = (zz_30 / tmpvar_31);\\n    };\\n  };\\n  zz_30 = ((2.6 * zz_30) + zz0_29);\\n  zz_30 = ((2.0 * clamp (zz_30, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_30);\\n  float tmpvar_32;\\n  tmpvar_32 = dot (zz_30, zz_30);\\n  if ((tmpvar_32 <= 0.25)) {\\n    zz_30 = (zz_30 * 4.0);\\n    li_28 = 24.0;\\n  } else {\\n    if ((tmpvar_32 <= 1.0)) {\\n      zz_30 = (zz_30 / tmpvar_32);\\n    };\\n  };\\n  zz_30 = ((2.6 * zz_30) + zz0_29);\\n  zz_30 = ((2.0 * clamp (zz_30, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_30);\\n  float tmpvar_33;\\n  tmpvar_33 = dot (zz_30, zz_30);\\n  if ((tmpvar_33 <= 0.25)) {\\n    zz_30 = (zz_30 * 4.0);\\n    li_28 = 24.0;\\n  } else {\\n    if ((tmpvar_33 <= 1.0)) {\\n      zz_30 = (zz_30 / tmpvar_33);\\n    };\\n  };\\n  zz_30 = ((2.6 * zz_30) + zz0_29);\\n  zz_30 = ((2.0 * clamp (zz_30, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_30);\\n  float tmpvar_34;\\n  tmpvar_34 = dot (zz_30, zz_30);\\n  if ((tmpvar_34 <= 0.25)) {\\n    zz_30 = (zz_30 * 4.0);\\n    li_28 = 24.0;\\n  } else {\\n    if ((tmpvar_34 <= 1.0)) {\\n      zz_30 = (zz_30 / tmpvar_34);\\n    };\\n  };\\n  zz_30 = ((2.6 * zz_30) + zz0_29);\\n  zz_30 = ((2.0 * clamp (zz_30, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_30);\\n  float tmpvar_35;\\n  tmpvar_35 = dot (zz_30, zz_30);\\n  if ((tmpvar_35 <= 0.25)) {\\n    zz_30 = (zz_30 * 4.0);\\n    li_28 = 24.0;\\n  } else {\\n    if ((tmpvar_35 <= 1.0)) {\\n      zz_30 = (zz_30 / tmpvar_35);\\n    };\\n  };\\n  zz_30 = ((2.6 * zz_30) + zz0_29);\\n  zz_30 = ((2.0 * clamp (zz_30, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_30);\\n  float tmpvar_36;\\n  tmpvar_36 = dot (zz_30, zz_30);\\n  if ((tmpvar_36 <= 0.25)) {\\n    zz_30 = (zz_30 * 4.0);\\n    li_28 = 24.0;\\n  } else {\\n    if ((tmpvar_36 <= 1.0)) {\\n      zz_30 = (zz_30 / tmpvar_36);\\n    };\\n  };\\n  zz_30 = ((2.6 * zz_30) + zz0_29);\\n  zz_30 = ((2.0 * clamp (zz_30, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_30);\\n  float tmpvar_37;\\n  tmpvar_37 = dot (zz_30, zz_30);\\n  if ((tmpvar_37 <= 0.25)) {\\n    zz_30 = (zz_30 * 4.0);\\n    li_28 = 24.0;\\n  } else {\\n    if ((tmpvar_37 <= 1.0)) {\\n      zz_30 = (zz_30 / tmpvar_37);\\n    };\\n  };\\n  zz_30 = ((2.6 * zz_30) + zz0_29);\\n  zz_30 = ((2.0 * clamp (zz_30, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_30);\\n  float tmpvar_38;\\n  tmpvar_38 = dot (zz_30, zz_30);\\n  if ((tmpvar_38 <= 0.25)) {\\n    zz_30 = (zz_30 * 4.0);\\n    li_28 = 24.0;\\n  } else {\\n    if ((tmpvar_38 <= 1.0)) {\\n      zz_30 = (zz_30 / tmpvar_38);\\n    };\\n  };\\n  zz_30 = ((2.6 * zz_30) + zz0_29);\\n  vec4 tmpvar_39;\\n  tmpvar_39.xyz = zz_30;\\n  tmpvar_39.w = li_28;\\n  float tmpvar_40;\\n  tmpvar_40 = sqrt(dot (zz_30, zz_30));\\n  xlat_mutablestruc = (sqrt(dot (tmpvar_39.xyw, tmpvar_39.xyw)) / 24.0);\\n  vec4 tmpvar_41;\\n  tmpvar_41 = texture (sampler_pc_main, uv_3);\\n  float tmpvar_42;\\n  float tmpvar_43;\\n  tmpvar_43 = (q10 * 0.7);\\n  tmpvar_42 = ((log(\\n    (1.0 + (tmpvar_40 / 24.0))\\n  ) * 0.02) * (1.0 - (1.0 - \\n    ((tmpvar_41.z + (0.003921569 * tmpvar_41.y)) + tmpvar_43)\\n  )));\\n  float tmpvar_44;\\n  vec4 tmpvar_45;\\n  tmpvar_45 = texture (sampler_pc_main, uv_3);\\n  tmpvar_44 = (1.0 - ((tmpvar_45.z + \\n    (0.003921569 * tmpvar_45.y)\\n  ) + tmpvar_43));\\n  if ((((tmpvar_25 <= tmpvar_44) && (tmpvar_40 < 24.0)) && (tmpvar_25 > 0.005))) {\\n    ret_4.x = (((1.0 - sustain) * xlat_mutablestruc) + (sustain * mix (texture (sampler_main, uv_3).xyz, \\n      ((texture (sampler_blur1, uv_3).xyz * scale1) + bias1)\\n    , vec3(\\n      (q14 * 4.0)\\n    )).x));\\n    float x_46;\\n    x_46 = ((1.0 - tmpvar_25) * 255.0);\\n    float ip_47;\\n    ip_47 = float(int(x_46));\\n    vec2 tmpvar_48;\\n    tmpvar_48.x = (x_46 - ip_47);\\n    tmpvar_48.y = (ip_47 / 255.0);\\n    ret_4.yz = tmpvar_48;\\n  } else {\\n    vec3 tmpvar_49;\\n    tmpvar_49.y = 0.0;\\n    tmpvar_49.x = sustain;\\n    tmpvar_49.z = (1.0 - tmpvar_42);\\n    vec3 tmpvar_50;\\n    tmpvar_50.xy = vec2(0.003921569, 0.0);\\n    tmpvar_50.z = (q14 / 6.0);\\n    ret_4 = ((texture (sampler_fc_main, uv_3).xyz * tmpvar_49) - tmpvar_50);\\n  };\\n  vec4 tmpvar_51;\\n  tmpvar_51.w = 1.0;\\n  tmpvar_51.xyz = ret_4;\\n  ret = tmpvar_51.xyz;\\n }","comp":" shader_body { \\n  vec3 tmpvar_1;\\n  tmpvar_1.x = q4;\\n  tmpvar_1.y = q5;\\n  tmpvar_1.z = q6;\\n  mat3 tmpvar_2;\\n  tmpvar_2[uint(0)].x = q20;\\n  tmpvar_2[uint(0)].y = q23;\\n  tmpvar_2[uint(0)].z = q26;\\n  tmpvar_2[1u].x = q21;\\n  tmpvar_2[1u].y = q24;\\n  tmpvar_2[1u].z = q27;\\n  tmpvar_2[2u].x = q22;\\n  tmpvar_2[2u].y = q25;\\n  tmpvar_2[2u].z = q28;\\n  vec2 tmpvar_3;\\n  tmpvar_3.x = q1;\\n  tmpvar_3.y = q2;\\n  vec2 uv_4;\\n  vec3 ret_5;\\n  uv_4 = (((uv - 0.5) * 0.9) + 0.5);\\n  vec3 tmpvar_6;\\n  tmpvar_6.xy = ((uv_4 - 0.5) * min ((1.0 - texture (sampler_main, uv_4).z), (1.0 - \\n    ((texture (sampler_blur2, uv_4).xyz * scale2) + bias2)\\n  .z)));\\n  tmpvar_6.z = min ((1.0 - texture (sampler_main, uv_4).z), (1.0 - (\\n    (texture (sampler_blur2, uv_4).xyz * scale2)\\n   + bias2).z));\\n  float tmpvar_7;\\n  tmpvar_7 = clamp ((abs(\\n    ((1.0 - ((texture (sampler_blur2, uv_4).xyz * scale2) + bias2).z) - clamp ((1.0 - (\\n      (texture (sampler_blur2, tmpvar_3).xyz * scale2)\\n     + bias2).z), 0.1, 0.4))\\n  ) + 0.2), 0.0, 1.0);\\n  float tmpvar_8;\\n  tmpvar_8 = clamp (((1.0 - \\n    exp(-(((texture (sampler_blur1, uv_4).xyz * scale1) + bias1).x))\\n  ) - 0.2), 0.0, 1.0);\\n  ret_5 = ((mix (texture (sampler_main, uv_4).xyz, \\n    ((texture (sampler_blur1, uv_4).xyz * scale1) + bias1)\\n  , vec3(tmpvar_7)).x * (0.2 + \\n    ((1.0 - tmpvar_7) * (1.0 - min ((1.0 - texture (sampler_main, uv_4).z), (1.0 - \\n      ((texture (sampler_blur2, uv_4).xyz * scale2) + bias2)\\n    .z))))\\n  )) * (1.0 + (0.5 * \\n    sin((((tmpvar_6 / q7) * tmpvar_2) + tmpvar_1))\\n  )));\\n  vec3 tmpvar_9;\\n  tmpvar_9.xy = vec2(0.0, 1.0);\\n  tmpvar_9.z = (tmpvar_8 * 3.0);\\n  ret_5 = (mix (ret_5, tmpvar_9, vec3(tmpvar_8)) + ((\\n    pow ((1.0 - mix (texture (sampler_main, uv_4).xyz, (\\n      (texture (sampler_blur1, uv_4).xyz * scale1)\\n     + bias1), vec3(0.8, 0.8, 0.8)).z), 3.0)\\n   * \\n    (0.5 + (0.5 * slow_roam_cos))\\n  ) * q19).xyz);\\n  ret_5 = (1.0 - exp((-2.0 * ret_5)));\\n  vec4 tmpvar_10;\\n  tmpvar_10.w = 1.0;\\n  tmpvar_10.xyz = ret_5;\\n  ret = tmpvar_10.xyz;\\n }"}')},4324:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":5,"gammaadj":1.980001,"decay":0.5,"echo_zoom":0.999998,"echo_alpha":0.5,"echo_orient":3,"modwavealphabyvolume":1,"darken":1,"wave_a":0.001,"wave_scale":10.437056,"wave_smoothing":0.45,"wave_mystery":0.08,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.4595,"warpscale":2.0067,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0.99,"ob_size":0,"ob_r":1,"ob_g":1,"ob_b":1,"ib_size":0,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.4999,"mv_g":0.4999,"mv_b":0.4999,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"rad":0.048958,"tex_ang":1.00531,"tex_zoom":1.531168,"r":0.5,"g":1,"b":0.9,"r2":0.83,"g2":0.93,"b2":0.8,"a2":1,"border_b":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"\\ntrel = time/2+q20;\\n\\nx = .5+sin(trel*2);\\ny = .5+cos(trel*1.3 +q28/3);\\n\\na = q26/4+.2; \\n//a = 1;"},{"baseVals":{"thickoutline":1,"x":0.4,"rad":2.366958,"tex_ang":3.455753,"tex_zoom":0.993053,"r":0.5,"b":1,"a":0.2,"r2":0.7,"g2":0.4,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"a2 =0;a = 0;\\na = q24/2;"},{"baseVals":{"enabled":1,"x":0.503,"rad":0.038857,"tex_zoom":0.609857,"g":0.1,"a":0.9,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"x = rand(10)/10;\\ny = rand(10)/10;\\n\\nr = rand(4)/3;\\ng = rand(4)/3;\\nb = rand(4)/3;\\n\\n\\nis_beat = above(time, t0+.03);\\nt0 = is_beat*time + (1-is_beat)*t0;\\n\\n \\na = min(q21/2 ,.9) * is_beat;\\nrad = a*a/3 ;"},{"baseVals":{"sides":63,"textured":1,"y":1,"rad":0.548217,"tex_zoom":0.499805,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"sep":120,"additive":1,"scaling":0.891519,"smoothing":0.82,"a":0.6},"init_eqs_eel":"t1 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt2 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt3 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt4 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt5 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt6 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt7 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt8 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\n","frame_eqs_eel":"t2 = t2 + bass_att;","point_eqs_eel":"k1 = (sample*100)%8;\\nk2 = bnot (k1);\\nxi = value1*k2 + xi*(1-k2);\\nyi = value2*(1-k2) + yi*k2;\\n\\ndx = dx*.99 + xi;\\ndy = dy*.99 + yi;\\n\\nx = .5 + xi/2;\\ny = .5 + yi/2;\\n\\na = q22/8; \\na = min(a,.2);"},{"baseVals":{"usedots":1,"thick":1,"scaling":0.891519,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_eel":"t1 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt2 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt3 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt4 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt5 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt6 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt7 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt8 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\n","frame_eqs_eel":"tm = time*.1;\\nt1 = t1*sin(tm*t4) + (1-t1)*sin(tm*t7);\\nt2 = t2*sin(tm*t5) + (1-t2)*sin(tm*t8);\\nt3 = t3*sin(tm*t6) + (1-t3)*sin(tm*1);\\n\\ntic = min(time - tin,1);\\ntin = time;\\n\\ntva = (tic*q1*.5);\\ntvb = (tic*q2*.5);\\ntvc = (tic*q3*.5);\\n\\nq1 = tva;\\nq2 = tvb;\\nq3 = tvc;\\n\\nsz = .5;\\nlen = q4;\\nt4 = len;","point_eqs_eel":"xi = rand(100)/100;\\nyi = rand(100)/100;\\n\\nx = xi; y = yi;\\n\\na = q21/15;"},{"baseVals":{"thick":1,"scaling":0.891519,"smoothing":0.82,"r":0,"g":0.2,"b":0,"enabled":0},"init_eqs_eel":"t1 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt2 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt3 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt4 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt5 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt6 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt7 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\nt8 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\\n","frame_eqs_eel":"tm = time*.1;\\nt1 = t1*sin(tm*t4) + (1-t1)*sin(tm*t7);\\nt2 = t2*sin(tm*t5) + (1-t2)*sin(tm*t8);\\nt3 = t3*sin(tm*t6) + (1-t3)*sin(tm*1);\\n\\ntic = min(time - tin,1);\\ntin = time;\\n\\ntva = (tic*q1*.5);\\ntvb = (tic*q2*.5);\\ntvc = (tic*q3*.5);\\n\\nq1 = tva;\\nq2 = tvb;\\nq3 = tvc;\\n\\nsz = .5;\\nlen = 1;\\nt4 = len;","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"fade = .5;","frame_eqs_eel":"dec_med = pow (0.9, 30/fps);\\ndec_slow = pow (0.99, 30/fps);\\nbeat = max (max (bass, mid), treb); \\navg = avg*dec_slow + beat*(1-dec_slow);\\nis_beat = above(beat, .5+avg+peak) * above (time, t0+.2);\\nt0 = is_beat*time + (1-is_beat)*t0;\\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\\nindex = (index + is_beat) %8;\\n\\nq20 = avg;\\nq21 = beat;\\nq22 = peak;\\nq23 = index;\\nq24 = is_beat;\\nq26 = bass + mid + treb;\\n\\nk1 =  is_beat*equal(index,0);\\np1 =  k1*(p1+1) + (1-k1)*p1;\\np2 = dec_med * p2+ (1-dec_med)*p1;\\nrott = p2 * 3.14159265358/2;\\nq27 = index + 1;\\n\\nq1 = cos(rott);\\nq2 = sin(rott);\\nq3 = -q2;\\nq4 = q1;\\n\\nzoom = 1.0;\\nrot = -0.00 * index;\\n\\nfade = fade*dec_med + pow(0.996, 30/fps) * (1-dec_med);\\nq32 = fade;","pixel_eqs_eel":"","warp":" shader_body { \\n  vec2 zz_1;\\n  mat2 tmpvar_2;\\n  tmpvar_2[uint(0)] = _qa.xy;\\n  tmpvar_2[1u] = _qa.zw;\\n  zz_1 = (((\\n    (uv - vec2(0.5, 0.5))\\n   * texsize.xy) * (0.015 * q27)) * tmpvar_2);\\n  vec4 tmpvar_3;\\n  tmpvar_3.w = 1.0;\\n  tmpvar_3.xyz = (((q32 * texture (sampler_main, \\n    (uv + ((clamp (\\n      (sin(zz_1) / cos(zz_1))\\n    , vec2(-20.0, -20.0), vec2(20.0, 20.0)) * texsize.zw) * 8.0))\\n  ).xyz) + (\\n    (0.03 * texture (sampler_noise_lq, ((uv * 0.3) + (0.01 * rand_frame).xy)))\\n  .xyz * \\n    (1.0 - ((texture (sampler_blur1, uv).xyz * scale1) + bias1))\\n  )) - 0.02);\\n  ret = tmpvar_3.xyz;\\n }","comp":" shader_body { \\n  vec4 tmpvar_1;\\n  tmpvar_1 = texture (sampler_main, uv);\\n  vec4 tmpvar_2;\\n  tmpvar_2.w = 1.0;\\n  tmpvar_2.xyz = ((tmpvar_1.xyz + clamp (\\n    (3.0 * (((texture (sampler_blur1, \\n      (uv - (0.01 * tmpvar_1.xyz).xy)\\n    ).xyz * scale1) + bias1) - vec3(0.1, 0.1, 0.2)))\\n  , 0.0, 1.0)) * 1.3);\\n  ret = tmpvar_2.xyz;\\n }"}')},5595:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":3,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":6,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.527,"wave_smoothing":0.09,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.8,"wave_g":0.49,"ob_a":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b2x":0.7,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":12,"num_inst":1024,"rad":0.03632,"tex_ang":1.00531,"tex_zoom":1.53117,"b":1,"a":0,"g2":0,"border_b":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"fov = reg03;\\nn = instance*reg00;\\n\\n\\nx0 = gmegabuf(n);\\ny0 = gmegabuf(n+1);\\nz0 = gmegabuf(n+2)+reg02;\\n\\nx = x0/z0*fov + 0.5;\\ny = y0/z0*q32*fov + 0.5;\\n\\n\\n//k1 = reg01+t1;\\nr = gmegabuf(n+3);\\ng = gmegabuf(n+4);\\nb = gmegabuf(n+5);\\nr2 = r/2; g2 = g/2; b2 = b2/2;\\n\\na = instance/1024; a2 = a*.5;\\nrad = min(0.02/z0,.5) * (z0 > 0)*2.5*sqrt(a);\\nrad *= gmegabuf(n+6);\\n\\nt1 -= 1;\\n"},{"baseVals":{"num_inst":128,"x":0.26,"y":0.2,"rad":0.39317,"tex_zoom":0.9355,"g":1,"b":0.6,"g2":0,"border_r":0,"border_g":0,"border_b":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":13,"additive":1,"num_inst":5,"x":0.65,"y":0.38,"rad":0.57049,"tex_zoom":0.73678,"a":0.7,"g2":0,"border_r":0.5,"border_g":0.5,"border_b":0,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":14,"additive":1,"thickoutline":1,"textured":1,"x":0.6,"y":0.55,"rad":0.97237,"ang":1.25664,"tex_zoom":0.34933,"g":0.6,"g2":0,"b2":1,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"scaling":2.15542,"smoothing":0.2,"r":0,"a":0.7},"init_eqs_eel":"","frame_eqs_eel":"t1 = 1023;\\nt2 = 0;","point_eqs_eel":"fov = reg03;\\nn = t1 * reg00;\\n\\n\\nx0 = gmegabuf(n);\\ny0 = gmegabuf(n+1);\\nz0 = gmegabuf(n+2)+reg02;\\n\\nx = x0/z0*fov + 0.5;\\ny = y0/z0*fov + 0.5;\\n\\n\\na= max(0,t1/1024);\\n\\nk1 = reg01+t1;\\nr = gmegabuf(n+3);\\ng = gmegabuf(n+4);\\nb = gmegabuf(n+5);\\n\\n\\na = t1/1024 * (z0 >= 0.5)/2;\\n\\nt1 -= 1;\\ngmegabuf (10000 +t2) = abs(value1+value2);\\nt2 += 1;"},{"baseVals":{"enabled":1,"scaling":0.89152,"smoothing":0.82,"r":0,"a":0.1},"init_eqs_eel":"","frame_eqs_eel":"t1 = 512;","point_eqs_eel":"fov = reg03;\\nn = t1 * reg00;\\n\\n\\nx0 = gmegabuf(n);\\ny0 = gmegabuf(n+1);\\nz0 = gmegabuf(n+2)+reg02;\\n\\nx = x0/z0*fov + 0.5;\\ny = y0/z0*fov + 0.5;\\n\\nr = gmegabuf(n+3);\\ng = gmegabuf(n+4);\\nb = gmegabuf(n+5);\\n\\na= t1/1024* (z0 >= 0.5)/2;\\nt1 -= 1;\\n"},{"baseVals":{"samples":32,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.2,"b":0.6,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"index = 0;\\nloop (100000,\\n  megabuf(index) = 0;\\n  gmegabuf(index) = 0;\\n  index = index + 1;\\n);\\n\\nrecsize = 8;\\nreg00 = recsize;\\n\\npoints = 512*2;\\n\\nreg01 = 0; //benoetigt fuer \\"new\\"\\nzofs = 1 + rand(100)/100*2; reg02 = zofs;\\n\\nfov = .3; reg03 = fov;","frame_eqs_eel":"dec_f = pow (0.3, 30/fps);\\ndec_m = pow (0.85, 30/fps);\\ndec_s = pow (0.95, 30/fps);\\nbeat = (bass + mid+ treb)-(bass_att + mid_att+ treb_att) + (bass+mid+treb);\\nbeat /= 3;\\n\\npeak = peak*dec_m + (1-dec_m)*pow(beat-1,1)*(beat>1)*4;\\nis_beat = above(beat, 1) * above (time, t0+.2);\\nt0 = is_beat*time + (1-is_beat)*t0;\\nindex = (index + is_beat) %8;\\nindex2 = (index2 + is_beat*bnot(index)) %8;\\n\\nif (is_beat,\\n  ran1 = rand(100)/50-1;\\n  ran2 = rand(100)/50-1;\\n  ran3 = rand(100)/50-1;\\n,0);\\nran1_ = dec_m * ran1_ + (1-dec_m) * ran1;\\nran2_ = dec_m * ran2_ + (1-dec_m) * ran2;\\nran3_ = dec_m * ran3_ + (1-dec_m) * ran3;\\nrsum = sqrt(ran1_*ran1_ + ran2_*ran2_ + ran3_*ran3_);\\n\\nif (is_beat * (index==2),\\n  ran4 = (rand(100)/50-1);\\n  ran5 = (rand(100)/50-1);\\n  ran6 = (rand(100)/50-1);\\n,0;);\\nran4_ = dec_m * ran4_ + (1-dec_m) * ran4;\\nran5_ = dec_m * ran5_ + (1-dec_m) * ran5;\\nran6_ = dec_m * ran6_ + (1-dec_m) * ran6;\\n\\nif (is_beat * (index==6),\\n  ran7 = (rand(100)/50-1) ;\\n  ran8 = (rand(100)/50-1) ;\\n  ran9 = (rand(100)/50-1) ;\\n,0;);\\nran7_ = dec_m * ran7_ + (1-dec_m) * ran7;\\nran8_ = dec_m * ran8_ + (1-dec_m) * ran8;\\nran9_ = dec_m * ran9_ + (1-dec_m) * ran9;\\n\\n\\n//Neue Punkte #####################\\npk = sqrt(peak+.1);\\nNew = int(12*(ran4-ran5)*pk-12*(ran3-ran1)/pk); //##spielen\\nnew = max(min (new,20),2);\\nreg01 += new;\\n\\ndec = dec_m;\\n\\n//Neue Punkte oberhalb des Arrays\\nn = recsize*points; m = 0;\\ndt1 = (if (ran1>0,4*pk,4/pk))/fps*new/6;\\nvol = max(ran1+ran2,.2)*pk*2;\\nloop (new,\\n  trel1 = trel1 + dt1;\\n  x0 = x0 * dec + (1-dec)* (sin(trel1+ran3*6)*vol    +ran1);\\n  y0 = y0 * dec + (1-dec)* (sin(trel1+ran2*6)*vol    +ran2);\\n  z0 = z0 * dec + (1-dec)* (sin(trel1+ran1*6)*vol +ran3);\\n\\n  gmegabuf(n)   = x0;\\n  gmegabuf(n+1) = y0;\\n  gmegabuf(n+2) = z0;\\n//Farben\\n  gmegabuf(n+3) = ran1_/rsum/3+.5;\\n  gmegabuf(n+4) = ran2_/rsum/3+.5;\\n  gmegabuf(n+5) = ran3_/rsum/3+.5;\\n//Groesse\\n  gmegabuf(n+6) = gmegabuf(10000+m)*0+1;;\\n  n += recsize; m+=1;);\\n\\n//Nach unten um \\"new\\" points umkopieren\\nn = 0;\\nloop (recsize*points,\\n  gmegabuf (n) = gmegabuf(n+new*recsize) ;\\n  n += 1;);\\n\\nxang = ran4_/fps;\\nyang = ran5_/fps;\\nzang = ran6_/fps;\\nddx = min(max(ddx+yang/fps,-1),1);\\nddy = min(max(ddy+xang/fps,-1),1);\\nq1 = ddx*2;\\nq2 = ddy*2;\\n//Rotieren\\nn = 0;\\nloop (points,\\n  ox = gmegabuf (n);\\n  oy = gmegabuf (n+1);\\n  oz = gmegabuf (n+2);\\n  mx = ox*cos(zang) - oy*sin(zang);\\n  my = ox*sin(zang) + oy*cos(zang);\\n  ox = mx;  oy = my;\\n  mx = ox*cos(yang) + oz*sin(yang);\\n  mz = -ox*sin(yang) + oz*cos(yang);\\n  ox = mx;  oz = mz;\\n  my = oy*cos(xang) - oz*sin(xang);\\n  mz = oy*sin(xang) + oz*cos(xang);\\n  oy = my;  oz = mz;\\n  gmegabuf (n) = ox;\\n  gmegabuf (n+1) = oy;\\n  gmegabuf (n+2) = oz;\\nn += recsize;);\\n\\n\\n//SPIEL\\nk1 = ran7_/fps/2;\\nk2 = ran8_/fps/2;\\nk3 = abs(ran9_)/fps;\\n\\ndec = .4 + .6*ran5_; dec2 = (1-dec);\\nr1 = .5+.3*ran4_;\\nn = 0;\\nloop (points-1,\\n  m = n*recsize;\\n  left  =  ((n-1+points)%points) * recsize;\\n  right =  ((n+1+points)%points) * recsize;\\n  gmegabuf (m) =   dec*gmegabuf(m)   + dec2*(gmegabuf(left)*r1   +gmegabuf(right)*(1-r1) + k1) ;\\n  gmegabuf (m+1) = dec*gmegabuf(m+1) + dec2*(gmegabuf(left+1)*r1 +gmegabuf(right+1)*(1-r1) + k2) ;\\n//  gmegabuf (m+2) = dec*gmegabuf(m+2) + dec2*(gmegabuf(left+2)*r1 +gmegabuf(right+2)*(1-r1) + k3) ;\\n  n += 1;\\n);\\n\\n\\nm = (frame%points);\\nm = max(0,int(1024 + (t0-time)*200));\\nn = m * recsize;\\nq5 = gmegabuf(n)/(gmegabuf(n+2)+zofs)*fov;\\nq6 = -gmegabuf(n+1)/(gmegabuf(n+2)+zofs)*fov;\\n\\nq10=  sqrt(gmegabuf (n+3));\\nq11=  sqrt(gmegabuf(n+4));\\nq12=  sqrt(gmegabuf (n+5));\\n\\n\\nmonitor =   m;\\n\\nq32 = aspecty;","pixel_eqs_eel":"rot = 0; zoom = 1; warp = 0; dy = .00; dx = -.00;","warp":" shader_body { \\n  vec4 tmpvar_1;\\n  tmpvar_1.w = 1.0;\\n  tmpvar_1.xyz = vec3(0.0, 0.0, 0.0);\\n  ret = tmpvar_1.xyz;\\n }","comp":"float xlat_mutablesmask;\\nvec2 xlat_mutableuv1;\\nvec2 xlat_mutableuv2;\\nvec2 xlat_mutableuv3;\\nvec2 xlat_mutableuv4;\\n shader_body { \\n  float flash_1;\\n  float dist_2;\\n  float stars_3;\\n  vec3 ret_4;\\n  xlat_mutableuv1 = ((uv - 0.5) * aspect.xy);\\n  float tmpvar_5;\\n  tmpvar_5 = (0.1 * time);\\n  float tmpvar_6;\\n  tmpvar_6 = (0.2 * rad);\\n  dist_2 = ((1.0 - fract(\\n    (0.3333333 + tmpvar_5)\\n  )) * (1.0 - tmpvar_6));\\n  vec2 tmpvar_7;\\n  tmpvar_7.x = q1;\\n  tmpvar_7.y = q2;\\n  xlat_mutableuv3 = (xlat_mutableuv1 + tmpvar_7);\\n  xlat_mutableuv4 = ((32.0 * dist_2) * xlat_mutableuv3);\\n  xlat_mutablesmask = (texture (sampler_pw_noise_lq, (xlat_mutableuv4 / 256.0)).y - 0.9);\\n  vec2 tmpvar_8;\\n  tmpvar_8 = abs((fract(xlat_mutableuv4) - 0.5));\\n  stars_3 = max (0.0, clamp ((\\n    (1.0 - dist_2)\\n   * \\n    ((0.1 / sqrt(dot (tmpvar_8, tmpvar_8))) * xlat_mutablesmask)\\n  ), 0.0, 1.0));\\n  dist_2 = ((1.0 - fract(\\n    (0.6666667 + tmpvar_5)\\n  )) * (1.0 - tmpvar_6));\\n  vec2 tmpvar_9;\\n  tmpvar_9.x = q1;\\n  tmpvar_9.y = q2;\\n  xlat_mutableuv3 = (xlat_mutableuv1 + tmpvar_9);\\n  xlat_mutableuv4 = ((32.0 * dist_2) * xlat_mutableuv3);\\n  xlat_mutablesmask = (texture (sampler_pw_noise_lq, (xlat_mutableuv4 / 256.0)).y - 0.9);\\n  vec2 tmpvar_10;\\n  tmpvar_10 = abs((fract(xlat_mutableuv4) - 0.5));\\n  stars_3 = (stars_3 + max (stars_3, clamp (\\n    ((1.0 - dist_2) * ((0.1 / sqrt(\\n      dot (tmpvar_10, tmpvar_10)\\n    )) * xlat_mutablesmask))\\n  , 0.0, 1.0)));\\n  dist_2 = ((1.0 - fract(\\n    (1.0 + tmpvar_5)\\n  )) * (1.0 - tmpvar_6));\\n  vec2 tmpvar_11;\\n  tmpvar_11.x = q1;\\n  tmpvar_11.y = q2;\\n  xlat_mutableuv3 = (xlat_mutableuv1 + tmpvar_11);\\n  xlat_mutableuv4 = ((32.0 * dist_2) * xlat_mutableuv3);\\n  xlat_mutablesmask = (texture (sampler_pw_noise_lq, (xlat_mutableuv4 / 256.0)).y - 0.9);\\n  vec2 tmpvar_12;\\n  tmpvar_12 = abs((fract(xlat_mutableuv4) - 0.5));\\n  stars_3 = (stars_3 + max (stars_3, clamp (\\n    ((1.0 - dist_2) * ((0.1 / sqrt(\\n      dot (tmpvar_12, tmpvar_12)\\n    )) * xlat_mutablesmask))\\n  , 0.0, 1.0)));\\n  vec2 tmpvar_13;\\n  tmpvar_13.x = q5;\\n  tmpvar_13.y = q6;\\n  xlat_mutableuv2 = (xlat_mutableuv1 - tmpvar_13);\\n  float tmpvar_14;\\n  tmpvar_14 = ((0.01 / sqrt(\\n    dot (xlat_mutableuv2, xlat_mutableuv2)\\n  )) * min (3.0, (\\n    ((mid - 0.5) * float((mid > 0.5)))\\n   * 2.0)));\\n  flash_1 = tmpvar_14;\\n  float angle_15;\\n  float tmpvar_16;\\n  tmpvar_16 = abs(xlat_mutableuv2.x);\\n  if ((xlat_mutableuv2.y >= 0.0)) {\\n    angle_15 = (1.0 - ((xlat_mutableuv2.y - tmpvar_16) / (xlat_mutableuv2.y + tmpvar_16)));\\n  } else {\\n    angle_15 = (3.0 - ((xlat_mutableuv2.y + tmpvar_16) / (tmpvar_16 - xlat_mutableuv2.y)));\\n  };\\n  angle_15 = (angle_15 * 0.25);\\n  float tmpvar_17;\\n  if ((xlat_mutableuv2.x < 0.0)) {\\n    tmpvar_17 = -(angle_15);\\n  } else {\\n    tmpvar_17 = angle_15;\\n  };\\n  flash_1 = (tmpvar_14 * (tmpvar_14 / (\\n    abs((fract((\\n      (3.0 * tmpvar_17)\\n     + \\n      (time * 2.0)\\n    )) - 0.5))\\n   + 0.18)));\\n  vec3 tmpvar_18;\\n  tmpvar_18 = max ((texture (sampler_main, uv).xyz * 2.0), ((\\n    (texture (sampler_blur2, uv).xyz * scale2)\\n   + bias2) * 2.0));\\n  vec2 tmpvar_19;\\n  tmpvar_19 = sin(xlat_mutableuv3);\\n  ret_4 = (clamp ((0.025 / \\n    sqrt(dot (tmpvar_19, tmpvar_19))\\n  ), 0.0, 1.0) * vec3(0.4, 0.1, 1.0));\\n  ret_4 = (ret_4 + clamp ((stars_3 * stars_3), 0.0, 1.0));\\n  ret_4 = (ret_4 * clamp ((1.0 - \\n    (2.0 * dot (tmpvar_18, vec3(0.32, 0.49, 0.29)))\\n  ), 0.0, 1.0));\\n  ret_4 = (ret_4 + tmpvar_18);\\n  vec3 tmpvar_20;\\n  tmpvar_20.x = q10;\\n  tmpvar_20.y = q11;\\n  tmpvar_20.z = q12;\\n  ret_4 = (ret_4 + ((2.0 * \\n    clamp (flash_1, 0.0, 1.0)\\n  ) * tmpvar_20));\\n  vec4 tmpvar_21;\\n  tmpvar_21.w = 1.0;\\n  tmpvar_21.xyz = ret_4;\\n  ret = tmpvar_21.xyz;\\n }"}')},1075:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":4,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"darken":1,"wave_a":0.001,"wave_scale":0.133,"wave_smoothing":0,"wave_mystery":-1,"modwavealphastart":1,"modwavealphaend":1.3,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"ob_size":0.015,"ob_b":1,"ib_size":0.26,"mv_a":0,"b2x":0.3,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":40,"thickoutline":1,"rad":0.06623,"tex_zoom":1.79845,"r":0,"a":0.1,"g2":0,"border_b":0,"border_a":0},"init_eqs_eel":"bob = 1.5;\\nro = 0;\\nred = rand(20);","frame_eqs_eel":"vol = 1 + 0.2*((bass_att+treb_att+mid_att)/3);\\nbob = bob*above(bob,0.01) - 0.01 + 1*(1 - above(bob,0.01));\\nbob = 0.4 + 0.4*sin(time*0.8);\\nbob = bob*vol;\\n//rad = bob;\\nborder_1 = 0.4;\\nsides = 30;\\nro = ro + 0.02;\\nang = ro;\\n//rad = 0.6;\\n\\nsp = red*0.025;\\nspi = 0.5 - sp;\\ntm = time*0.1;\\nborder_r = 0.5 + sp*sin(tm*0.6) + spi*cos(tm*1.46);\\nborder_g = 0.5 + sp*sin(tm*1.294) + spi*cos(tm*0.87);\\nborder_b = 0.5 + sp*sin(tm*1.418) + spi*cos(tm*0.76);\\n"},{"baseVals":{"enabled":1,"sides":40,"additive":1,"num_inst":4,"g":1,"b":1,"g2":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"x = 0.5 + 0.225*sin(time /instance*0.7);\\ny = 0.5 + 0.3*cos(time /instance*0.7);\\nx = x- 0.4*x*sin(time);\\ny = y- 0.4*y*cos(time);\\n\\n\\n\\nrad = rad*mid_att;\\nr = 0.5 + 0.5*sin(frame*0.5);\\nb = 0.5 + 0.5*sin(frame*0.5 + 2.094);\\ng = 0.5 + 0.5*sin(frame*0.5 + 4.188);\\n"},{"baseVals":{"enabled":1,"sides":40,"additive":1,"g":1,"b":1,"g2":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"x = 0.5 + 0.5*(sin(time*1.1)*0.3 + 0.7*sin(time*0.5));\\nx = 0.5 + 0.225*sin(time + 2.09);\\ny = 0.5 + 0.3*cos(time + 2.09);\\n\\nrad = rad*bass_att;\\nr = 0.5 + 0.5*sin(frame*0.5);\\nb = 0.5 + 0.5*sin(frame*0.5 + 2.094);\\ng = 0.5 + 0.5*sin(frame*0.5 + 4.188);\\n"},{"baseVals":{"enabled":1,"sides":40,"additive":1,"num_inst":5,"rad":0.07419,"g":1,"b":1,"g2":0,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"//x = 0.5 + 0.5*(sin(time*1.1)*0.3 + 0.7*sin(time*0.5));\\nx = 0.5 + 0.225*sin(time /instance);\\ny = 0.5 + 0.3*cos(time /instance);\\nx = x+ 0.4*x*sin(time);\\ny = y+ 0.4*y*cos(time);\\n\\n\\n//x = x+(0.1*q3)*sin((instance*2.4));\\n//y = y+(0.1*q4)*cos((instance*2.4));\\n\\n\\nrad = rad*treb_att;\\nr = 0.5 + 0.5*sin(frame*0.5);\\nb = 0.5 + 0.5*sin(frame*0.5 + 2.094);\\ng = 0.5 + 0.5*sin(frame*0.5 + 4.188);\\n"}],"waves":[{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"dec_med = pow (0.7, 30/fps);\\ndec_slow = pow (0.99, 30/fps);\\nbeat = max (max (bass, mid), treb); \\navg = avg*dec_slow + beat*(1-dec_slow);\\nis_beat = above(beat, .2+avg+peak) * above (time, t0+.2);\\nt0 = is_beat*time + (1-is_beat)*t0;\\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\\nindex = (index + is_beat) %8;\\nindex2 = (index2 + is_beat*bnot(index))%2;\\n\\nq20 = avg;\\nq21 = beat;\\nq22 = peak;\\n\\nps = .9*ps + .1*q22;\\nq23 = ps;\\nq24 = is_beat;\\nq26 = bass_att + mid_att + treb_att;\\nq27 = index +1;\\nq28 = index2;\\n\\n\\nk1 =  is_\\nbeat*equal(index%2,0);\\np1 =  k1*(p1+1) + (1-k1)*p1;\\np2 = dec_med * p2+ (1-dec_med)*p1;\\nrott = p2 * 3.1416/4;\\n\\nq1 = cos(rott);\\nq2 = sin(rott);\\nq3 = -q2;\\nq4 = q1;","pixel_eqs_eel":"zoom = 1.05;","warp":" shader_body { \\n  vec2 uv_1;\\n  vec2 tmpvar_2;\\n  tmpvar_2 = (uv - vec2(0.5, 0.5));\\n  vec4 tmpvar_3;\\n  tmpvar_3.w = 0.0;\\n  vec4 tmpvar_4;\\n  tmpvar_4 = texture (sampler_blur1, uv);\\n  tmpvar_3.xyz = ((tmpvar_4.xyz * scale1) + bias1);\\n  float tmpvar_5;\\n  tmpvar_5 = (dot (tmpvar_3, roam_sin) * 16.0);\\n  mat2 tmpvar_6;\\n  tmpvar_6[uint(0)].x = cos(tmpvar_5);\\n  tmpvar_6[uint(0)].y = -(sin(tmpvar_5));\\n  tmpvar_6[1u].x = sin(tmpvar_5);\\n  tmpvar_6[1u].y = cos(tmpvar_5);\\n  uv_1 = ((tmpvar_2 + (\\n    (0.2 * dot (((tmpvar_4.xyz * scale1) + bias1), vec3(0.32, 0.49, 0.29)))\\n   * \\n    (tmpvar_2 * tmpvar_6)\\n  )) - 0.5);\\n  vec2 tmpvar_7;\\n  tmpvar_7 = ((uv_1 * texsize.xy) * 0.02);\\n  vec2 tmpvar_8;\\n  tmpvar_8.x = (cos((tmpvar_7.y * q1)) * sin(-(tmpvar_7.y)));\\n  tmpvar_8.y = (sin(tmpvar_7.x) * cos((tmpvar_7.y * q2)));\\n  uv_1 = (uv_1 - ((tmpvar_8 * texsize.zw) * 12.0));\\n  vec4 tmpvar_9;\\n  tmpvar_9.w = 1.0;\\n  tmpvar_9.xyz = ((texture (sampler_main, uv_1).xyz * 0.98) - 0.02);\\n  ret = tmpvar_9.xyz;\\n }","comp":"vec3 xlat_mutableret1;\\nvec2 xlat_mutablers;\\nvec2 xlat_mutableuv1;\\nfloat xlat_mutablez;\\n shader_body { \\n  xlat_mutableuv1 = (uv - 0.5);\\n  xlat_mutablez = (0.2 / abs(xlat_mutableuv1.y));\\n  xlat_mutablers.x = (xlat_mutableuv1.x * xlat_mutablez);\\n  xlat_mutablers.y = ((xlat_mutablez / 2.0) + (time * 4.0));\\n  vec4 tmpvar_1;\\n  tmpvar_1 = texture (sampler_noise_hq, xlat_mutablers);\\n  xlat_mutableret1 = ((tmpvar_1.xyz * vec3(\\n    greaterThanEqual (tmpvar_1.xyz, vec3(0.0, 0.0, 0.0))\\n  )) - 0.6);\\n  float tmpvar_2;\\n  tmpvar_2 = clamp ((128.0 * xlat_mutableuv1.y), 0.0, 1.0);\\n  vec2 tmpvar_3;\\n  tmpvar_3 = fract(((\\n    (xlat_mutableuv1 * (1.0 - abs(xlat_mutableuv1.x)))\\n   - 0.5) - (\\n    (xlat_mutableret1 * 0.05)\\n   * tmpvar_2).xy));\\n  float x_4;\\n  x_4 = (tmpvar_3.y - 0.52);\\n  vec3 tmpvar_5;\\n  tmpvar_5 = (texture (sampler_main, tmpvar_3) + ((0.02 / \\n    (0.02 + sqrt((x_4 * x_4)))\\n  ) * slow_roam_sin)).xyz;\\n  xlat_mutableret1 = tmpvar_5;\\n  vec2 tmpvar_6;\\n  tmpvar_6 = (32.0 * ((\\n    (uv * mat2(0.6, -0.8, 0.8, 0.6))\\n   + \\n    (tmpvar_5 * 0.1)\\n  .xy) + (time / 64.0)));\\n  vec2 tmpvar_7;\\n  tmpvar_7 = abs((fract(tmpvar_6) - 0.5));\\n  vec3 tmpvar_8;\\n  tmpvar_8 = clamp (((0.25 / \\n    sqrt(dot (tmpvar_7, tmpvar_7))\\n  ) * vec3((texture (sampler_pw_noise_lq, \\n    (tmpvar_6 / 256.0)\\n  ).y - 0.9))), 0.0, 1.0);\\n  vec4 tmpvar_9;\\n  tmpvar_9.w = 1.0;\\n  tmpvar_9.xyz = (tmpvar_5 + ((\\n    (tmpvar_8.x * tmpvar_8.x)\\n   + \\n    ((rand_preset * (0.5 - uv.y)).xyz * vec3(0.0, 0.0, 1.0))\\n  ) * (1.0 - tmpvar_2)));\\n  ret = tmpvar_9.xyz;\\n }"}')},7022:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":2,"gammaadj":1,"decay":1,"echo_zoom":1,"echo_alpha":0.5,"wave_mode":2,"wave_brighten":0,"wave_a":1,"wave_scale":0,"wave_smoothing":0.9,"wave_mystery":0.173,"warpscale":0.107,"zoomexp":4.10046,"warp":0.01,"wave_g":0,"wave_b":0,"wave_x":0.448,"wave_y":0.122,"ob_size":0.005,"ob_r":1,"ob_g":1,"ob_b":1,"ib_size":0,"ib_r":1,"ib_g":1,"ib_b":1,"mv_x":1,"mv_y":1,"mv_dx":0.087,"mv_dy":0.343,"mv_l":1.663,"mv_r":0.89,"mv_g":0.03,"mv_b":0.881,"mv_a":0.199,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"thickoutline":1,"textured":1,"rad":1.32775,"tex_zoom":0.57959,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0},"init_eqs_eel":"","frame_eqs_eel":"border_r = border_r + 1.5*sin(q2*1.13);\\nborder_b = border_b + 0.5*sin(q2*1.23);\\nborder_g = border_g + 0.5*sin(q2*1.33);\\n//ang = 0.503 + (bass_att * 0.04);\\nmy_ang = my_ang + (0.005 + (0.001 * bass));\\nang = my_ang;"},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"","frame_eqs_eel":"//begin beat code\\nvolume = 0.3*(bass+mid);\\nbeatrate = equal(beatrate,0) + (1-equal(beatrate,0))*(below(volume,0.01) + (1-below(volume,0.01))*beatrate);\\nlastbeat = lastbeat + equal(lastbeat,0)*time;\\nmeanbass_att = 0.05*(meanbass_att*19 + bass_att);\\npeakbass_att = max(bass_att,peakbass_att);\\nbeat = above(volume,0.8)*below(peakbass_att - bass_att, 0.05*peakbass_att)*above(time - lastbeat, 0.1 + 0.5*(beatrate - 0.1));\\nbeatrate = max(if(beat,if(below(time-lastbeat,2*beatrate),0.1*(beatrate*9 + time - lastbeat),beatrate),beatrate),0.1);\\n//Adjust responsiveness: To increase responsiveness, set the \\"0.96 and \\"0.996\\" on the next line to slightly lower values. Higher values decrease responsiveness.\\npeakbass_att = beat*bass_att + (1-beat)*peakbass_att*(above(time - lastbeat, 2*beatrate)*0.96 + (1-above(time - lastbeat, 2*beatrate))*0.996);\\nlastbeat = beat*time + (1-beat)*lastbeat;\\npeakbass_att = max(peakbass_att,1.1*meanbass_att);\\n//end beat code\\n\\nzoom = 1;\\ndecay = 1;\\nwarp = 0;\\nwave_a = 0;\\n\\ntic = min(time-tin,.1);\\ntin = time;\\n\\nq2 = 1;\\n\\nq1=1;\\nvol = vol + ((alt + bass + mid)/3-vol)*tic*1;\\nq5 = vol*vol*vol*2;\\n\\n\\nq8 = sin(time)*.5;\\nq9 = sin(time*.75)*.5;\\n\\nsw = abs(sw - beat);\\nan = an + tic*.5*(1-2*sw);\\n\\n\\nq7 = 1+(pow(q8,2) + pow(q9,2))*1;\\nq10 = sin(an);\\nq11 = cos(an);\\n\\nsp = sp + tic*vol*vol*.5;\\n\\nq12 = sp;\\n\\nmonitor = q12;\\nvol2=bass+treb+mid;\\nmtime=mtime+vol2;\\nq1=3-sin(mtime*.01)*.1;","pixel_eqs_eel":"//zoom = pow(rad,2)+.01;","warp":" shader_body { \\n  vec3 ret_1;\\n  vec3 tmpvar_2;\\n  tmpvar_2 = (texture (sampler_noise_lq, ((\\n    ((texsize.xy * texsize_noise_lq.zw).x * uv)\\n   / 2.0) + q23)) + 1.0).xyz;\\n  vec3 tmpvar_3;\\n  tmpvar_3 = (((texture (sampler_blur1, uv).xyz * scale1) + bias1) - 0.3);\\n  vec2 tmpvar_4;\\n  tmpvar_4.x = (0.3 * tmpvar_3.x);\\n  tmpvar_4.y = tmpvar_3.y;\\n  ret_1 = ((-0.4 * (\\n    ((texture (sampler_blur1, ((uv / 4.0) + (0.4 * tmpvar_4))).xyz * scale1) + bias1)\\n   - \\n    (tmpvar_2 * 0.1)\\n  )) + (texture (sampler_main, (uv + \\n    (tmpvar_3 * 0.01)\\n  .xy)).xyz + (tmpvar_2 * 0.1)));\\n  float tmpvar_5;\\n  tmpvar_5 = (1.0 - ((0.01 * q28) * (q28 * rad)));\\n  ret_1 = (ret_1 * (0.98 * (tmpvar_5 * tmpvar_5)));\\n  ret_1 = (ret_1 - 0.04);\\n  vec4 tmpvar_6;\\n  tmpvar_6.w = 1.0;\\n  tmpvar_6.xyz = ret_1;\\n  ret = tmpvar_6.xyz;\\n }","comp":" shader_body { \\n  vec2 uv3_1;\\n  vec2 uvm_2;\\n  vec3 ret_3;\\n  uvm_2 = (((\\n    ((uv - 0.5) * q7)\\n   * \\n    (1.0/((((1.0 - \\n      (rad * 0.1)\\n    ) + (q9 * \\n      (uv.x - 0.5)\\n    )) + (q8 * (uv.y - 0.5)))))\\n  ) + 0.5) - 0.5);\\n  uvm_2 = (((\\n    (q10 * uvm_2)\\n   + \\n    ((vec2(1.0, -1.0) * q11) * uvm_2.yx)\\n  ) * aspect.yw) + 0.5);\\n  uvm_2 = (abs((\\n    fract(((uvm_2 + q12) * 0.5))\\n   - 0.5)) * 2.0);\\n  uv3_1 = (((texture (sampler_main, uvm_2).zx - 0.37) * 0.13) + uvm_2);\\n  vec3 tmpvar_4;\\n  tmpvar_4.x = (roam_cos.x * 0.3);\\n  tmpvar_4.y = (roam_cos.z * 0.2);\\n  tmpvar_4.z = (roam_sin.y * 0.4);\\n  ret_3 = (texture (sampler_pw_main, uvm_2).yzx + tmpvar_4);\\n  ret_3 = (pow (mix (vec3(\\n    ((((texture (sampler_blur1, uv3_1).xyz * scale1) + bias1).x + ((texture (sampler_blur3, uv3_1).xyz * scale3) + bias3).z) + (0.1 * roam_cos.y))\\n  ), ret_3, ret_3), vec3(0.3, 2.0, 1.0)) - 0.25);\\n  ret_3 = (ret_3 * ((texture (sampler_blur3, uv3_1).xyz * scale3) + bias3).y);\\n  vec4 tmpvar_5;\\n  tmpvar_5.w = 1.0;\\n  tmpvar_5.xyz = ret_3;\\n  ret = tmpvar_5.xyz;\\n }"}')},2897:e=>{e.exports=JSON.parse('{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"echo_zoom":1,"echo_orient":1,"wave_thick":1,"wave_brighten":0,"wrap":0,"brighten":1,"wave_a":0.401,"wave_scale":3.177,"wave_smoothing":0,"wave_mystery":-0.4,"modwavealphastart":1,"modwavealphaend":1,"warpanimspeed":2.289,"warpscale":5.472,"zoomexp":0.01,"zoom":0.9901,"warp":1.8566,"ob_size":0.005,"ob_a":1,"ib_size":0,"ib_r":1,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":64,"mv_y":48,"mv_l":0,"mv_b":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":12,"additive":1,"num_inst":512,"y":0.55,"rad":0.034,"tex_zoom":0.7874,"g":0.45,"g2":0,"border_a":0},"init_eqs_eel":"started = 0;\\nt1 = 0.412; //seeds for pseudo random generator\\nt2 = 0.4563;\\nt3 = 0.6452;\\nt4 = 0.2565;","frame_eqs_eel":"\\nrnd1 = if(equal(instance,0),t1,rnd1);\\nrnd2 = if(equal(instance,0),t2,rnd2);\\nrnd3 = if(equal(instance,0),t3,rnd3);\\nrnd4 = if(equal(instance,0),t4,rnd4);\\nrnd1 = 4*rnd1*(1-rnd1);\\nrnd2 = 4*rnd2*(1-rnd2);\\nrnd3 = 4*rnd3*(1-rnd3);\\nrnd4 = 4*rnd4*(1-rnd4);\\nt = .6;\\nt =  (rnd1+time*t) - int(rnd1+time*t);\\nt = t + rnd2*0.1;\\nwh = rnd4*asin(1)*4;\\nwv = 0.25 + rnd3*0.1;\\n\\nd = 1.4; // makes the perspective impact\\nzoom = 1;\\nl = 1;\\n\\n// Kardan angles\\n\\nw1 = q3; // first rotation: clockwise in the desktop pane\\nw2 = q4; // rotation around vertical axis\\nw3 = q5; // rotation around horizontal axis\\n\\n\\n// definition of the 3D shape\\n\\ni = instance;\\n\\nmy_x = t *(cos(wh)*sin(wv)*l);\\nmy_y = (-0.5 +(t-0.75)*(t-0.75))*cos(wv)*l;\\nmy_z = t*(sin(wh)*sin(wv)*l);\\n\\n\\n// 3D rotations\\n\\nx1 = cos(w1)*my_x + sin(w1)*my_y;\\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\\nz1 = my_z;\\n\\nx2 = cos(w2)*x1 + sin(w2)*z1;\\nz2 = -sin(w2)*x1 + cos(w2)*z1;\\ny2 = y1;\\n\\ny3 = cos(w3)*y2 + sin(w3)*z2;\\nz3 = -sin(w3)*y2 + cos(w3)*z2;\\nx3 = x2;\\n\\n// perspective calculation\\n\\nl = sqrt(x3*x3 + y3*y3);\\nw = atan2(x3,y3);\\np = tan(asin(1) + atan2(d+z3,l));\\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\\n\\nrad = rad/d;\\nmy_x = zoom*sin(w)*p;\\nmy_y = zoom*cos(w)*p;\\n\\nx = 0.5 + my_x;\\ny = 0.5 + my_y;\\n\\nx = 0.5 + (x-0.5)/q2;\\ny = 0.5 + (y-0.5)/q1;"},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"textured":1,"x":0.52,"y":0.41,"rad":0.5216,"ang":0.1885,"tex_zoom":0.73458,"g":1,"b":1,"r2":1,"b2":1,"a2":0.75,"border_a":0,"enabled":0},"init_eqs_eel":"vx = 0","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"textured":1,"x":0.48,"y":0.41,"rad":0.61162,"ang":5.96903,"tex_zoom":0.73458,"g":1,"b":1,"r2":1,"b2":1,"a2":0.75,"border_a":0,"enabled":0},"init_eqs_eel":"vx = 0","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"y":0.75,"rad":0.07059,"tex_zoom":0.73458,"g2":0,"border_a":0,"enabled":0},"init_eqs_eel":"vx = 0","frame_eqs_eel":"x = q1;\\ny = q5;"}],"waves":[{"baseVals":{"additive":1,"r":0.2,"g":0,"b":0,"a":0.3,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n=sample*6.283;\\nphs=-sample * 0.2;\\ntm=time*0.4 + phs;\\n\\nflip=flip+1;\\nflip=flip*below(flip,2);\\n\\nxp=0;\\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\\nzp=0;\\n\\n//wrist movement;\\nang=sin(tm*2)*0.5 +0.5;\\n\\nxq=xp;\\nyq=yp*sin(ang) + zp*cos(ang);\\nzq=yp*cos(ang) - zp*sin(ang);\\nyq=yp;\\nzq=zp;\\n\\nang=tm*8;\\nxp=xq*sin(ang) + yq*cos(ang);\\nyp=xq*cos(ang) - yq*sin(ang);\\nzp=zq;\\n\\n//forearm movement;\\nzp=zp-0.3;\\nang=3.14 + sin(tm*2 - 0.5)*1.5;\\nxq=xp;\\nyq=yp*sin(ang) + zp*cos(ang);\\nzq=yp*cos(ang) - zp*sin(ang);\\n\\n//upper arm twist\\nang=-1.0 + cos(tm*3 + 0.5);\\nxp=xq*sin(ang) + yq*cos(ang);\\nyp=xq*cos(ang) - yq*sin(ang);\\nzp=zq;\\n\\n//upper arm outward;\\nzp=zp-0.35;\\nang=cos(tm*2)*0.75 - 1.05;\\nxq=xp*sin(ang) + zp*cos(ang);\\nyq=yp;\\nzq=xp*cos(ang) - zp*sin(ang);\\n\\n//upper arm up down;\\nang=cos(tm)*0.5 - 0.5;\\nxp=xq;\\nyp=yq*cos(ang) - zq*sin(ang);\\nzp=yq*sin(ang) + zq*cos(ang);\\n\\n//xp=xq;yp=yq;zp=zq;\\n\\n\\n//project into screenspace and draw on screen\\nzp=zp+2;\\nxs=xp/zp;\\nys=yp/zp;\\n\\nx=xs+0.5;\\ny=ys*1.3+0.5;\\n\\n\\n//a=(1-sample)*flip;\\n\\n//b=b+pow(1-sample,2)*0.3;\\n\\nx = 0.5 + (x-0.5)/q1;\\ny = 0.5 + (y-0.5)/q2 + 0.1;"},{"baseVals":{"additive":1,"r":0.2,"g":0,"b":0,"a":0.3,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n=sample*6.283;\\nphs=-sample * 0.2;\\ntm=time*0.4 + phs;\\n\\nflip=flip+1;\\nflip=flip*below(flip,2);\\n\\nxp=0;\\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\\nyp=-yp;\\nzp=0;\\n\\n//wrist movement;\\nang=sin(tm*2)*0.5 +0.5;\\n\\nxq=xp;\\nyq=yp*sin(ang) + zp*cos(ang);\\nzq=yp*cos(ang) - zp*sin(ang);\\nyq=yp;\\nzq=zp;\\n\\nang=tm*8;\\nxp=xq*sin(ang) + yq*cos(ang);\\nyp=xq*cos(ang) - yq*sin(ang);\\nzp=zq;\\n\\n//forearm movement;\\nzp=zp-0.3;\\nang=3.14 + sin(tm*2 - 0.5)*1.5;\\nxq=xp;\\nyq=yp*sin(ang) + zp*cos(ang);\\nzq=yp*cos(ang) - zp*sin(ang);\\n\\n//upper arm twist\\nang=-1.0 + cos(tm*3 + 0.5);\\nxp=xq*sin(ang) + yq*cos(ang);\\nyp=xq*cos(ang) - yq*sin(ang);\\nzp=zq;\\n\\n//upper arm outward;\\nzp=zp-0.35;\\nang=cos(tm*2)*0.75 - 1.05;\\nxq=xp*sin(ang) + zp*cos(ang);\\nyq=yp;\\nzq=xp*cos(ang) - zp*sin(ang);\\n\\n//upper arm up down;\\nang=cos(tm)*0.5 - 0.5;\\nxp=xq;\\nyp=yq*cos(ang) - zq*sin(ang);\\nzp=yq*sin(ang) + zq*cos(ang);\\n\\n//xp=xq;yp=yq;zp=zq;\\n\\n\\n//project into screenspace and draw on screen\\nzp=zp+2;\\nxs=xp/zp;\\nys=yp/zp;\\n\\nx=xs+0.5;\\ny=ys*1.3+0.5;\\n\\n\\n//a=(1-sample)*flip;\\n\\n\\n//b=b+pow(1-sample,2)*0.3;\\n\\n\\nx = 0.5 + (x-0.5)/q1;\\ny = 0.5 + (y-0.5)/q2 + 0.1;\\n"},{"baseVals":{"samples":61,"thick":1,"scaling":2.44415,"smoothing":0,"enabled":0},"init_eqs_eel":"","frame_eqs_eel":"t1 = q1;\\nt2 = q2;\\nt3 = q3;\\nt4 = q4;\\nt5 = q5;\\nt6 = q6;\\nt7 = q7;\\nt8 = q8;","point_eqs_eel":"x = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\\n\\ny = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;"},{"baseVals":{"samples":61,"scaling":2.44415,"smoothing":0,"enabled":0},"init_eqs_eel":"t2 = 0","frame_eqs_eel":"t1 = q1;\\nt2 = q2;\\nt3 = q3;\\nt4 = q4;\\nt5 = q5;\\nt6 = q6;\\nt7 = q7;\\nt8 = q8;","point_eqs_eel":"x = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\\n\\ny = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;"}],"init_eqs_eel":"","frame_eqs_eel":"wave_a = 0;\\nq1 =aspectx;\\nq2 = aspecty;\\n\\n\\nb = b + bass*bass*0.85;\\nm = m + mid*mid*0.85;\\nt = t + treb*treb*0.85;\\n\\nq3 = b*0.012;\\nq4 = m*0.012;\\nq5 = t*0.012;","pixel_eqs_eel":"","warp":" shader_body { \\n  vec2 my_uv_1;\\n  vec3 ret_2;\\n  vec2 tmpvar_3;\\n  tmpvar_3 = (vec2(1280.0, 1024.0) * texsize.zw);\\n  float tmpvar_4;\\n  vec2 tmpvar_5;\\n  tmpvar_5 = (uv + vec2(0.005, 0.0));\\n  vec2 tmpvar_6;\\n  tmpvar_6 = (uv - vec2(0.005, 0.0));\\n  tmpvar_4 = (((\\n    (texture (sampler_blur2, tmpvar_5).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, tmpvar_6).xyz * scale2)\\n   + bias2)).x * tmpvar_3.x);\\n  float tmpvar_7;\\n  vec2 tmpvar_8;\\n  tmpvar_8 = (uv + vec2(0.0, 0.005));\\n  vec2 tmpvar_9;\\n  tmpvar_9 = (uv - vec2(0.0, 0.005));\\n  tmpvar_7 = (((\\n    (texture (sampler_blur2, tmpvar_8).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, tmpvar_9).xyz * scale2)\\n   + bias2)).x * tmpvar_3.y);\\n  vec2 tmpvar_10;\\n  tmpvar_10.x = tmpvar_4;\\n  tmpvar_10.y = tmpvar_7;\\n  vec2 tmpvar_11;\\n  tmpvar_11.x = (((\\n    (texture (sampler_blur2, tmpvar_5).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, tmpvar_6).xyz * scale2)\\n   + bias2)).x * tmpvar_3.x);\\n  tmpvar_11.y = (((\\n    (texture (sampler_blur2, tmpvar_8).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, tmpvar_9).xyz * scale2)\\n   + bias2)).x * tmpvar_3.y);\\n  ret_2.x = texture (sampler_fw_main, ((uv - (tmpvar_10 * 0.01)) + (tmpvar_11 * 0.003))).x;\\n  vec4 tmpvar_12;\\n  tmpvar_12 = texture (sampler_blur3, uv);\\n  ret_2.x = (ret_2.x + ((ret_2.x - \\n    ((tmpvar_12.xyz * scale3) + bias3)\\n  .x) * 0.1));\\n  ret_2.x = (ret_2.x + 0.004);\\n  vec2 tmpvar_13;\\n  tmpvar_13.x = tmpvar_7;\\n  tmpvar_13.y = -(tmpvar_4);\\n  my_uv_1 = (uv + ((tmpvar_13 * 0.05) * (1.2 - \\n    ((tmpvar_12.xyz * scale3) + bias3)\\n  .y)));\\n  ret_2.z = texture (sampler_fw_main, my_uv_1).z;\\n  vec2 x_14;\\n  x_14 = (my_uv_1 - uv);\\n  ret_2.z = (ret_2.z + ((\\n    ((ret_2.z - ((texture (sampler_blur1, uv).xyz * scale1) + bias1).z) * sqrt(dot (x_14, x_14)))\\n   * 180.0) / sqrt(\\n    dot (tmpvar_3, tmpvar_3)\\n  )));\\n  ret_2.z = (ret_2.z * 0.8);\\n  ret_2.z = (ret_2.z + 0.004);\\n  vec2 tmpvar_15;\\n  tmpvar_15.x = -(tmpvar_7);\\n  tmpvar_15.y = tmpvar_4;\\n  my_uv_1 = (tmpvar_15 * 0.045);\\n  vec2 tmpvar_16;\\n  tmpvar_16.x = (((\\n    (texture (sampler_blur2, (uv + vec2(0.01, 0.0))).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, (uv - vec2(0.01, 0.0))).xyz * scale2)\\n   + bias2)).y * tmpvar_3.x);\\n  tmpvar_16.y = (((\\n    (texture (sampler_blur2, (uv + vec2(0.0, 0.01))).xyz * scale2)\\n   + bias2) - (\\n    (texture (sampler_blur2, (uv - vec2(0.0, 0.01))).xyz * scale2)\\n   + bias2)).y * tmpvar_3.y);\\n  my_uv_1 = (my_uv_1 + (uv - (tmpvar_16 * 0.03)));\\n  ret_2.y = texture (sampler_fw_main, my_uv_1).y;\\n  ret_2.y = (ret_2.y + ((\\n    (ret_2.y - ((texture (sampler_blur3, my_uv_1).xyz * scale3) + bias3).y)\\n   * 0.1) + 0.01));\\n  vec4 tmpvar_17;\\n  tmpvar_17.w = 1.0;\\n  tmpvar_17.xyz = ret_2;\\n  ret = tmpvar_17.xyz;\\n }","comp":" shader_body { \\n  vec2 uv1_1;\\n  vec3 tmpvar_2;\\n  tmpvar_2 = texture (sampler_main, uv).xyz;\\n  vec2 tmpvar_3;\\n  tmpvar_3.y = 0.0;\\n  tmpvar_3.x = texsize.z;\\n  vec2 tmpvar_4;\\n  tmpvar_4.x = 0.0;\\n  tmpvar_4.y = texsize.w;\\n  vec2 tmpvar_5;\\n  tmpvar_5.x = (texture (sampler_main, (uv - tmpvar_3)).xyz - texture (sampler_main, (uv + tmpvar_3)).xyz).x;\\n  tmpvar_5.y = (texture (sampler_main, (uv - tmpvar_4)).xyz - texture (sampler_main, (uv + tmpvar_4)).xyz).x;\\n  uv1_1 = ((0.3 * cos(\\n    (((uv - 0.5) * 2.0) + 1.7)\\n  )) - (2.0 * tmpvar_5));\\n  vec4 tmpvar_6;\\n  tmpvar_6.w = 1.0;\\n  tmpvar_6.xyz = ((-(tmpvar_2) / 4.0) + ((6.0 * vec3(\\n    clamp ((0.03 / sqrt(dot (uv1_1, uv1_1))), 0.0, 1.0)\\n  )) * (-0.08 + tmpvar_2)));\\n  ret = tmpvar_6.xyz;\\n }"}')},5171:e=>{e.exports=JSON.parse('{"version":1,"baseVals":{"rating":5,"gammaadj":4.990001,"decay":1,"echo_zoom":10.784553,"wave_mode":7,"additivewave":1,"wave_dots":1,"wave_brighten":0,"wrap":0,"wave_a":0.997938,"wave_scale":1.990516,"wave_smoothing":0,"wave_mystery":-1,"modwavealphastart":0.5,"modwavealphaend":1,"warpscale":0.999998,"zoomexp":0.999985,"fshader":1,"zoom":0.9999,"dy":0.00001,"warp":0.01,"wave_r":0.400001,"wave_g":0.4,"wave_y":1,"ob_size":0,"ob_r":0.300001,"ob_g":1,"ob_b":0.3,"ob_a":0.100001,"ib_size":0.005,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":0.5,"mv_x":8.960042,"mv_y":12.960033,"mv_dx":-0.26,"mv_dy":0.44,"mv_l":5,"mv_a":0},"shapes":[{"baseVals":{},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{},"init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{},"init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{},"init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_eel":"flip=-1;","frame_eqs_eel":"warp=0;decay=1;\\nvol = (.75*(bass_att+mid_att+treb_att)/3+.25*prevVol);\\nprevAvgBass=avgBass;\\navgBass=avgBass + (bass-AvgBass)*0.01;\\nq4=max(avgBass*1.001-.999*prevAvgBass,0);\\nq4=min(q4,.006);\\n// -------------------------------- Beat Detective 007 ----------------------------------\\nsure=if(equal(sure,0),.6,sure);\\ninterval=if(equal(interval,0),40,interval);\\nlastbeat=if(equal(lastbeat,0),frame-FPS,lastbeat);\\ndbass=(bass-pbass)/FPS;\\nbeat=above(dbass,.6*maxdbass)*above(frame-lastbeat,FPS/3);\\nsure=if(beat*below(abs(frame-(interval+lastbeat)),FPS/5),\\nmin(.095+sure,1),beat*(sure-.095)+(1-beat)*sure*.9996);\\nsure=max(.5,sure);\\ncheat=if(above(frame,lastbeat+interval+ int(FPS/10))*above(sure,.91),1,cheat);\\nbeat=if(cheat,1,beat);\\nsure=if(cheat,.95*sure,sure);\\nmaxdbass=max(maxdbass*.999,dbass);\\nmaxdbass=max(.012,maxdbass);\\nmaxdbass=min(.02,maxdbass);\\ninterval=if(beat, frame-lastbeat,interval);\\nlastbeat=if(beat,frame-cheat*int(FPS/10),lastbeat);\\ncheat=0;\\npbass=bass;\\n// ----------------------------------------------------------------------------------------------\\nlastFlip=if( above(bass/avgBass,2)*above(frame-lastFlip,100)*beat, frame,lastFlip );\\nflip = if(equal(frame,lastFlip),abs(flip)-1, flip);\\nwave_mystery=flip;\\nob_size = below(frame-lastBeat,FPS/8)*.08*(frame-lastBeat)/FPS;\\nf=abs(cos(time/8+.54+sin(time/3+1.075)));\\nob_r=1*f + 1*(1-f);\\nob_g=.3*f + 1*(1-f);\\nob_b=.3*f + .3*(1-f);\\nf=(frame-lastbeat)/interval;\\nf=above(f,.8)*below(f,1)*f; f=max(0,f); f=min(f,1);\\n\\nwave_g=.4+.6*(f);\\nwave_b=.4+.6*(1-f);\\n\\nq1= 3.1416*(wave_mystery+1)/2;\\nq2=.25*cos(time+abs(2*sin(time*2+2.311)*( vol-amt))*sin(time*7.45+.876));\\nq3=-q2;\\n\\namt=amt+ .05*(vol-amt);\\nprevVol=vol;\\nBPM = BPM + .01*(60*FPS/interval - BPM);\\nmonitor = 0*pctg+1*BPM;","pixel_eqs_eel":"x=x-.5;\\ny=-(y-.5);\\nttan1 = tan(q1+1.5708)*(x-q3)-y+q2;\\nttan2 = tan(q1+1.5708);\\nIsLeftYtonosY = above(ttan1*(sign(3.1416-q1)),0);\\n\\ndist = abs(ttan1)/sqrt(ttan2*ttan2 + 1);\\ntotX=.5*cos(q1)*sign(IsLeftYtonosY-.5)*sqr(dist)/(.5-q2);\\ntotY=-.5*sin(q1)*sign(IsLeftYtonosY-.5)*sqr(dist)/(.5-q2);\\n\\ndx=dx+totX;\\ndy=dy+totY;\\nprevRot=q1;\\nzoom = 1-25*q4*sqrt(pow(.5-dist,3))/abs(.5-q2);","warp":"","comp":""}')}},n={};function a(t){if(n[t])return n[t].exports;var r=n[t]={exports:{}};return e[t](r,r.exports,a),r.exports}return a.d=(e,n)=>{for(var t in n)a.o(n,t)&&!a.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},a.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a(7083)})()}));