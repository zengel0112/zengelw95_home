"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CHILDREN = {
    ASSIGNMENT_EXPRESSION: [
        { type: "NODE", key: "right" },
    ],
    SCRIPT: [{ type: "ARRAY", key: "body" }],
    EXPRESSION_BLOCK: [{ type: "ARRAY", key: "body" }],
    UNARY_EXPRESSION: [{ type: "NODE", key: "value" }],
    NUMBER_LITERAL: [],
    IDENTIFIER: [],
    CALL_EXPRESSION: [
        { type: "ARRAY", key: "arguments" },
        { type: "NODE", key: "callee" },
    ],
    BINARY_EXPRESSION: [
        { type: "NODE", key: "left" },
        { type: "NODE", key: "right" },
    ],
    LOGICAL_EXPRESSION: [
        { type: "NODE", key: "left" },
        { type: "NODE", key: "right" },
    ],
};
function mapAst(ast, cb) {
    const children = CHILDREN[ast.type];
    let newAst = ast;
    if (children == null) {
        throw new Error(`Unknown children definition for ${ast.type}`);
    }
    children.forEach(child => {
        if (child.type === "NODE") {
            const orignalChild = ast[child.key];
            const newChild = mapAst(orignalChild, cb);
            if (newChild !== orignalChild) {
                newAst = Object.assign(Object.assign({}, newAst), { [child.key]: newChild });
            }
        }
        else if (child.type === "ARRAY") {
            const orignalChildren = ast[child.key];
            const newChildren = orignalChildren.map(originalChild => mapAst(originalChild, cb));
            const childrenHaveChanged = orignalChildren.some((child, i) => child !== newChildren[i]);
            if (childrenHaveChanged) {
                newAst = Object.assign(Object.assign({}, newAst), { [child.key]: newChildren });
            }
        }
    });
    return cb(newAst);
}
exports.mapAst = mapAst;
//# sourceMappingURL=astUtils.js.map