"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
/* Build up a string showing a formatted source location in context with line numbers.
 *
 *   2 | z = sqr(y, 10);
 * > 3 | x = wat();
 *     |     ^^^
 *   4 | y = 100;
 */
function printLoc(loc, rawSource, contextLines = 1) {
    const firstIndex = Math.max(loc.first_line - 1 - contextLines, 0);
    const lastIndex = loc.last_line + contextLines;
    const sourceLines = rawSource.split("\n").slice(firstIndex, lastIndex);
    const annotatedLines = sourceLines.map((line, i) => {
        const lineNumber = i + firstIndex + 1;
        const inRange = lineNumber >= loc.first_line && lineNumber <= loc.last_line;
        const gutter = inRange ? ">" : " ";
        return `${gutter} ${lineNumber} | ${line}`;
    });
    if (loc.first_line === loc.last_line) {
        const padding = utils_1.repeat(loc.first_column, " ");
        const underline = utils_1.repeat(loc.last_column - loc.first_column, "^");
        const insertIndex = loc.first_line - firstIndex;
        annotatedLines.splice(insertIndex, 0, `    | ${padding}${underline}`);
    }
    return annotatedLines.join("\n");
}
exports.printLoc = printLoc;
class CompilerError extends Error {
    constructor(message, loc, rawSource) {
        super(message);
        // TODO: Create an error message that encourages users to open an issue at
        // https://github.com/captbaritone/eel-wasm/issues is they see this, and gives
        // Them an easy way to attach the right context.
        this.sourceContext = printLoc(loc, rawSource);
        this.loc = loc;
    }
}
class UserError extends CompilerError {
}
function createUserError(message, loc, rawSource) {
    return new UserError(message, loc, rawSource);
}
exports.createUserError = createUserError;
function createCompilerError(message, loc, rawSource) {
    return new CompilerError(message, loc, rawSource);
}
exports.createCompilerError = createCompilerError;
//# sourceMappingURL=errorUtils.js.map